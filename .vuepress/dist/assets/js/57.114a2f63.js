(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{529:function(e){e.exports=[{title:"需开启404错误页",url:"/README-nginx.html",hash:"",data:[{url:"/README-nginx.html",hash:"需开启404错误页",title:"需开启404错误页",content:"error_page 404 /404.html;"}]},{title:"<WEcharts>",url:"/component/WEcharts.html",hash:"",data:[{url:"/component/WEcharts.html",hash:"wecharts",title:"<WEcharts>",content:"<WEcharts> 是一个基于echarts 封装的图表组件，若您下载的模板中没有自带，请手动拷贝国际化模板中components/WEcharts文件夹到自己的项目中。组件详情"},{url:"/component/WEcharts.html",hash:"子组件",title:"子组件",content:"无"},{url:"/component/WEcharts.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 options Object echarts配置数据，详情请看配置项  - baidukey[可选] String 百度地图key，使用echarts中的地图功能时需要，百度开放平台申请  -"},{url:"/component/WEcharts.html",hash:"事件回调-callback",title:"事件回调 callback",content:"无"},{url:"/component/WEcharts.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/WEcharts.html",hash:"自定义图表",title:"自定义图表",content:"理论上所有基于web【JavaScript】的图表都可以使用 可以参考，模板中的echarts图表组件封装示例，详情请看  移动端推荐使用F2图表 \nF2 移动端可视化方案\nF2 是一个专注于移动，开箱即用的可视化解决方案，完美支持 H5 环境同时兼容多种环境（Node, 小程序，Weex），完备的图形语法理论，满足你的各种可视化需求，专业的移动设计指引为你带来最佳的移动端图表体验。\nF2 Github地址：https://github.com/antvis/f2"}]},{title:"<a>",url:"/component/a.html",hash:"",data:[{url:"/component/a.html",hash:"a",title:"<a>",content:"<a> 是一个用于实现页面间的跳转或关闭的组件。"},{url:"/component/a.html",hash:"子组件",title:"子组件",content:"不可以在标签内部直接添加文本，需要使用 <text> 标签来显示文本。"},{url:"/component/a.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/a.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 href String 待跳转的页面 URL，-1为关闭当前页面可使用 root:// 表示 src 目录，比如首页: root://pages/index.js - statusBarColor String 状态栏颜色值 继承 > #3EB4FF backgroundColor String 页面背景颜色 继承 > #ffffff 更多参数详见 eeui.openPage 的 params 参数说明 例如："}]},{title:"<banner>",url:"/component/banner.html",hash:"",data:[{url:"/component/banner.html",hash:"banner",title:"<banner>",content:"<banner> 是一个轮播控件，支持无限循环，支持任意组件。"},{url:"/component/banner.html",hash:"子组件",title:"子组件",content:"支持包括 <div> 在内的任何组件作为自己的子组件。因此，在写一个组件时，推荐外层使用 <div> 作为根容器。"},{url:"/component/banner.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/banner.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/banner.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 autoPlayDuration Number 设置切换间隔时间，单位：毫秒 6000 scrollDuration Number 设置切换过程时间，单位：毫秒 900 indicatorShow Boolean 是否显示指示器 true indicatorShape Number 设置指示器形状：0: 矩形、1: 圆形 1 indicatorPosition Number 设置指示器位置：0: 中下、1: 右下、2: 左下3: 中上、4: 右上、5: 左上 0 indicatorMargin Number 设置指示器边缘距离 8 indicatorSpace Number 设置指示器间距 3 selectedIndicatorColor String 设置指示器已选颜色 #3EB4FF unSelectedIndicatorColor String 设置指示器未选颜色 #99ffffff indicatorWidth Number 设置指示器宽 6 indicatorHeight Number 设置指示器高 6 例如："},{url:"/component/banner.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/banner.html",hash:"调用方法-methods",title:"调用方法 methods",content:""}]},{title:"<blur>",url:"/component/blur.html",hash:"",data:[{url:"/component/blur.html",hash:"blur",title:"<blur>",content:"<blur> 是模糊图层组件。"},{url:"/component/blur.html",hash:"子组件",title:"子组件",content:"<blur> 理论上支持各种类型的子元素。"},{url:"/component/blur.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/blur.html",hash:"示例代码",title:"示例代码",content:"在线测试：https://editor.eeui.app/#/files/eeui/demo/src/pages/blur-demo.vue"},{url:"/component/blur.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 amount Number 模糊程度，范围：0-100 30 type String 模糊类型：light白色、dark黑色 light"},{url:"/component/blur.html",hash:"事件回调-callback",title:"事件回调 callback",content:""}]},{title:"<button>",url:"/component/button.html",hash:"",data:[{url:"/component/button.html",hash:"button",title:"<button>",content:"<button> 是一个预设常用按钮。"},{url:"/component/button.html",hash:"子组件",title:"子组件",content:"无"},{url:"/component/button.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/button.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/button.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 text String 按钮文字 - color String 按钮文字颜色 #FFFFFF fontSize Number 字体大小 - backgroundColor String 按钮背景颜色 #3EB4FF borderRadius Number 圆角半径 8 borderWidth Number 边框大小 0 borderColor String 边框颜色 - disabled Boolean 是否禁用 false loading Boolean 是否加载中 false model String 预设风格，详细注① - 注① red：红色；green：绿色；blue：蓝色；pink：粉红； yellow：黄色；orange：橙色；gray：灰色；black：黑色；white：白色； 例如："},{url:"/component/button.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/button.html",hash:"调用方法-methods",title:"调用方法 methods",content:""}]},{title:"<grid>",url:"/component/grid.html",hash:"",data:[{url:"/component/grid.html",hash:"grid",title:"<grid>",content:"<grid> 是一个分页网格容器。"},{url:"/component/grid.html",hash:"子组件",title:"子组件",content:"支持包括 <div> 在内的任何组件作为自己的子组件。因此，在写一个组件时，推荐外层使用 <div> 作为根容器。"},{url:"/component/grid.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/grid.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/grid.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 row Number 设置每页行数 3 columns Number 设置每页列数 3 divider Boolean 设置是否显示分隔线 true dividerColor String 设置分隔线颜色 #E8E8E8 dividerWidth Number 设置分隔线尺寸 1 indicatorShow Boolean 是否显示指示器 true indicatorShape Number 设置指示器形状：0: 矩形、1: 圆形 1 indicatorSpace Number 设置指示器间距 3 selectedIndicatorColor String 设置指示器已选颜色 #3EB4FF unSelectedIndicatorColor String 设置指示器未选颜色 #E0E0E0 indicatorWidth Number 设置指示器宽 6 indicatorHeight Number 设置指示器高 6 例如："},{url:"/component/grid.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/grid.html",hash:"调用方法-methods",title:"调用方法 methods",content:""}]},{title:"<icon>",url:"/component/icon.html",hash:"",data:[{url:"/component/icon.html",hash:"icon",title:"<icon>",content:"使用开源字体库 Ionicons、Iconfont 进行封装"},{url:"/component/icon.html",hash:"子组件",title:"子组件",content:"不支持子组件。"},{url:"/component/icon.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/icon.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/icon.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 content String 图标的名称，注① home text String 同content - color String 图标颜色 #242424 fontSize Number 图标的大小 38 clickColor String 图标点击颜色 - 注①： 属性名content特别说明： 你可以让这个图标旋转起来，语法： home spin. 例如："},{url:"/component/icon.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/icon.html",hash:"调用方法-methods",title:"调用方法 methods",content:""},{url:"/component/icon.html",hash:"所有图标",title:"所有图标",content:""}]},{title:"<marquee>",url:"/component/marquee.html",hash:"",data:[{url:"/component/marquee.html",hash:"marquee",title:"<marquee>",content:"<marquee> 是一个横向自动滚动文字的容器，主要用于文字多单地方小的地方，比如单行标题。"},{url:"/component/marquee.html",hash:"子组件",title:"子组件",content:"无"},{url:"/component/marquee.html",hash:"预览效果",title:"预览效果",content:"说明：gif图片压缩，原效果非常流畅。"},{url:"/component/marquee.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/marquee.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 content String 显示的文字 - text String 同content - color String 滚动的文字颜色 #000000 fontSize Number 字体大小 24 textAlign String 对齐方式:left center right left backgroundColor String 滚动的文字背景颜色 #00ffffff 例如："},{url:"/component/marquee.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/marquee.html",hash:"调用方法-methods",title:"调用方法 methods",content:""}]},{title:"<navbar>",url:"/component/navbar.html",hash:"",data:[{url:"/component/navbar.html",hash:"navbar",title:"<navbar>",content:"子组件预览效果示例代码配置参数事件回调 callback调用方法 methodsnavbar-itemnavbar-item 示例代码navbar-item.type 配置参数 导航栏有4个主要部分：返回按钮、左侧、标题和右侧。每个部分可能包含任何内容，但建议按以下方式使用它们： 返回按钮部分被设计为“后退链接”。 左侧部分被设计为显示在左边的内容（主要用于自定义“后退连接”）。 标题部分用于显示页面标题或标签链接（按钮行/分段控制器）。 右半部分被设计为显示在右边的内容。"},{url:"/component/navbar.html",hash:"子组件",title:"子组件",content:"仅支持子组件<navbar-item>详细请看 这里"},{url:"/component/navbar.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/navbar.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/navbar.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 titleType String 标题对齐方式，left、right、middle middle 例如："},{url:"/component/navbar.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/navbar.html",hash:"调用方法-methods",title:"调用方法 methods",content:""},{url:"/component/navbar.html",hash:"navbar-item",title:"navbar-item",content:'支持放置任何组件作为自己的子组件（除配置参数type="back"不支持以外）。'},{url:"/component/navbar.html",hash:"navbar-item-示例代码",title:"navbar-item 示例代码",content:""},{url:"/component/navbar.html",hash:"navbar-item-type-配置参数",title:"navbar-item.type 配置参数",content:"说明：子组件类型；数据格式：字符串。 类型 描述 默认值 String 所属类型 ，详见：注① title 注意：type='back'类型不支持子组件 注①： back返回按钮 left左边内容 title标题内容 right右边内容 例如："}]},{title:"<ripple>",url:"/component/ripple.html",hash:"",data:[{url:"/component/ripple.html",hash:"ripple",title:"<ripple>",content:"<ripple> 是一个点击元素时，会产生向外扩散的水波纹效果容器。"},{url:"/component/ripple.html",hash:"子组件",title:"子组件",content:"<ripple> 基本容器组件，因此支持包括 <div> 在内的任何组件作为自己的子组件。<ripple> 作为点击效果组件，因此所有子组件的点击将失效。"},{url:"/component/ripple.html",hash:"事件回调-callback",title:"事件回调 callback",content:""}]},{title:"<scroll-text>",url:"/component/scroll-text.html",hash:"",data:[{url:"/component/scroll-text.html",hash:"scroll-text",title:"<scroll-text>",content:"<scroll-text> 是一个横向滚动文字的容器，主要用于单行公告。"},{url:"/component/scroll-text.html",hash:"子组件",title:"子组件",content:"无"},{url:"/component/scroll-text.html",hash:"预览效果",title:"预览效果",content:"说明：gif图片压缩，原效果非常流畅。"},{url:"/component/scroll-text.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/scroll-text.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 content String 滚动的文字 - text String 同content - speed Float 滚动的速度 2 fontSize Number 字体大小 24 color String 滚动的文字颜色 #000000 backgroundColor String 滚动的文字背景颜色 #00ffffff 例如："},{url:"/component/scroll-text.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/scroll-text.html",hash:"调用方法-methods",title:"调用方法 methods",content:""}]},{title:"<scroll-view>",url:"/component/scroll-view.html",hash:"",data:[{url:"/component/scroll-view.html",hash:"scroll-view",title:"<scroll-view>",content:"子组件预览效果示例代码配置参数事件回调 callback调用方法 methodsscroll-headerscroll-header 示例代码scroll-header 回调事件 <scroll-view> 是一个列表容器。（android端使用recyler具有回收和复用的能力，可以大幅优化内存占用和渲染性能）"},{url:"/component/scroll-view.html",hash:"子组件",title:"子组件",content:"支持包括 <div> 在内的任何组件作为自己的子组件。因此，在写一个组件时，推荐外层使用 <div> 作为根容器。 <scroll-header>：当 <scroll-header> 到达屏幕顶部时，吸附在屏幕顶部。"},{url:"/component/scroll-view.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/scroll-view.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/scroll-view.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 refreshAuto Boolean 初始化自动加载下拉刷新 false pullTips Boolean 是否显示上拉加载更多的提示 true pullTipsDefault String 上拉加载默认的提示语 正在加载数据... pullTipsLoad String 上拉加载正在加载的提示语 正在加载更多... pullTipsNo String 上拉加载没有更多的提示语 没有更多数据了 itemDefaultAnimator Boolean 打开关闭局部刷新默认动画 false scrollBarEnabled  Boolean 是否显示滚动条 false 例如："},{url:"/component/scroll-view.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/scroll-view.html",hash:"调用方法-methods",title:"调用方法 methods",content:""},{url:"/component/scroll-view.html",hash:"scroll-header",title:"scroll-header",content:"当 <scroll-header> 到达屏幕顶部时，吸附在屏幕顶部。"},{url:"/component/scroll-view.html",hash:"scroll-header-示例代码",title:"scroll-header 示例代码",content:""},{url:"/component/scroll-view.html",hash:"scroll-header-回调事件",title:"scroll-header 回调事件",content:""}]},{title:"<side-panel>",url:"/component/side-panel.html",hash:"",data:[{url:"/component/side-panel.html",hash:"side-panel",title:"<side-panel>",content:"子组件预览效果示例代码配置参数事件回调 callback调用方法 methodsside-panel-menuside-panel-menu 示例代码side-panel-menu 配置参数 <side-panel> 是一个抽屉侧边栏。"},{url:"/component/side-panel.html",hash:"子组件",title:"子组件",content:"支持任何组件作为自己的子组件，其中仅有<side-panel-menu>组件作为侧边菜单详细请看 这里，其他组件均为正文内容。"},{url:"/component/side-panel.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/side-panel.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/side-panel.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 width Number 侧边栏的宽度 380 scrollbar Boolean 侧边栏是否显示滚动条 false backgroundColor String 侧边栏的背景颜色 #ffffff 例如："},{url:"/component/side-panel.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/side-panel.html",hash:"调用方法-methods",title:"调用方法 methods",content:""},{url:"/component/side-panel.html",hash:"side-panel-menu",title:"side-panel-menu",content:"支持放置任何内容作为侧边菜单。"},{url:"/component/side-panel.html",hash:"side-panel-menu-示例代码",title:"side-panel-menu 示例代码",content:""},{url:"/component/side-panel.html",hash:"side-panel-menu-配置参数",title:"side-panel-menu 配置参数",content:"说明：子组件类型；数据格式：字符串。 属性名 类型 描述 默认值 name String 菜单名称（用于父组件点击返回的标识） - 例如："}]},{title:"<tabbar>",url:"/component/tabbar.html",hash:"",data:[{url:"/component/tabbar.html",hash:"tabbar",title:"<tabbar>",content:"子组件预览效果示例代码配置参数配置参数 tabPages事件回调 callback调用方法 methodstabbar-pagetabbar-page 示例代码tabbar-page 配置参数tabbar-page 事件回调tabbar-page 调用方法[拓展]完全自定义tabbar在线示例示例代码 <tabbar>为页面滑动切换组件（别名：标签页） 常用于tab切换页面。 支持url页面（tabPages模式）。 支持以 <tabbar-page>子组件编写的页面。 支持顶部、底部高自定义选项卡。"},{url:"/component/tabbar.html",hash:"子组件",title:"子组件",content:"仅支持<tabbar-page>组件作为标签页内容，详细请看 这里。"},{url:"/component/tabbar.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/tabbar.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/tabbar.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 tabType String 设置tab位置，顶部:top顶部滑动:slidingTop底部:bottom bottom tabHeight Number 设置tab高度 100 tabBackgroundColor String 设置tab的背景颜色 #3EB4FF，底部位置：#ffffff tabWidth Number 设置tab固定大小 - tabPageAnimated Boolean 开关页面切换动画 true tabSlideSwitch Boolean 手势滑动切换页面 true indicatorColor String 设置tab显示器颜色 #ffffff indicatorHeight Number 设置tab显示器高度 4 indicatorWidth Number 设置tab显示器固定宽度 20 indicatorCornerRadius Number 设置tab显示器圆角弧度 2 underlineGravity Number 设置tab下划线位置，上方:1下方:0 0 underlineColor String 设置tab下划线颜色 #ffffff underlineHeight Number 设置tab下划线高度 0 dividerColor String 设置tab分割线颜色 #ffffff dividerWidth Number 设置tab分割线宽度 0 dividerPadding Number 设置tab分割线的上下内边距 12 textBold Number 设置tab字体加粗，不加粗:0选择加粗:1全部加粗:2 0 textSize Number 设置tab字体大小 26 textSelectColor String 设置tab字体选中颜色 #ffffff，底部位置：#2C97DE textUnselectColor String 设置tab字体未选中颜色 #eeeeee，底部位置：#333333 iconVisible  Boolean 设置tab图标是否可见 false，底部位置：true iconGravity  Number 设置tab图标显示位置，上方:1下方:0 1 iconWidth  Number 设置tab图标宽度 40 iconHeight  Number 设置tab图标高度 40 iconMargin  Number 设置tab图标与文字间距 10 preload  Boolean 是否预加载所有子页面：true: 预加载所有子页面；false: 第一次切换到时加载子页面。 false 例如："},{url:"/component/tabbar.html",hash:"配置参数-tabpages",title:"配置参数 tabPages",content:"说明：tabPages模式支持url定义页面；数据格式：对象数组。 属性名 类型 描述 默认值 tabName String tab页签名称 - title String tab名称 New Page url String 页面地址①支持本地地址，如：xxx.js②支持远程地址，如：http://abc.com/xxx.js可使用 root:// 表示 src 目录，比如首页: root://pages/index.js - unSelectedIcon String tab未选图标 home selectedIcon String tab已选图标 home params Object tab页面传递参数，通过app.config.params获取 - cache Number tab页面缓存时间，设置0不缓存（单位：毫秒） 0 message Number tab未读信息数 0 dot Boolean 是否显示tab未读红点 false loading  Boolean 是否显示等待效果：true、false true loadingBackground  Boolean 是否显示等待效果过渡背景：true、false false statusBarColor String 状态栏颜色值，默认：隐藏主要用于主页面沉浸式时设置每个页面不同的状态栏效果；仅tabType:bottom推荐使用。 - 例如："},{url:"/component/tabbar.html",hash:"事件回调-callback",title:"事件回调 callback",content:""},{url:"/component/tabbar.html",hash:"调用方法-methods",title:"调用方法 methods",content:""},{url:"/component/tabbar.html",hash:"tabbar-page",title:"tabbar-page",content:"支持放置任何内容作为标签页内容。"},{url:"/component/tabbar.html",hash:"tabbar-page-示例代码",title:"tabbar-page 示例代码",content:""},{url:"/component/tabbar.html",hash:"tabbar-page-配置参数",title:"tabbar-page 配置参数",content:"属性名 类型 描述 默认值 tabName String tab页签名称 - title String tab名称 New Page unSelectedIcon String tab未选图标 home selectedIcon String tab已选图标 home message Number tab未读信息数 0 dot Boolean 是否显示tab未读红点 false 例如："},{url:"/component/tabbar.html",hash:"tabbar-page-事件回调",title:"tabbar-page 事件回调",content:""},{url:"/component/tabbar.html",hash:"tabbar-page-调用方法",title:"tabbar-page 调用方法",content:""},{url:"/component/tabbar.html",hash:"拓展-完全自定义tabbar",title:"[拓展]完全自定义tabbar",content:""},{url:"/component/tabbar.html",hash:"在线示例",title:"在线示例",content:"点击查看预览"},{url:"/component/tabbar.html",hash:"示例代码-2",title:"示例代码",content:""}]},{title:"<tabbar>",url:"/component/tabbar2.html",hash:"",data:[{url:"/component/tabbar2.html",hash:"tabbar",title:"<tabbar>",content:"<tabbar>标签页tabPages模式预览效果+示例代码"},{url:"/component/tabbar2.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/tabbar2.html",hash:"示例代码",title:"示例代码",content:""}]},{title:"<tabbar>",url:"/component/tabbar3.html",hash:"",data:[{url:"/component/tabbar3.html",hash:"tabbar",title:"<tabbar>",content:"<tabbar>标签页tabPages模式预览效果+示例代码"},{url:"/component/tabbar3.html",hash:"预览效果",title:"预览效果",content:""},{url:"/component/tabbar3.html",hash:"示例代码",title:"示例代码",content:""}]},{title:"<view>",url:"/component/view.html",hash:"",data:[{url:"/component/view.html",hash:"view",title:"<view>",content:"<view> 是通用容器（与<div>基本一致）。 TIP 不要在 <view> 中直接添加文本，而要使用 <text> 组件。 在 eeui 中，<view> 不可滚动，而要使用 <scroll-view> 等支持滚动的组件。 要控制 <view> 的层级，建议不要超过14层，否则会很影响页面性能。"},{url:"/component/view.html",hash:"子组件",title:"子组件",content:"<view> 支持各种类型的子元素，包括 <view> 自己。"},{url:"/component/view.html",hash:"样式",title:"样式",content:"通用样式 支持所有通用样式。"},{url:"/component/view.html",hash:"事件",title:"事件",content:"通用事件 支持所有通用事件。"},{url:"/component/view.html",hash:"组件事件",title:"组件事件",content:"除了通用事件，<view> 另外还支持以下事件回调。"}]},{title:"<web-view>",url:"/component/web-view.html",hash:"",data:[{url:"/component/web-view.html",hash:"web-view",title:"<web-view>",content:"<web-view> 是一个网页容器。"},{url:"/component/web-view.html",hash:"子组件",title:"子组件",content:"无"},{url:"/component/web-view.html",hash:"示例代码",title:"示例代码",content:""},{url:"/component/web-view.html",hash:"配置参数",title:"配置参数",content:"属性名 类型 描述 默认值 url String 网页地址 - content String 网页内容 - progressbarVisibility Boolean 是否显示进度条 true scrollEnabled Boolean 是否可以滚动 true enableApi Boolean 开启eeui等原生交互模块，详见：注① true userAgent String 自定义浏览器userAgent（保留原有的UA） - customUserAgent String 完全自定义浏览器userAgent（去除原有的UA） - transparency  Boolean 设置背景透明（前提是网页背景也是透明，否则无效） false hiddenDone  Boolean 隐藏键盘done部分 false 例如： 注①： JS支持调用的原生模块如下：（另注：插件市场内的插件是否支持web-view调用且看每个插件开发而异。） 例如： eeui：综合模块，如：eeui.adDialog navigator：路由模块 navigationBar：导航标题栏模块 citypicker：城市选择器 picture：图片选择模块 pay：支付模块 webview：浏览器调用方法"},{url:"/component/web-view.html",hash:"js调用原生api示例",title:"JS调用原生API示例",content:""},{url:"/component/web-view.html",hash:"事件回调-callback",title:"事件回调 callback",content:"注②： start开始加载 success加载完毕 error加载错误 title标题发生改变 url网页地址发生改变"},{url:"/component/web-view.html",hash:"调用方法-methods",title:"调用方法 methods",content:""},{url:"/component/web-view.html",hash:"浏览器内js调用原生api方法",title:"浏览器内js调用原生api方法",content:""}]},{title:"appboard",url:"/guide/appboard.html",hash:"",data:[{url:"/guide/appboard.html",hash:"appboard",title:"appboard",content:""},{url:"/guide/appboard.html",hash:"功能介绍",title:"功能介绍",content:"eeui默认采用的分包模式，即一个页面一个vue，这样做的缺点是，共有的js会被添加进每一个vue里面假设有100个页面，共有js的体积是100kb，那么最终编译的体积是100x100=10000kb,现在采用appboard，共有js有native拼接引入，如此一来，共有js不再编译到每一个vue里面，最终体积变成了100x1=100kb"},{url:"/guide/appboard.html",hash:"使用说明",title:"使用说明",content:"只要将js文件放置src/appboard/目录下即可，例如：src/appboard/common.js  如果在js文件后缀之前加上.dev表示只有开发环境引用，例如：src/appboard/console.dev.js"},{url:"/guide/appboard.html",hash:"建议参考",title:"建议参考",content:"建议在appboard中使用混合（Minins）方式使用对象函数，例如src/appboard/common.js中代码如下： 那么接下来在vue页面中只需要使用this.tishi(xxx)即可："}]},{title:"eeui.config.js 配置 navigationBarStyle 示例",url:"/guide/config-navigationBarStyle.html",hash:"",data:[{url:"/guide/config-navigationBarStyle.html",hash:"eeui-config-js-配置-navigationbarstyle-示例",title:"eeui.config.js 配置 navigationBarStyle 示例",content:""}]},{title:"配置相关",url:"/guide/config.html",hash:"",data:[{url:"/guide/config.html",hash:"配置相关",title:"配置相关",content:"整个项目中，只有一个主要配置文件，就放在项目根目录下。"},{url:"/guide/config.html",hash:"配置文件",title:"配置文件",content:"eeui.config.js 为客户端配置文件 注意:  eeui.config.js 每次变动，都需要重新执行命令 npm run dev 并在IDE重新编译运行你的 app。"},{url:"/guide/config.html",hash:"配置说明",title:"配置说明",content:""},{url:"/guide/config.html",hash:"serviceurl-服务端网址",title:"serviceUrl: 服务端网址",content:"默认留空，留空默认为：eeui自带 EEUI云平台  服务。 如果 自搭建服务端 （热更新、动态设置启动图等）请填写自搭建网址。"},{url:"/guide/config.html",hash:"homepage-主页的js地址",title:"homePage: 主页的JS地址",content:"一般情况下留空，默认为：index.js（可自定义，比如填写：login.js时默认首页将是login.js）。 也可以把JS资源放到服务器上然后把JS地址填写到这里。 还可以通过 eeui.setCustomConfig 动态设置主页。"},{url:"/guide/config.html",hash:"homepageparams-主页的其他参数",title:"homePageParams: 主页的其他参数",content:"比如导航栏颜色等。 详细设置请查阅 eeui.openPage params参数说明。"},{url:"/guide/config.html",hash:"navigationbarstyle-全局配置导航栏默认样式",title:"navigationBarStyle: 全局配置导航栏默认样式",content:"配置示例。"},{url:"/guide/config.html",hash:"appkey-用于云平台管理",title:"appKey: 用于云平台管理",content:"建议填写16-32位随机字符串。 主要用于 EEUI云平台 （热更新、动态设置启动图等）。"},{url:"/guide/config.html",hash:"android-安卓端相关配置",title:"android: 安卓端相关配置",content:"imageEngine: 图片适配器ImageAdapter（可选：picasso、glide），留空默认：glide"},{url:"/guide/config.html",hash:"wxpay-微信支付相关配置",title:"wxpay: 微信支付相关配置",content:"appid: 微信支付商户appid。"},{url:"/guide/config.html",hash:"rongim-融云相关配置（即时通讯模块）",title:"rongim: 融云相关配置（即时通讯模块）",content:"enabled: 是否启用融云服务。 appKey、appSecret: 在融云平台申请。"},{url:"/guide/config.html",hash:"umeng-友盟相关配置（推送、统计模块）",title:"umeng: 友盟相关配置（推送、统计模块）",content:"enabled: 是否启用友盟服务。 appKey、messageSecret: 在友盟平台申请。 channel: 友盟统计渠道。"},{url:"/guide/config.html",hash:"sockethost、socketport-wifi真机调试配置，dev模式自动生成",title:"socketHost、socketPort: WiFi真机调试配置，dev模式自动生成",content:"socketHost: WiFi真机调试服务器 ip 地址 socketPort: WiFi真机调试服务器端口"}]},{title:"创建项目",url:"/guide/create.html",hash:"",data:[{url:"/guide/create.html",hash:"创建项目",title:"创建项目",content:"执行此节之前，请确保必须的环境全都安装完成。"},{url:"/guide/create.html",hash:"生成开发模板",title:"生成开发模板",content:"使用 eeui-cli 的 create 命令来创建模版工程：（projectName为你要创建的项目名称） 脚手架会自动从 github 上拉取最新的 eeui-template 开发模板  TIP 如遇到网络原因自动下载失败，请直接从github下载最新releases https://github.com/kuaifan/eeui-template 下载完解压缩到本地，终端cd进入解压得到的文件夹；然后执行eeui setting就可以按提示设置App名称、版本等App信息，执行eeui setdemo就可以设置初始化演示模板。 然后进入开发目录，执行 npm install 加载 node_modules Node.js基础模块"},{url:"/guide/create.html",hash:"ios-运行项目",title:"iOS 运行项目",content:"确保您已经安装完成 iOS 所需环境。 cd到iOS工程目录platforms/ios/eeuiApp 执行pod install命令来拉取iOS工程的依赖 首次执行时间会稍长，命令执行完毕后找到当前目录下 eeuiApp.xcworkspace 文件，双击即可唤起XCode打开 iOS 工程； 然后在XCode选择相应的模拟器（比如iPhone xs），点击▶按钮来运行项目。"},{url:"/guide/create.html",hash:"android-运行项目",title:"Android 运行项目",content:"确保您已经安装完成 Android 所需环境。 1.打开AndroidStudio软件然后OpenAndroid工程目录platforms/android/eeuiApp。\n2.待项目构建完成，点击 AndroidStudio 上方工具栏的 Run，即可运行项目。 第一次打开 AndroidStuido 时，由于本地环境未配置好，AndroidStuido 会提示错误，按照 IDE 提示，点击 sync 同步一下，大部分环境问题都可以解决。 注： 可能您第一次构建的时间太长您也可以尝试解决 Android Studio 第一次导入项目太慢 。实在不行就请耐心等待 Android Studio 自己构建完成吧"},{url:"/guide/create.html",hash:"模板目录结构",title:"模板目录结构",content:"首次打开我们已经为您内置了由一些 demo，您可以看到相关的页面，下面在开发之前还需要进行一些相关的配置和调试的学习。"},{url:"/guide/create.html",hash:"新建一个简单页面",title:"新建一个简单页面",content:""},{url:"/guide/create.html",hash:"新建页面",title:"新建页面",content:"直接新建一个vue文件，如图所示:  不需要配置任何路由，路由自动生成的，你只需要再次 npm run dev 或者 npm run build"},{url:"/guide/create.html",hash:"跳转页面",title:"跳转页面",content:"详情可查看 怎么创建一个页面并做跳转"},{url:"/guide/create.html",hash:"第三方ui组件库",title:"第三方UI组件库",content:"推荐以下组件库，基于weex的组件库，包含了大量的界面组件以及交互组件，帮助开发者APP快速成型 都可以用于eeui，安装使用方法见各个UI库的文档 【weex 官方组件库】https://github.com/alibaba/weex-ui  【amui 组件丰富】https://hminghe.github.io/weex-amui/#/?id=weex-amui  【bui 还不错】http://dev.bingocc.com/buiweex/docs/"}]},{title:"开发调试",url:"/guide/debug.html",hash:"",data:[{url:"/guide/debug.html",hash:"开发调试",title:"开发调试",content:""},{url:"/guide/debug.html",hash:"实时预览",title:"实时预览",content:"eeui 支持实时同步预览，即修改完代码可以立即查看效果"},{url:"/guide/debug.html",hash:"开启开发服务",title:"开启开发服务",content:"只需要在项目根目录中起开发服务： 脚手架会在项目 common 目录下生成 dist 文件，存放 JS Bundle。 注：使用真机调试需要将手机与起服务的[pc|mac]连接到同一个局域网内！！！"},{url:"/guide/debug.html",hash:"热刷新",title:"热刷新",content:"eeui 现已支持热刷新，即修改完代码保存（command + s 或 ctrl + s）的时候，页面会自动刷新 点击App屏幕上的DEV--\x3e WiFi真机同步按要求输入上文开启开发服务生成的IP地址、端口号即可完成同步刷新。 注：热刷新只有在npm run dev服务下才会生效。"}]},{title:"eeui 和 Web 的平台差异",url:"/guide/difference.html",hash:"",data:[{url:"/guide/difference.html",hash:"eeui-和-web-的平台差异",title:"eeui 和 Web 的平台差异",content:"eeui 是一个跨平台解决方案，Web 平台只是其一种运行环境，除此之外还可以在 Android 和 iOS 客户端中运行。原生开发平台和 Web 平台之间的差异，在功能和开发体验上都有一些差异。"},{url:"/guide/difference.html",hash:"eeui-环境中没有-dom",title:"eeui 环境中没有 DOM",content:"DOM（Document Object Model），即文档对象模型，是 HTML 和 XML 文档的编程接口，是 Web 中的概念。eeui 的运行环境以原生应用为主，在 Android 和 iOS 环境中渲染出来的是原生的组件，不是 DOM Element。"},{url:"/guide/difference.html",hash:"不支持-dom-操作",title:"不支持 DOM 操作",content:"原生环境中不支持 Web API，没有 Element 、Event 、File 等对象，详细列表可以参考 Web APIs on MDN 。不支持选中元素，如 document.getElementById 、 document.querySelector 等；当然也不支持基于 DOM API 的程序库（如 jQuery）。"},{url:"/guide/difference.html",hash:"有限的事件类型",title:"有限的事件类型",content:"eeui 支持在标签上绑定事件，和在浏览器中的写法一样，但是 eeui 中的事件是由原生组件捕获并触发的，行为和浏览器中有所不同，事件中的属性也和 Web 中有差异。 支持 Web 中的事件类型，详情请参考《通用事件》。 不区分事件的捕获阶段和冒泡阶段，相当于 DOM 0 级事件。"},{url:"/guide/difference.html",hash:"eeui-环境中没有-bom",title:"eeui 环境中没有 BOM",content:"BOM（Browser Object Model），即浏览器对象模型，是浏览器环境为 javascript 提供的接口。eeui 在原生端并不基于浏览器运行，不支持浏览器提供的 BOM 接口。"},{url:"/guide/difference.html",hash:"没有-window-、screen-对象",title:"没有 window 、screen 对象",content:"eeui 中并未提供浏览器中的 window 和 screen 对象，不支持使用全局变量。如果是想要获取设备的屏幕或环境信息，可以使用 WXEnvironment 变量。 WXEnvironment appName: 应用的名称。 appVersion: 应用的版本。 platform: 运行平台，可能的值是 Android 、iOS 之一。 osName: 系统的名称。 osVersion: 系统版本。 deviceWidth: 设备宽度。 deviceHeight: 设备高度。"},{url:"/guide/difference.html",hash:"没有-document-对象",title:"没有 document 对象",content:"在浏览器中 document 表示了当前活动的文档模型，在 Android 和 iOS 环境中并没有这个对象，也不支持与其相关的 DOM 操作。"},{url:"/guide/difference.html",hash:"没有-history-、location-、navigator-对象",title:"没有 history 、location 、navigator 对象",content:"history 保存了当前页面的历史记录，并且提供了前进后退操作。 location 记录了当前页面 URL 相关的信息。 navigator 记录了当前浏览器中的信息。 这些接口与浏览器自身的实现有关，可以控制页面的前进后退并且获取状态信息。虽然在 Android 和 iOS 中也有“历史”和“导航”的概念，但是它是用于多个管理视图之间的跳转的。换句话说，在浏览器中执行“前进”、“后退”仍然会处于同一个页签中，在原生应用中“前进”、“后退”则会真实的跳转到其他页面。 此外 eeui 也提供了 navigator 模块来操作页面的跳转，使用方法参考《navigator 导航控制》。"},{url:"/guide/difference.html",hash:"能够调用移动设备原生-api",title:"能够调用移动设备原生 API",content:"在 eeui 中能够调用移动设备原生 API，使用方法是通过注册、调用模块来实现。详见： 《模块》栏目 《插件》栏目 为了保持框架的通用性，eeui 内置的原生模块有限，不过 eeui 提供了横向扩展的能力，可以扩展原生模块，具体的扩展方法请参考《开发插件》。 有些接口在浏览器环境中也存在，不过在使用时应该注意浏览器的兼容性；如剪贴板功能，出于安全性考虑，绝大多数浏览器都限制其使用。"}]},{title:"Introduction",url:"/guide/eeui-en.html",hash:"",data:[{url:"/guide/eeui-en.html",hash:"introduction",title:"Introduction",content:"EEUI is a standalone and complete framework based on WeexSDK development (EEUI only supports Android, iOS, and does not support WEB). DANGER EEUI is a three-party framework that is not developed or maintained by Apache Weex."},{url:"/guide/eeui-en.html",hash:"demo",title:"Demo",content:""},{url:"/guide/eeui-en.html",hash:"components",title:"Components",content:"In addition to the original Weex components, EEUI comes with many useful components: <banner>  - Carousel control, support for infinite loops, support for any component <button>  - preset common button <grid>  - a paged grid container <icon>  - Font icon, support 1126+ font icons <marquee>  - a container for horizontally scrolling text automatically <navbar>  - preset navigation bar <ripple>  - A water ripple effect container that produces an outward diffusion when a click on an element <scroll-text>  - A container for scrolling text horizontally, suitable for single-line announcements <scroll-view>  - List container, different from Weex's own list container, with native pull-down refresh + pull-up loading more <tabbar>  - Powerful tab page <web-view>  - Powerful web page container More components..."},{url:"/guide/eeui-en.html",hash:"modules",title:"Modules",content:"In addition to Weex's original modules, EEUI comes with many useful modules: adDialog  - ad popup ajax  - asynchronous request, support for get, post alert  - dialog box, prompt box, confirmation prompt box, input prompt box captcha  - verify popup, slide verification keyboard  - keyboard function, dynamically hide the soft keyboard, determine whether the soft keyboard is visible loading  - Wait for the pop-up window to support more than 12+ waits navigationBar  - system navigation title bar, will not be popped by the soft keyboard, causing the navigation bar to move up newPage  - page function, open page, dynamically load page, intercept Android physical return key, status bar font color, ..., etc. 20+ kinds of page related functions openOtherApp  - Open other apps , support to open WeChat, Alipay, qq, Jingdong saveImage  - save the network image to the local getImageSize  - Get the size of the web image scaner  - QR code scanning share  - text image system sharing storage  - data storage, support app cache (restart app data is not cleared), app global variables (restart app data cleanup) system  - system information, Android gets IMEI, iOS gets system information such as IFA toast  - Toast simple and easy toast More modules..."},{url:"/guide/eeui-en.html",hash:"plug-in-market",title:"Plug-in Market",content:"EEUI provides a complete plug-in market, which can add more business needs through the plug-in market when the original components and modules are not enough for business needs: websocket  - instant messaging screenshots  - Screenshot function components citypicker  - city selector picture  - picture selector, video selection, picture taking, video recording, compressed picture, preview picture, preview video rongim  - connection login, chat room business umeng  - Push module pay  - third party payment module (Alipay, WeChat payment) audio  - audio playback, audio duration deviceInfo  - device information, network status, device vibration, screen information, volume information, battery information amap  - amap videoView  - video player component communication  - make calls directly, send text messages, send mail geolocation  - get the current location, real-time monitoring and positioning recorder  - Recorder support channel, band accelerometer  - accelerator, get the current acceleration, real-time monitoring acceleration compass  - compass, get the current azimuth, real-time monitoring azimuth Plugin market 、Development plugin"},{url:"/guide/eeui-en.html",hash:"eeui-ecological",title:"EEUI Ecological",content:"eeui-cli - https://www.npmjs.com/package/eeui-cli  Chinese documentation - https://eeui.app/  English documentation - In the process of perfecting Plugin market - https://eeui.app/markets/  Demo project - https://editor.eeui.app/#/case  Online editor - https://editor.eeui.app/  Exchange Community - https://bbs.eeui.app/  Hot update feature - https://eeui.app/update/  Quickly generate app icons - https://eeui.app/guide/icons.html  Quickly generate startup images - https://eeui.app/guide/launch.html"}]},{title:"介绍",url:"/guide/eeui.html",hash:"",data:[{url:"/guide/eeui.html",hash:"介绍",title:"介绍",content:"EEUI 是一个基于 WeexSDK 开发的独立完整框架（EEUI 仅支持 Android、iOS两端，不支持WEB端）。 DANGER EEUI 是三方框架, 不由 Apache Weex 开发或维护。"},{url:"/guide/eeui.html",hash:"演示",title:"演示",content:""},{url:"/guide/eeui.html",hash:"自带组件",title:"自带组件",content:"除了Weex原有的组件外，EEUI还自带了很多实用的组件： <banner>  - 轮播控件，支持无限循环，支持任意组件 <button>  - 预设常用按钮 <grid>  - 一个分页网格容器 <icon>  - 字体图标，支持1126+个字体图标 <marquee>  - 跑马文字，一个横向自动滚动文字的容器 <navbar>  - 预设导航栏 <ripple>  - 一个点击元素时，会产生向外扩散的水波纹效果容器 <scroll-text>  - 一个横向滚动文字的容器，适合用于单行公告 <scroll-view>  - 列表容器，跟Weex自带的列表容器区别于自带原生下拉刷新+上拉加载更多 <tabbar>  - 强大的选项卡页面 <web-view>  - 强大的web网页容器 更多组件..."},{url:"/guide/eeui.html",hash:"自带模块",title:"自带模块",content:"除了Weex原有的模块外，EEUI还自带了很多实用的模块： adDialog  - 广告弹窗 ajax  - 异步请求，支持get、post alert  - 对话框，提示框、确认提示框、输入提示框 captcha  - 验证弹窗，滑动验证 keyboard  - 键盘功能，动态隐藏软键盘、判断软键盘是否可见 loading  - 等待弹窗，支持超过12+种等待效果 navigationBar  - 系统导航标题栏，不会被软键盘弹出导致导航栏上移 newPage  - 页面功能，打开页面、动态加载页面、拦截Android物理返回键、状态栏字体颜色、...等20+种页面相关功能 openOtherApp  - 打开其他APP，支持打开微信、支付宝、qq、京东 saveImage  - 保存网络图片至本地 getImageSize  - 获取网络图片尺寸 scaner  - 二维码扫描 share  - 文字图片系统分享 storage  - 数据存储，支持app缓存（重启app数据不清除）、app全局变量（重启app数据清除） system  - 系统信息，Android获取IMEI，iOS获取IFA等系统信息 toast  - 简单好用吐司提示 更多模块..."},{url:"/guide/eeui.html",hash:"插件市场",title:"插件市场",content:"EEUI提供完整的插件市场，在原有的组件、模块不够业务需求时可以通过插件市场来补充更多的业务需求： websocket  - 即时通讯 screenshots  - 组件截图功能 citypicker  - 城市选择器 picture  - 图片选择器、视频选择、图片拍照、视频录制、压缩图片、预览图片、预览视频 rongim  - 融云连接登录、聊天室业务 umeng  - 友盟推送模块 pay  - 第三方支付模块（支付宝、微信支付） audio  - 音频播放、获取音频时长 deviceInfo  - 设备信息、网络状态、设备震动、屏幕信息、音量信息、电池信息 amap  - 高德地图 videoView  - 视频播放器组件 communication  - 直接拨打电话、发送短信、发送邮件 geolocation  - 获取当前位置、实时监听定位 recorder  - 录音机支持声道、波段 accelerometer  - 加速器，获取当前加速度、实时监听加速度 compass  - 指南针，获取当前方位角、实时监听方位角 插件市场 、开发插件"},{url:"/guide/eeui.html",hash:"eeui生态",title:"EEUI生态",content:"eeui-cli - https://www.npmjs.com/package/eeui-cli  中文文档 - https://eeui.app/  插件市场 - https://eeui.app/markets/  演示项目 - https://editor.eeui.app/#/case  在线编辑器 - https://editor.eeui.app/  交流社区 - https://bbs.eeui.app/  热更新功能 - https://eeui.app/update/  快速生成应用图标 - https://eeui.app/guide/icons.html  快速生成启动图片 - https://eeui.app/guide/launch.html"}]},{title:"搭建环境",url:"/guide/env.html",hash:"",data:[{url:"/guide/env.html",hash:"搭建环境",title:"搭建环境",content:"我们要求全部都安装，否则可能无法完整开发与调试。"},{url:"/guide/env.html",hash:"基础环境",title:"基础环境",content:"Mac 或 Windows: Node.js (>=9.x), npm version 4+"},{url:"/guide/env.html",hash:"安装工具",title:"安装工具",content:"如果提示需要权限安装，请使用sudo安装：sudo npm install eeui-cli -g。 如果你在中国地区，我们还是推荐您使用 cnpm  安装：cnpm install eeui-cli -g。"},{url:"/guide/env.html",hash:"更新工具",title:"更新工具",content:""},{url:"/guide/env.html",hash:"开发-ios",title:"开发 iOS",content:"开发平台: Mac CocoaPods 使用过程中遇到问题及时 Google。"},{url:"/guide/env.html",hash:"版本要求",title:"版本要求",content:"ruby: 2.5.0 以上 cocoapods: 1.5.0 以上 其他版本会有环境问题"},{url:"/guide/env.html",hash:"安装",title:"安装",content:"Xcode (appStore 下载) CocoaPods(建议使用pod 1.5.3或之后版本)\n升级 rubygem 环境：$ sudo gem update --system 移除现有 rubygem 镜像：$ gem sources --remove https://rubygems.org/ 添加gem.ruby-china镜像：$ gem source -a https://gems.ruby-china.com/ 安装 CocoaPods：$ sudo gem install cocoapods 如果以上命令报错则执行：$ sudo gem install -n /usr/local/bin cocoapods 最后执行：$ pod setup 过程比较漫长，请耐心等待执行完成"},{url:"/guide/env.html",hash:"开发-android",title:"开发 Android",content:"开发平台: Mac/Windows"},{url:"/guide/env.html",hash:"版本要求-2",title:"版本要求",content:"AndroidStudio: 3.5.0+"},{url:"/guide/env.html",hash:"安装-2",title:"安装",content:"JDK 是 JAVA 开发包，AndroidStudio 是 Android开发IDE，这两项不再做过多介绍。 下载并安装 JDK 。 下载并安装 Android Studio 。 如果您使用虚拟机进行跨平台开发，也需要配置好对应平台的所需环境。"},{url:"/guide/env.html",hash:"模拟器或真机安装",title:"模拟器或真机安装",content:"iOS 开发中 xcode 已经自带了模拟器 Android 开发者也可以使用 android studio 自带模拟器 至此，所有的相关的工具和软件都已下载完毕，下面我们开始创建一个 eeui-demo 工程。"}]},{title:"应用图标",url:"/guide/icons.html",hash:"",data:[{url:"/guide/icons.html",hash:"应用图标",title:"应用图标",content:""},{url:"/guide/icons.html",hash:"生成新图标",title:"生成新图标",content:"打开图标生成工具https://console.eeui.app/#/tools/icons 上传并生成图片"},{url:"/guide/icons.html",hash:"修改ios图标",title:"修改iOS图标",content:"iOS覆盖路径为：platforms/ios/eeuiApp/eeuiApp/Assets.xcassets/AppIcon.appiconset/"},{url:"/guide/icons.html",hash:"修改android图标",title:"修改Android图标",content:"Android覆盖路径为：platforms/android/eeuiApp/app/src/main/res/mipmap-xxxx/"}]},{title:"框架介绍",url:"/guide/introduce.html",hash:"",data:[{url:"/guide/introduce.html",hash:"框架介绍",title:"框架介绍",content:""},{url:"/guide/introduce.html",hash:"开始使用",title:"开始使用",content:"使用 Vue.js 跨平台开发高质量原生（Android/iOS）应用。"},{url:"/guide/introduce.html",hash:"演示",title:"演示",content:""},{url:"/guide/introduce.html",hash:"支持",title:"支持",content:"在你的公司或个人项目中使用 eeui 如果你觉得 eeui 还不错，可以通过 Star 来表示你的喜欢"},{url:"/guide/introduce.html",hash:"捐赠",title:"捐赠",content:"如果您认可eeui，感觉eeui能给您带来帮助，希望您能进行捐赠，这将是eeui未来持续改进的保障。捐助的资金将用于： 站点服务器、域名费用 站点日常维护 新功能开发和 bug 修复 在捐赠时您可以给我们留言，附上最想添加的新功能（可以用短链接形式附上详情需求），我们会根据需求度尽快开发上线。 微信支付捐赠"},{url:"/guide/introduce.html",hash:"社群",title:"社群",content:""},{url:"/guide/introduce.html",hash:"协议",title:"协议",content:"遵循 MIT 协议  请自由地享受和参与开源"}]},{title:"启动图片",url:"/guide/launch.html",hash:"",data:[{url:"/guide/launch.html",hash:"启动图片",title:"启动图片",content:""},{url:"/guide/launch.html",hash:"生成启动图",title:"生成启动图",content:"打开启动图生成工具https://console.eeui.app/#/tools/launchimage 上传并生成启动图 查看制作视频教程▶️"},{url:"/guide/launch.html",hash:"修改ios启动图",title:"修改iOS启动图",content:"iOS覆盖路径为：platforms/ios/eeuiApp/eeuiApp/Assets.xcassets/LaunchImage.launchimage/"},{url:"/guide/launch.html",hash:"修改android启动图",title:"修改Android启动图",content:"Android覆盖路径为：platforms/android/eeuiApp/app/src/main/res/drawable-xxxx-xxxxx/"}]},{title:"生命周期",url:"/guide/lifecycle.html",hash:"",data:[{url:"/guide/lifecycle.html",hash:"生命周期",title:"生命周期",content:"2.3.8版本之前请参考这里 TIP 除了自有的生命周期钩子以外，eeui还另外支持APP进入后台、APP进入前台、页面挂载、页面激活、页面失活、页面停止。"},{url:"/guide/lifecycle.html",hash:"生命周期钩子",title:"生命周期钩子",content:'Vue 组件的实例生命周期钩子将在特定的阶段发出，详情请参考 Vue 组件的生命周期图示 。 Vue 生命周期钩子 是否支持 说明 beforeCreate  支持 - created  支持 - beforeMount  支持 - mounted  支持 详见下文解释 beforeUpdate  支持 - updated  支持 - activated  不支持 不支持<keep-alive> deactivated  不支持 不支持<keep-alive> beforeDestroy  支持 - destroyed  支持 - errorCaptured  支持 - 以下是eeui特有：   appActive 支持 APP进入前台：App从【后台】切换至【前台】时触发 appDeactive 支持 APP进入后台：App从【前台】切换至【后台】时触发 pageReady 支持 页面挂载：页面【渲染完成】时触发 pageResume 支持 页面激活：页面【恢复】时触发（渲染完成时也会触发1次） pagePause 支持 页面失活：页面【暂停】时触发 pageDestroy 支持 页面停止：页面【销毁】时触发 关于 "mounted" 生命周期 和浏览不同的是，eeui 的渲染流程是异步的，而且渲染出来的结果都是原生系统中的 View，这些数据都无法被 javascript 直接获取到。因此在 eeui 上，Vue 的 mounted 生命周期在当前组件的 virtual-dom (Vue 里的 VNode) 构建完成后就会触发，此时相应的原生视图未必已经渲染完成。'}]},{title:"生命周期",url:"/guide/lifecycle_old.html",hash:"",data:[{url:"/guide/lifecycle_old.html",hash:"生命周期",title:"生命周期",content:"虽然这是过时的方法，但是2.3.8版本之后也兼容。 2.3.9版本之后请参考这里 TIP 除了自有的生命周期钩子以外，eeui还支持的原生生命周期回调lifecycle，含：页面挂载、页面恢复、页面暂停。"},{url:"/guide/lifecycle_old.html",hash:"生命周期钩子",title:"生命周期钩子",content:'Vue 组件的实例生命周期钩子将在特定的阶段发出，详情请参考 Vue 组件的生命周期图示 。 Vue 生命周期钩子 是否支持 说明 beforeCreate  支持 - created  支持 - beforeMount  支持 - mounted  支持 详见下文解释 beforeUpdate  支持 - updated  支持 - activated  不支持 不支持<keep-alive> deactivated  不支持 不支持<keep-alive> beforeDestroy  支持 - destroyed  支持 - errorCaptured  支持 - 关于 "mounted" 生命周期 和浏览不同的是，eeui 的渲染流程是异步的，而且渲染出来的结果都是原生系统中的 View，这些数据都无法被 javascript 直接获取到。因此在 eeui 上，Vue 的 mounted 生命周期在当前组件的 virtual-dom (Vue 里的 VNode) 构建完成后就会触发，此时相应的原生视图未必已经渲染完成。'}]},{title:"跨页面通信",url:"/guide/message.html",hash:"",data:[{url:"/guide/message.html",hash:"跨页面通信",title:"跨页面通信",content:"TIP 在 平台差异 篇文中提到过，不同的 eeui 页面使用的是不同的执行环境，即使全局变量也是互相隔离的，然而我们可以使用以下方法实现跨页面通信的。"},{url:"/guide/message.html",hash:"接收消息",title:"接收消息",content:""},{url:"/guide/message.html",hash:"发送消息",title:"发送消息",content:"示例 参数说明 属性名 类型 必须 描述 pageName String - 页面名称（或tabName），留空表示发送给所有页面 ... Object - 请根据需求填写其他参数名和参数值 参数pageName名称是指 eeui.openPage 打开页面时的pageName属性值 或 <tabbar> 组件页面的tabName属性值； 首页的pageName值默认为：firstPage。"}]},{title:"应用设置",url:"/guide/setting.html",hash:"",data:[{url:"/guide/setting.html",hash:"应用设置",title:"应用设置",content:""},{url:"/guide/setting.html",hash:"app设置",title:"App设置",content:"在项目根目录执行以下命令即可按提示完成App名称、版本号等相关设置。 TIP 设置包含：应用名称、应用ID、应用版本号、应用版本名称。 如图效果："}]},{title:"升级主程序",url:"/guide/update.html",hash:"",data:[{url:"/guide/update.html",hash:"升级主程序",title:"升级主程序",content:"准备事项开始升级自动升级手动升级注意事项"},{url:"/guide/update.html",hash:"准备事项",title:"准备事项",content:"在准备升级之前请将eeui工具eeui-cli升级至最新版本。查看最新版本  升级工具命令："},{url:"/guide/update.html",hash:"开始升级",title:"开始升级",content:""},{url:"/guide/update.html",hash:"自动升级",title:"自动升级",content:"在项目根目录下执行以下命令即可按提示完成主程序升级： 如图效果："},{url:"/guide/update.html",hash:"手动升级",title:"手动升级",content:"可能由于网络或升级版本跨越太大等其他原因导致自动升级失败的可通过以下方法手动升级至最新生成版本。 1、使用eeui create命令创建一个全新的项目。 2、将旧项目的src下的所有文件移到新项目src目录下。 3、修改新项目eeui.config.js配置文件、应用图标、应用启动图、应用版本号及版本名称。 注：如果因为自动升级过程中失败导致旧项目src文件夹内文件被重置可在common/backup/*.zip找到升级前系统自动备份包。"},{url:"/guide/update.html",hash:"注意事项",title:"注意事项",content:"WARNING eeui-cli版本在1.0.0-rc10之前的需要再升级主程序之后需要重新安装插件。"}]},{title:"在 eeui 中使用 Vue.js",url:"/guide/usevue.html",hash:"",data:[{url:"/guide/usevue.html",hash:"在-eeui-中使用-vue-js",title:"在 eeui 中使用 Vue.js",content:'只含有运行时的构建版本平台的差异执行环境DOM样式事件支持的功能全局配置全局 API选项生命周期钩子实例属性实例方法模板指令特殊属性内置组件 如果没有特别指示，文章中的 "Vue.js" 或者 "Vue" 都指的是 v2 版本的 Vue。'},{url:"/guide/usevue.html",hash:"只含有运行时的构建版本",title:"只含有运行时的构建版本",content:"如果你熟悉 Vue.js，你应该知道 Vue.js 有两种构建版本: 运行时 + 编译器 与 只包含运行时 。它们之间的区别在于编译器是否需要能够在运行时编译 template 选项。由于运行时构建版本比完整版本的构建版本轻约 30%（Vue 官方估算），为了更好的性能和更小的代码体积，eeui 集成的是运行时版本的 Vue。 具体来说，差异如下： 定义组件时不支持 template  选项。 不支持使用 x-templates 。 不支持使用 Vue.compile 。"},{url:"/guide/usevue.html",hash:"平台的差异",title:"平台的差异",content:"Vue.js 最初是为 Web 平台设计的。虽然可以基于eeui开发原生应用程序，但是仍然存在许多eeui 与 Web 平台的差异。 与 Web 平台的主要差异是: 执行环境、DOM、样式和事件。"},{url:"/guide/usevue.html",hash:"执行环境",title:"执行环境",content:"eeui 主要用于编写多页的应用程序，每个页面都对应了原生开发中的 View 或者 Activity，并且保持自己的上下文。即使 eeui 的所有页面都使用的都是同一个 Javascript 引擎的实例(virtual machine)，每个页面是执行环境也是互相隔离的（基于 Sandbox 技术）。 具体来讲，每个页面的 Vue 变量都是不同的实例，即使是写在 Vue 上的“全局”配置（Vue.config.xxx）也只会影响 eeui 上的单个页面。"},{url:"/guide/usevue.html",hash:"dom",title:"DOM",content:"因为在 Android 和 iOS 上没有 DOM（Document Object Model），如果你要手动操作和生成 DOM 元素的话可能会遇到一些兼容性问题。在你使用现代前端框架的情况下，操作数据与组件而不是生成的元素是一个比较好的做法。 一些与 DOM 相关的特性，比如 v-html，vm.$el，template 选项，在不同的平台上可能无法获得相同的反应。 准确来说，vm.$el 属性类型在web环境下是HTMLElement，但是在移动端并没有这个类型。实际上，它是一个由 eeui 文档对象模型 定义的特殊数据结构。"},{url:"/guide/usevue.html",hash:"样式",title:"样式",content:"样式表和 CSS 规则是由 eeui js 框架和原生渲染引擎管理的。要实现完整的 CSS 对象模型（CSSOM：CSS Object Model）并支持所有的 CSS 规则是非常困难的，而且没有这个必要。 出现性能考虑，eeui 目前只支持单个类选择器，并且只支持 CSS 规则的子集。详情请参阅 通用样式 与 文本样式。 在 eeui 里， 每一个 Vue 组件的样式都是 scoped 。"},{url:"/guide/usevue.html",hash:"事件",title:"事件",content:"目前在 eeui 里不支持事件冒泡和捕获，因此 eeui 原生组件不支持事件修饰符 ，例如.prevent，.capture，.stop，.self 。 此外，按键修饰符 以及系统修饰键  例如 .enter，.tab，.ctrl，.shift 在移动端基本没有意义，在 eeui 中也不支持。"},{url:"/guide/usevue.html",hash:"支持的功能",title:"支持的功能",content:""},{url:"/guide/usevue.html",hash:"全局配置",title:"全局配置",content:"Vue “全局”配置只会影响 eeui 上的单一页面，配置不会在不同的 eeui 页面之间共享。 Vue 全局配置 是否支持 说明 Vue.config.silent  支持 - Vue.config.optionMergeStrategies  支持 - Vue.config.devtools  不支持 - Vue.config.errorHandler  支持 - Vue.config.warnHandler  支持 - Vue.config.ignoredElements  支持 不推荐 Vue.config.keyCodes  不支持 - Vue.config.performance  不支持 - Vue.config.productionTip  支持 -"},{url:"/guide/usevue.html",hash:"全局-api",title:"全局 API",content:"Vue 全局 API 是否支持 说明 Vue.extend  支持 - Vue.nextTick  支持 - Vue.set  支持 - Vue.delete  支持 - Vue.directive  支持 - Vue.filter  支持 - Vue.component  支持 - Vue.use  支持 - Vue.mixin  支持 - Vue.version  支持 - Vue.compile  不支持 eeui 用的是 只包含运行时构建"},{url:"/guide/usevue.html",hash:"选项",title:"选项",content:"Vue 选项 是否支持 说明 data  支持 - props  支持 - propsData  支持 - computed  支持 - methods  支持 - watch  支持 - el  支持 - template  不支持 eeui 用的是 只包含运行时构建  render  支持 不推荐 renderError  支持 - directives  支持 - filters  支持 - components  支持 - parent  支持 不推荐 mixins  支持 - extends  支持 - provide/inject  支持 不推荐 name  支持 - delimiters  支持 不推荐 functional  支持 - model  支持 - inheritAttrs  支持 - comments  不支持 -"},{url:"/guide/usevue.html",hash:"生命周期钩子",title:"生命周期钩子",content:"Vue 组件的实例生命周期钩子将在特定的阶段发出，详情请参考 Vue 组件的生命周期图示 。 Vue 生命周期钩子 是否支持 说明 beforeCreate  支持 - created  支持 - beforeMount  支持 - mounted  支持 详见下文解释 beforeUpdate  支持 - updated  支持 - activated  不支持 不支持<keep-alive> deactivated  不支持 不支持<keep-alive> beforeDestroy  支持 - destroyed  支持 - errorCaptured  支持 - TIP 具体详见生命周期篇。"},{url:"/guide/usevue.html",hash:"实例属性",title:"实例属性",content:"Vue 实例属性 是否支持 说明 vm.$data  支持 - vm.$props  支持 - vm.$el  支持 - vm.$options  支持 - vm.$parent  支持 - vm.$root  支持 - vm.$children  支持 - vm.$slots  支持 - vm.$scopedSlots  支持 - vm.$refs  支持 - vm.$isServer  支持 永远是false vm.$attrs  支持 - vm.$listeners  支持 -"},{url:"/guide/usevue.html",hash:"实例方法",title:"实例方法",content:"Vue 实例方法 是否支持 说明 vm.$watch()  支持 - vm.$set()  支持 - vm.$delete()  支持 - vm.$on()  支持 - vm.$once()  支持 - vm.$off()  支持 - vm.$emit()  支持 - vm.$mount()  不支持 - vm.$forceUpdate()  支持 - vm.$nextTick()  支持 - vm.$destroy()  支持 -"},{url:"/guide/usevue.html",hash:"模板指令",title:"模板指令",content:"Vue 指令 是否支持 说明 v-text  支持 - v-html  不支持 - v-show  不支持 不支持 display: none; v-if  支持 - v-else  支持 - v-else-if  支持 - v-for  支持 - v-on  支持 不支持事件修饰符  v-bind  支持 - v-model  支持 - v-pre  支持 - v-cloak  不支持 只支持单类名选择器 v-once  支持 -"},{url:"/guide/usevue.html",hash:"特殊属性",title:"特殊属性",content:"Vue 特殊属性 是否支持 说明 key  支持 - ref  支持 - slot  支持 - slot-scope  支持 - scope  支持 不推荐 is  支持 -"},{url:"/guide/usevue.html",hash:"内置组件",title:"内置组件",content:"Vue 内置组件 是否支持 说明 component  支持 - transition  不支持 在移动端 enter 与 leave 的概念可能有点不同， 并且 eeui 不支持display: none; transition-group  不支持 跟 transition 一样 keep-alive  不支持 移动端的原生组件不能被前端缓存 slot  支持 -"}]},{title:"环境变量",url:"/guide/variable.html",hash:"",data:[{url:"/guide/variable.html",hash:"环境变量",title:"环境变量",content:""},{url:"/guide/variable.html",hash:"wxenvironment",title:"WXEnvironment",content:"每个 eeui 页面的 JS 上下文中都有一个相互独立的 eeui 变量，它可以像全局变量一样使用，不过它在不同页面中是隔离而且只读的。 eeui 环境变量中的字段: 字段名 类型 描述 WXEnvironment.platform String 运行平台，Android 或者 iOS。 WXEnvironment.appName String 应用的名称 WXEnvironment.appVersion String 应用的版本。 WXEnvironment.osName String 系统的名称，Android 或者 iOS。 WXEnvironment.osVersion String 系统版本。 WXEnvironment.deviceModel String 手机设备型号。 WXEnvironment.deviceWidth Number 设备宽度。 WXEnvironment.deviceHeight Number 设备高度。"},{url:"/guide/variable.html",hash:"例子：",title:"例子：",content:""},{url:"/guide/variable.html",hash:"document",title:"document",content:"app.document 是当前页面的文档模型对象，可以用来创建和操作 DOM 树中元素。它是 eeui DOM API 规范的一部分，但是它和 W3C 的 DOM 规范 中的 document 对象是不同的。 而且，在使用了现代化的前端框架（如 Vue 和 Rax）的情况下，直接操作 DOM 并不是最佳实践。更何况在 eeui 平台里并不一定有真实的 DOM，在 Android 和 iOS 端上都是模拟出来的。 这个接口主要是用在 Vue 和 Rax 框架内部，用于将 virtual-dom 转换成渲染执行，并且发送给 eeui 客户端的渲染引擎。不建议在开发页面时使用。"},{url:"/guide/variable.html",hash:"requiremodule",title:"requireModule",content:"对于那些不依赖 UI 交互的原生功能，eeui 将其封装成模块，这是一种通过 javascript 调用原生能力的方法。除了内置模块以外，将已有的原生模块移植到 eeui 平台也很方便。你可以使用 app.requireModule 接口引用自定义的或者内置的模块。 参数： 大小写敏感的模块名。 返回值： 如果模块已经注册了，返回一个 Proxy 对象（如果环境不支持 Proxy 则返回一个普通对象），可以使用这个对象调用客户端注册的方法。 如果模块未注册，返回 undefined。"},{url:"/guide/variable.html",hash:"使用原生模块",title:"使用原生模块",content:"你可以像使用不同 javascript 函数一样使用原生注册的接口。这里是一个简单的使用eeui 模块的例子："},{url:"/guide/variable.html",hash:"supports",title:"supports",content:'你应该了解 eeui 的组件和模块都是可以注册和配置的，这样导致了在不同环境中组件和模块的支持情况不一样。你可以使用 app.supports 接口在运行期检测某个功能在当前环境中是否可用。 参数： 特定格式的字符串：@{type}/{name}。 type 必须是 "component" 和 "module" 之一。name 可以是标签名、模块名，也可以指定模块中的某个方法名（和模块名用 . 隔开）。 返回值： 支持该特性，则返回 true。 不支持该特性，则返回 false。 参数格式错误或无法确定是否支持，则返回 null。'},{url:"/guide/variable.html",hash:"使用范例",title:"使用范例",content:"检测某个组件是否可用： 检测某个模块是否可用： 检测某个模块是否包含某个方法： 无效的输入："},{url:"/guide/variable.html",hash:"isregisteredmodule",title:"isRegisteredModule",content:"检测某个特定的模块或者接口是否可用。 这个接口只能用于检测特定模块和方法的兼容性，不支持检测组件。"},{url:"/guide/variable.html",hash:"isregisteredcomponent",title:"isRegisteredComponent",content:"检测某个特定的组件是否可用。 这个接口只能用于检测组件的兼容性，不支持检测模块。"}]},{title:"Everyone Easy User Interface",url:"/index.html",hash:"",data:[{url:"/index.html",hash:"main-title",title:"Everyone Easy User Interface",content:"使用 Vue.js 跨平台开发高质量原生（Android/iOS）应用 快速上手 →\n 高性能 使用原生组件和原生模块，来最大化利用原生渲染的性能优势以及平台能力。跨平台 你可以使用同一份代码编译成不同目标文件分别在 Android 和 iOS 平台上运行。贴近前端生态 支持了最常用 CSS 样式以及最流行的前端框架，在未来或许还可以支持更多。  \n        MIT Licensed | Copyright © 2019 eeui.app"}]},{title:"广告弹窗",url:"/module/adDialog.html",hash:"",data:[{url:"/module/adDialog.html",hash:"广告弹窗",title:"广告弹窗",content:"需要加载的模块"},{url:"/module/adDialog.html",hash:"eeui-addialog",title:"eeui.adDialog",content:"图片广告弹窗"},{url:"/module/adDialog.html",hash:"预览效果",title:"预览效果",content:""},{url:"/module/adDialog.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 imgUrl String √ 图片地址 - width Number - 弹出图片宽度，留空自动 - height Number - 弹出图片高度，留空自动 - showClose Boolean - 是否显示关闭按钮 true backClose Boolean - 是否允许按返回键关闭 true dialogName String - 弹窗名称，用于手动关闭指定弹窗 - width、height 两个只赋值一个时，另一个参数自动等比缩放"},{url:"/module/adDialog.html",hash:"callback-回调result说明",title:"callback 回调result说明",content:"注①： load图片加载中 ready就绪 show显示 click点击弹窗图片 destroy已销毁"},{url:"/module/adDialog.html",hash:"简单示例",title:"简单示例",content:""},{url:"/module/adDialog.html",hash:"eeui-addialogclose",title:"eeui.adDialogClose",content:"手动关闭弹窗"}]},{title:"跨域异步请求",url:"/module/ajax.html",hash:"",data:[{url:"/module/ajax.html",hash:"跨域异步请求",title:"跨域异步请求",content:"需要加载的模块"},{url:"/module/ajax.html",hash:"eeui-ajax",title:"eeui.ajax",content:"跨域请求 支持自定义headers 支持上传文件"},{url:"/module/ajax.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 url String √ 请求地址 - name String - 请求名称，用于取消请求 - method String - 请求类型，get、post get dataType String - 返回数据类型，json、text json timeout Number - 请求超时时间（单位：毫秒） 15000 cache Number - 缓存时间，0不缓存（单位：毫秒） 0 headers Object - 请求头部headers - data Object - 发送数据 - files Object - 提交/上传文件 - beforeAfter Boolen - 是否回调前(ready)、后(complete)事件  false progressCall Boolen - 是否回调上传进度事件  false"},{url:"/module/ajax.html",hash:"callback-回调result说明",title:"callback 回调result说明",content:"注①： ready就绪 progress上传进度更新 success请求成功 error请求失败 complete请求结束 回调过程：ready -> [progress] -> (success | error) -> complete； 状态提示 ready和complete事件仅在beforeAfter=true时有回调 ， progress事件仅在上传文件且progressCall=true时有回调 。"},{url:"/module/ajax.html",hash:"简单示例",title:"简单示例",content:""},{url:"/module/ajax.html",hash:"eeui-ajaxcancel",title:"eeui.ajaxCancel",content:"取消跨域请求"},{url:"/module/ajax.html",hash:"eeui-getcachesizeajax",title:"eeui.getCacheSizeAjax",content:"获取跨域请求缓存"},{url:"/module/ajax.html",hash:"eeui-clearcacheajax",title:"eeui.clearCacheAjax",content:"清除跨域请求缓存"}]},{title:"确认对话框",url:"/module/alert.html",hash:"",data:[{url:"/module/alert.html",hash:"确认对话框",title:"确认对话框",content:"需要加载的模块"},{url:"/module/alert.html",hash:"eeui-alert",title:"eeui.alert",content:"警告框"},{url:"/module/alert.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 title String - 对话框标题 - message String - 对话框内容 - button String - 对话框按钮名称 确定 cancelable Boolean - 点击对话框以外的区域是否让对话框消失 true"},{url:"/module/alert.html",hash:"简单示例",title:"简单示例",content:""},{url:"/module/alert.html",hash:"eeui-confirm",title:"eeui.confirm",content:"确认对话框"},{url:"/module/alert.html",hash:"params-参数说明-2",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 title String - 对话框标题 - message String - 对话框内容 - buttons Array - 按钮参数，请参考buttons参数说明 - cancelable Boolean - 点击对话框以外的区域是否让对话框消失 true"},{url:"/module/alert.html",hash:"buttons-参数说明",title:"buttons 参数说明",content:"属性名 类型 必须 描述 默认值 title String - 按钮名称 - type String - 按钮类型：positive：正面按钮，表示“积极”、“确认”的意思negative：反面按钮，表示“消极”、“取消”的意思neutral：中立按钮 -"},{url:"/module/alert.html",hash:"callback-回调result说明",title:"callback 回调result说明",content:""},{url:"/module/alert.html",hash:"简单示例-2",title:"简单示例",content:""},{url:"/module/alert.html",hash:"eeui-input",title:"eeui.input",content:"输入对话框"},{url:"/module/alert.html",hash:"params-参数说明-3",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 title String - 对话框标题 - message String - 对话框内容 - buttons Array - 按钮参数，请参考confirm的buttons参数说明 - inputs Array - 输入参数，请参考inputs参数说明 - cancelable Boolean - 点击对话框以外的区域是否让对话框消失 true"},{url:"/module/alert.html",hash:"inputs-参数说明",title:"inputs 参数说明",content:"属性名 类型 必须 描述 默认值 type String - 输入框类型：datetime、date、time、email、password、passnumber、tel、url、number text value String - 默认内容 - maxLength Number - 最大输入长度 - placeholder String - 提示信息 - singleLine Boolean - 只允许单行输入 - autoFocus Boolean - 自动获取焦点 - textSize String - 字体大小 - textColor String - 字体颜色 - backgroundColor String - 背景颜色 - ems Number - - - lines Number - - -"},{url:"/module/alert.html",hash:"callback-回调result说明-2",title:"callback 回调result说明",content:""},{url:"/module/alert.html",hash:"简单示例-3",title:"简单示例",content:""}]},{title:"缓存管理",url:"/module/caches.html",hash:"",data:[{url:"/module/caches.html",hash:"缓存管理",title:"缓存管理",content:"需要加载的模块"},{url:"/module/caches.html",hash:"eeui-getcachesizedir",title:"eeui.getCacheSizeDir",content:"获取内部缓存目录大小 callback 回调result说明"},{url:"/module/caches.html",hash:"eeui-clearcachedir",title:"eeui.clearCacheDir",content:"清空内部缓存目录 callback 回调result说明"},{url:"/module/caches.html",hash:"eeui-getcachesizefiles",title:"eeui.getCacheSizeFiles",content:"获取内部文件目录大小 callback 回调result说明"},{url:"/module/caches.html",hash:"eeui-clearcachefiles",title:"eeui.clearCacheFiles",content:"清空内部文件目录 callback 回调result说明"},{url:"/module/caches.html",hash:"eeui-getcachesizedbs",title:"eeui.getCacheSizeDbs",content:"获取内部数据库目录大小 callback 回调result说明"},{url:"/module/caches.html",hash:"eeui-clearcachedbs",title:"eeui.clearCacheDbs",content:"清空内部数据库目录 callback 回调result说明"}]},{title:"验证弹窗",url:"/module/captcha.html",hash:"",data:[{url:"/module/captcha.html",hash:"验证弹窗",title:"验证弹窗",content:"需要加载的模块"},{url:"/module/captcha.html",hash:"eeui-swipecaptcha",title:"eeui.swipeCaptcha",content:"显示滑动验证码弹窗"},{url:"/module/captcha.html",hash:"预览效果",title:"预览效果",content:""},{url:"/module/captcha.html",hash:"示例代码",title:"示例代码",content:""},{url:"/module/captcha.html",hash:"imgurl-参数说明",title:"imgUrl 参数说明",content:"类型 必须 描述 默认值 String - 自定义显示的图片 -"},{url:"/module/captcha.html",hash:"callback-回调result说明",title:"callback 回调result说明",content:"注①： create页面创建完毕 destroy页面已销毁 success验证成功 failed验证失败"},{url:"/module/captcha.html",hash:"简单示例",title:"简单示例",content:""}]},{title:"获取图片尺寸",url:"/module/getImageSize.html",hash:"",data:[{url:"/module/getImageSize.html",hash:"获取图片尺寸",title:"获取图片尺寸",content:"需要加载的模块"},{url:"/module/getImageSize.html",hash:"eeui-getimagesize",title:"eeui.getImageSize",content:"获取图片尺寸"},{url:"/module/getImageSize.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 url String √ 图片地址 -"},{url:"/module/getImageSize.html",hash:"callback-回调result说明",title:"callback 回调result说明",content:""},{url:"/module/getImageSize.html",hash:"简单示例",title:"简单示例",content:""}]},{title:"键盘功能",url:"/module/keyboard.html",hash:"",data:[{url:"/module/keyboard.html",hash:"键盘功能",title:"键盘功能",content:"需要加载的模块"},{url:"/module/keyboard.html",hash:"eeui-keyboardhide",title:"eeui.keyboardHide",content:"动态隐藏软键盘"},{url:"/module/keyboard.html",hash:"eeui-keyboardstatus",title:"eeui.keyboardStatus",content:"判断软键盘是否可见"}]},{title:"等待弹窗",url:"/module/loading.html",hash:"",data:[{url:"/module/loading.html",hash:"等待弹窗",title:"等待弹窗",content:"需要加载的模块"},{url:"/module/loading.html",hash:"eeui-loading",title:"eeui.loading",content:"显示等待弹窗"},{url:"/module/loading.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 title String - 等待描述 - titleSize Number - 等待描述字体大小 16 titleColor String - 等待描述字体颜色 - cancelable Boolean - 是否允许点击空白处或返回键关闭 true duration Number - 自动关闭时间，0取消自动关闭 0 style String - loading样式，详见：注① - styleColor String - loading样式颜色 - amount Float - 背景透明程度，取值：0-1 - 注① Style Preview RotatingPlane  DoubleBounce  Wave  WanderingCubes  Pulse  ChasingDots  ThreeBounce  Circle  CubeGrid  FadingCircle  FoldingCube  RotatingCircle"},{url:"/module/loading.html",hash:"callback-回调说明",title:"callback 回调说明",content:"返回键或点击空白处取消回调事件"},{url:"/module/loading.html",hash:"简单示例",title:"简单示例",content:""},{url:"/module/loading.html",hash:"eeui-loadingclose",title:"eeui.loadingClose",content:"关闭等待弹窗"},{url:"/module/loading.html",hash:"loaddingname-参数说明",title:"loaddingName 参数说明",content:"关闭指定名称的弹窗，留空则关闭正在显示的第一个弹窗"}]},{title:"导航标题栏",url:"/module/navigationBar.html",hash:"",data:[{url:"/module/navigationBar.html",hash:"导航标题栏",title:"导航标题栏",content:"需要加载的模块"},{url:"/module/navigationBar.html",hash:"navigationbar-settitle",title:"navigationBar.setTitle",content:"设置页面标题 params 参数说明 属性名 类型 必须 描述 默认值 title String √ 标题 - titleColor String - 标题字体颜色 - titleSize Float - 标题字体大小 32.0 titleBold  Boolean - 标题粗体 false subtitle String - 副标题 - subtitleColor String - 副标题字体颜色 - subtitleSize Float - 副标题字体大小 24.0 backgroundColor String - 标题栏背景颜色 #3EB4FF barHeight  Number - 标题栏高度 -"},{url:"/module/navigationBar.html",hash:"navigationbar-setleftitem",title:"navigationBar.setLeftItem",content:"设置标题栏左边按钮 params 参数说明 属性名 类型 必须 描述 默认值 title String - 按钮标题（与图标必须一） - titleColor String - 按钮标题字体颜色 - titleSize Float - 按钮标题字体大小 28.0 titleBold  Boolean - 按钮标题粗体 false icon String - 按钮图标，注① - iconColor String - 按钮图标字体颜色 - iconSize Float - 按钮图标字体大小（图标大小） 28.0 width Number - 按钮宽度，留空自适应 - spacing Number - 按钮标题与按钮图标间距 10 注①： 支持字体图标，如：md-add、ios-cube，更多图标代码详见eeui所有图标。 支持远程图片地址，如：https://eeui.app/app/demo.png，此时不支持iconColor参数。 简单示例 综合示例"},{url:"/module/navigationBar.html",hash:"navigationbar-setrightitem",title:"navigationBar.setRightItem",content:"设置标题栏右边按钮，调用参数同见navigationBar.setLeftItem。"},{url:"/module/navigationBar.html",hash:"navigationbar-show",title:"navigationBar.show",content:"手动显示标题栏，使用navigationBar.setTitle方法时自动显示标题栏。"},{url:"/module/navigationBar.html",hash:"navigationbar-hide",title:"navigationBar.hide",content:"手动隐藏标题栏。"}]},{title:"路由",url:"/module/navigator.html",hash:"",data:[{url:"/module/navigator.html",hash:"路由",title:"路由",content:"需要加载的模块"},{url:"/module/navigator.html",hash:"navigator-push",title:"navigator.push",content:"载入（打开）新App Js页面 或 载入（打开）新Web页面 此模块与eeui.openPage一致，只是调用名称不同。 params 参数说明、callback 回调说明 详细使用说明见eeui.openPage。"},{url:"/module/navigator.html",hash:"navigator-pop",title:"navigator.pop",content:"弹出（关闭）页面 此模块与eeui.closePage基本一致，多了回调功能。 params 参数说明 详细使用说明见eeui.closePage callback 回调说明 回调与navigator.push的回调一致。"}]},{title:"页面功能",url:"/module/newPage.html",hash:"",data:[{url:"/module/newPage.html",hash:"页面功能",title:"页面功能",content:"需要加载的模块"},{url:"/module/newPage.html",hash:"eeui-openpage",title:"eeui.openPage",content:"打开新App Js页面 或 打开新Web页面 params 参数说明（参数支持url字符串请求，如：http://abc.com/xxx.js?statusBarType=immersion） 属性名 类型 必须 描述 默认值 url String √ 页面地址①支持本地地址，如：xxx.js②支持远程地址，如：http://abc.com/xxx.js可使用 root:// 表示 src 目录，比如首页: root://pages/index.js - pageName String - 页面名称 - pageTitle String - 页面标题，设置显示标题栏statusBarType 为 normal 时有效。(标题栏更多设置) - pageType String - 页面类型：app、web可填写 auto 系统自动识别 (不建议) app params Object - 页面传递参数，通过app.config.params获取 - cache Number - 页面缓存时间，仅app类型且非本地页面有效，设置0不缓存（单位：毫秒） 0 loading Boolean - 是否显示等待效果：true、false true loadingBackground  Boolean - 是否显示等待效果过渡背景：true、false false animated Boolean - 是否进入页面需要动画效果：true、false true animatedType String - 页面动画效果类型：push 右侧打开present 底部弹出animated 为 true 时有效 iOS:pushAndroid:跟随系统 swipeBack Boolean - 是否支持滑动返回：true、false true swipeFullBack Boolean - 是否支持全屏滑动返回：true、falseswipeBack 为 true 时有效 false swipeColorBack  Boolean - 是否为滑动返回界面设置状态栏颜色跟随滑动：true、falseswipeBack 为 true 时有效 true statusBarType String - 状态栏样式：normal 正常fullscreen 全屏immersion 沉浸式 normal statusBarColor String - 状态栏颜色值statusBarType 为 normal 时有效 继承 > #3EB4FF statusBarAlpha Number - 状态栏透明度， 0-255statusBarType 为 normal 时有效 0 statusBarStyle Boolean - 状态栏字体颜色：true 状态栏的字体为白色false 状态栏的字体为黑色 iOS:黑Android:白 softInputMode String - 键盘弹出方式：详见下文 params.softInputMode 参数说明 auto backgroundColor String - 页面背景颜色 继承 > #ffffff backPressedClose Boolean - 允许按返回键关闭页面  true safeAreaBottom Number - iPhone X+底部安全距离  - params.softInputMode 参数说明 值 说明 auto iOS：当显示软键盘时，自动调整window的布局；Android：系统去判断内容区域可滚动为pan,不可滚动为resize。 pan iOS：当显示软键盘时，自动调整window的布局；Android：当显示软键盘时，调整window的空白区域来显示软键盘。 resize 当显示软键盘时，自动调整window的布局。 nothing 当显示软键盘时，不调整window的布局。 callback 回调result说明 注①： create页面创建完毕 start页面正在启动 resume页面已在前台可见 pause页面正在停止 stop页面即将停止或者完全被覆盖 restart页面正在重新启动 destroy页面已销毁 viewCreatedAppJS第一个视图的呈现完成 renderSuccessAppJS呈现视图阶段结束 errorAppJS运行时报告异常 statusChangedWeb状态发生改变 errorChangedWeb运行时报告异常 titleChangedWeb标题发生改变 简单示例"},{url:"/module/newPage.html",hash:"eeui-getpageinfo",title:"eeui.getPageInfo",content:"获取页面信息 params 参数说明 属性名 类型 必须 描述 默认值 pageName String - 页面名称，留空获取当前页面（不建议留空） - 简单示例"},{url:"/module/newPage.html",hash:"eeui-getpageinfoasync",title:"eeui.getPageInfoAsync",content:"获取页面信息（异步）"},{url:"/module/newPage.html",hash:"eeui-reloadpage",title:"eeui.reloadPage",content:"重新加载App Js页面 或 Web页面 params 参数说明 属性名 类型 必须 描述 默认值 pageName String - 页面名称，留空重载当前页面（不建议留空） - url String - 页面新地址  - 简单示例"},{url:"/module/newPage.html",hash:"eeui-setsoftinputmode",title:"eeui.setSoftInputMode",content:"设置键盘弹出方式 params 参数说明 属性名 类型 必须 描述 默认值 pageName String - 页面名称，留空表示当前页面（不建议留空） - 简单示例"},{url:"/module/newPage.html",hash:"eeui-setpagebackpressed",title:"eeui.setPageBackPressed",content:"拦截返回按键事件 params 参数说明 属性名 类型 必须 描述 默认值 pageName String - 页面名称，留空拦截当前页面（不建议留空） - 简单示例"},{url:"/module/newPage.html",hash:"eeui-setonrefreshlistener",title:"eeui.setOnRefreshListener",content:"仅对App Js页面有效，监听下拉刷新事件，下拉刷新事件结束后请使用eeui.setRefreshing(pageName, false)设置下拉刷新结束状态 params 参数说明 属性名 类型 必须 描述 默认值 pageName String - 页面名称，留空表示当前页面（不建议留空） - 简单示例"},{url:"/module/newPage.html",hash:"eeui-setrefreshing",title:"eeui.setRefreshing",content:"仅对App Js页面有效，设置下拉刷新状态，主要用于eeui.setOnRefreshListener回调处理完成后设置结束状态 params 参数说明 属性名 类型 必须 描述 默认值 pageName String - 页面名称，留空表示当前页面（不建议留空） -"},{url:"/module/newPage.html",hash:"eeui-setstatusbarstyle",title:"eeui.setStatusBarStyle",content:"修改当前页面状态栏样式（字体颜色） isLight 参数说明 true状态栏的字体为白色 false状态栏的字体为黑色"},{url:"/module/newPage.html",hash:"eeui-setpagestatuslistener",title:"eeui.setPageStatusListener",content:"添加监听页面状态变化 params 参数说明 属性名 类型 必须 描述 默认值 listenerName String √ 监听名称（用于防止重复监听） - pageName String - 页面名称，留空表示当前页面 - 简单示例"},{url:"/module/newPage.html",hash:"eeui-clearpagestatuslistener",title:"eeui.clearPageStatusListener",content:"清除监听页面状态变化 params 参数说明 属性名 类型 必须 描述 默认值 listenerName String √ 监听名称 - pageName String - 页面名称，留空表示当前页面 - 简单示例"},{url:"/module/newPage.html",hash:"eeui-onpagestatuslistener",title:"eeui.onPageStatusListener",content:"手动执行(触发)页面状态 params 参数说明 属性名 类型 必须 描述 默认值 listenerName String - 监听名称，留空表示当前页面所有 - pageName String - 页面名称，留空表示当前页面 - extra Object - 额外传递参数 - 简单示例"},{url:"/module/newPage.html",hash:"eeui-getcachesizepage",title:"eeui.getCacheSizePage",content:"获取App Js页面缓存大小"},{url:"/module/newPage.html",hash:"eeui-clearcachepage",title:"eeui.clearCachePage",content:"手动清除缓存App Js页面"},{url:"/module/newPage.html",hash:"eeui-closepage",title:"eeui.closePage",content:"关闭App Js页面 或 Web页面 params 参数说明 属性名 类型 必须 描述 默认值 pageName String - 页面名称，留空关闭当前页面（不建议留空） - animated Boolean - 是否弹出页面需要动画效果：true、false true 简单示例"},{url:"/module/newPage.html",hash:"eeui-closepageto",title:"eeui.closePageTo",content:"关闭至某个App Js页面 或 Web页面 场景示例：目前顺序打开a、b、c、d、e五个页面，e为当前页面，想要直接回到a页面时可以使用此方法。 params 参数说明 属性名 类型 必须 描述 默认值 pageName String - 页面名称，留空关闭当前页面（不建议留空） - 简单示例"},{url:"/module/newPage.html",hash:"eeui-openweb",title:"eeui.openWeb",content:"调用系统浏览器打开页面 url 参数说明 类型 必须 描述 默认值 String √ 打开的页面url - 简单示例"},{url:"/module/newPage.html",hash:"eeui-godesktop",title:"eeui.goDesktop",content:"返回手机桌面"},{url:"/module/newPage.html",hash:"eeui-getconfigstring",title:"eeui.getConfigString",content:"获取eeui.config.js配置文件指定参数"},{url:"/module/newPage.html",hash:"eeui-setcustomconfig",title:"eeui.setCustomConfig",content:"自定义eeui.config.js配置参数（比如：用于动态设置homePage主页的JS地址） 注意：有新的热更新或通过系统级清理app缓存后eeui.setCustomConfig设置的内容将失效。"},{url:"/module/newPage.html",hash:"eeui-getcustomconfig",title:"eeui.getCustomConfig",content:"获取eeui.config.js所有自定义的配置参数（仅返回自定义的配置参数）"},{url:"/module/newPage.html",hash:"eeui-clearcustomconfig",title:"eeui.clearCustomConfig",content:"清除eeui.config.js自定义的配置参数（仅清除自定义的配置参数）"},{url:"/module/newPage.html",hash:"eeui-realurl",title:"eeui.realUrl",content:"规范化url，删除多余的符号连接（比如'/./', '/../' 以及多余的'/'）"},{url:"/module/newPage.html",hash:"eeui-rewriteurl",title:"eeui.rewriteUrl",content:"将相对地址基于当前地址补全"}]},{title:"打开其他APP",url:"/module/openOtherApp.html",hash:"",data:[{url:"/module/openOtherApp.html",hash:"打开其他app",title:"打开其他APP",content:"需要加载的模块"},{url:"/module/openOtherApp.html",hash:"eeui-openotherapp",title:"eeui.openOtherApp",content:"打开常用第三方APP"},{url:"/module/openOtherApp.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 type String √ 要打开的APP：wx、qq、alipay、jd -"},{url:"/module/openOtherApp.html",hash:"简单示例",title:"简单示例",content:""},{url:"/module/openOtherApp.html",hash:"eeui-openotherappto",title:"eeui.openOtherAppTo",content:"打开其他第三方APP 属性名 类型 必须 描述 默认值 pkg String √ Android：包名、iOS：url - cls String √ Android：启动页、iOS：url参数 -"},{url:"/module/openOtherApp.html",hash:"callback-回调result说明",title:"callback 回调result说明",content:""},{url:"/module/openOtherApp.html",hash:"简单示例-2",title:"简单示例",content:""}]},{title:"复制粘贴",url:"/module/plate.html",hash:"",data:[{url:"/module/plate.html",hash:"复制粘贴",title:"复制粘贴",content:"需要加载的模块"},{url:"/module/plate.html",hash:"eeui-copytext",title:"eeui.copyText",content:"复制文本到剪贴板"},{url:"/module/plate.html",hash:"eeui-pastetext",title:"eeui.pasteText",content:"获取剪贴板的文本"}]},{title:"保存图片至本地",url:"/module/saveImage.html",hash:"",data:[{url:"/module/saveImage.html",hash:"保存图片至本地",title:"保存图片至本地",content:"需要加载的模块"},{url:"/module/saveImage.html",hash:"eeui-saveimage",title:"eeui.saveImage",content:"保存图片至本地"},{url:"/module/saveImage.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 url String √ 图片地址 -"},{url:"/module/saveImage.html",hash:"callback-回调result说明",title:"callback 回调result说明",content:""},{url:"/module/saveImage.html",hash:"简单示例",title:"简单示例",content:""},{url:"/module/saveImage.html",hash:"eeui-saveimageto",title:"eeui.saveImageTo",content:"保存图片至本地（指定目录名称，仅Android指定目录有效，iOS系统只能保存到系统相册）"},{url:"/module/saveImage.html",hash:"params-参数说明-2",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 url String √ 图片地址 - childDir String - 指定目录名称（iOS无效：iOS系统只能保存到系统相册） -"},{url:"/module/saveImage.html",hash:"callback-回调result说明-2",title:"callback 回调result说明",content:""},{url:"/module/saveImage.html",hash:"简单示例-2",title:"简单示例",content:""}]},{title:"二维码扫描",url:"/module/scaner.html",hash:"",data:[{url:"/module/scaner.html",hash:"二维码扫描",title:"二维码扫描",content:"需要加载的模块"},{url:"/module/scaner.html",hash:"eeui-openscaner",title:"eeui.openScaner",content:"二维码扫描页面"},{url:"/module/scaner.html",hash:"预览效果",title:"预览效果",content:""},{url:"/module/scaner.html",hash:"示例代码",title:"示例代码",content:""},{url:"/module/scaner.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 title String - 扫码页面标题  - desc String - 扫码页面描述文字 - continuous Boolean - 是否连续扫码  false"},{url:"/module/scaner.html",hash:"callback-回调result说明",title:"callback 回调result说明",content:"注①： create页面创建完毕 destroy页面已销毁 success扫码识别成功 error扫码识别失败 openLight打开闪光灯 offLight关闭闪光灯"},{url:"/module/scaner.html",hash:"简单示例",title:"简单示例",content:""}]},{title:"文字图片分享",url:"/module/share.html",hash:"",data:[{url:"/module/share.html",hash:"文字图片分享",title:"文字图片分享",content:"需要加载的模块"},{url:"/module/share.html",hash:"eeui-sharetext",title:"eeui.shareText",content:"调用系统分享文字"},{url:"/module/share.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 text String √ 分享的文字内容 -"},{url:"/module/share.html",hash:"简单示例",title:"简单示例",content:""},{url:"/module/share.html",hash:"eeui-shareimage",title:"eeui.shareImage",content:"调用系统分享图片"},{url:"/module/share.html",hash:"params-参数说明-2",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 imgUrl String √ 分享的图片地址 -"},{url:"/module/share.html",hash:"简单示例-2",title:"简单示例",content:""}]},{title:"数据储存",url:"/module/storage.html",hash:"",data:[{url:"/module/storage.html",hash:"数据储存",title:"数据储存",content:"需要加载的模块"},{url:"/module/storage.html",hash:"eeui-setcaches",title:"eeui.setCaches",content:"保存数据信息"},{url:"/module/storage.html",hash:"eeui-getcaches",title:"eeui.getCaches",content:"获取数据信息"},{url:"/module/storage.html",hash:"eeui-setcachesstring",title:"eeui.setCachesString",content:"保存数据信息（文本形式）"},{url:"/module/storage.html",hash:"eeui-getcachesstring",title:"eeui.getCachesString",content:"获取数据信息（文本形式）"},{url:"/module/storage.html",hash:"eeui-getallcaches",title:"eeui.getAllCaches",content:"获取所有数据信息"},{url:"/module/storage.html",hash:"eeui-clearallcaches",title:"eeui.clearAllCaches",content:"清除所有数据信息"},{url:"/module/storage.html",hash:"eeui-setvariate",title:"eeui.setVariate",content:"设置全局变量"},{url:"/module/storage.html",hash:"eeui-getvariate",title:"eeui.getVariate",content:"获取全局变量"},{url:"/module/storage.html",hash:"eeui-getallvariate",title:"eeui.getAllVariate",content:"获取所有全局变量"},{url:"/module/storage.html",hash:"eeui-clearallvariate",title:"eeui.clearAllVariate",content:"清除所有全局变量"}]},{title:"系统信息",url:"/module/system.html",hash:"",data:[{url:"/module/system.html",hash:"系统信息",title:"系统信息",content:"需要加载的模块"},{url:"/module/system.html",hash:"eeui-getstatusbarheight",title:"eeui.getStatusBarHeight",content:"获取状态栏高度（屏幕像素）"},{url:"/module/system.html",hash:"eeui-getstatusbarheightpx",title:"eeui.getStatusBarHeightPx",content:"获取状态栏高度（px单位）"},{url:"/module/system.html",hash:"eeui-getnavigationbarheight",title:"eeui.getNavigationBarHeight",content:"获取虚拟键盘高度（屏幕像素）"},{url:"/module/system.html",hash:"eeui-getnavigationbarheightpx",title:"eeui.getNavigationBarHeightPx",content:"获取虚拟键盘高度（px单位）"},{url:"/module/system.html",hash:"eeui-compareversion",title:"eeui.compareVersion",content:"比较版本号的大小,前者大则返回一个正数,后者大返回一个负数,相等则返回0"},{url:"/module/system.html",hash:"eeui-getimei",title:"eeui.getImei",content:"获取手机的IMEI（注：Android返回IMEI，iOS返回IFA；<web-view>组件不支持此方法，请使用eeui.getImeiAsync）"},{url:"/module/system.html",hash:"eeui-getimeiasync",title:"eeui.getImeiAsync",content:"获取手机的IMEI（异步方法）"},{url:"/module/system.html",hash:"eeui-getifa",title:"eeui.getIfa",content:"获取手机的IFA（注：Android返回IMEI，iOS返回IFA；<web-view>组件不支持此方法，请使用eeui.getIfaAsync）"},{url:"/module/system.html",hash:"eeui-getifaasync",title:"eeui.getIfaAsync",content:"获取手机的IFA（异步方法）"},{url:"/module/system.html",hash:"eeui-isiphonextype",title:"eeui.isIPhoneXType",content:"判断是否iPhone X系列。（含：X(max)、XS(max)、XR(max)）"}]},{title:"吐司提示",url:"/module/toast.html",hash:"",data:[{url:"/module/toast.html",hash:"吐司提示",title:"吐司提示",content:"需要加载的模块"},{url:"/module/toast.html",hash:"eeui-toast",title:"eeui.toast",content:"吐司(Toast)提示"},{url:"/module/toast.html",hash:"params-参数说明",title:"params 参数说明",content:"属性名 类型 必须 描述 默认值 message String - 提示文本 - gravity String - 提示位置，top、middle、bottom bottom messageColor String - 提示文本颜色代码 #FFFFFF backgroundColor String - 提示背景颜色代码 #FEFFFFFF long Boolean - 是否比较长时间显示 false x Number - x轴偏移像素 0 y Number - y轴偏移像素 0"},{url:"/module/toast.html",hash:"简单示例",title:"简单示例",content:""},{url:"/module/toast.html",hash:"eeui-toastclose",title:"eeui.toastClose",content:"吐司(Toast)隐藏"}]},{title:"版本功能",url:"/module/version.html",hash:"",data:[{url:"/module/version.html",hash:"版本功能",title:"版本功能",content:"需要加载的模块"},{url:"/module/version.html",hash:"eeui-getversion",title:"eeui.getVersion",content:"获取eeui版本号"},{url:"/module/version.html",hash:"eeui-getversionname",title:"eeui.getVersionName",content:"获取eeui版本号名称"},{url:"/module/version.html",hash:"eeui-getlocalversion",title:"eeui.getLocalVersion",content:"获取本地软件版本号"},{url:"/module/version.html",hash:"eeui-getlocalversionname",title:"eeui.getLocalVersionName",content:"获取本地软件版本号名称"},{url:"/module/version.html",hash:"eeui-getsdkversioncode",title:"eeui.getSDKVersionCode",content:"获取设备系统版本号"},{url:"/module/version.html",hash:"eeui-getsdkversionname",title:"eeui.getSDKVersionName",content:"获取设备系统版本名称"},{url:"/module/version.html",hash:"eeui-getupdateid",title:"eeui.getUpdateId",content:"获取已热更新至的数据ID（为0表示没有热更新）"},{url:"/module/version.html",hash:"eeui-checkupdate",title:"eeui.checkUpdate",content:"客户端主动触发热更新事件"}]},{title:"Android插件",url:"/plugin/dev/android.html",hash:"",data:[{url:"/plugin/dev/android.html",hash:"android插件",title:"Android插件",content:"Android插件主要文件说明"},{url:"/plugin/dev/android.html",hash:"unameexampleentry-java",title:"unameExampleEntry.java",content:"App初始化文件，App启动时会运行unameExampleEntry.init(Application)方法"},{url:"/plugin/dev/android.html",hash:"unameexampleappmodule-java",title:"unameExampleAppModule.java",content:"App可以用接口方法，详细可以查看文件内演示的方法。"},{url:"/plugin/dev/android.html",hash:"unameexamplewebmodule-java",title:"unameExampleWebModule.java",content:"web-view组件可以可通过requireModuleJs调用里面的静态方法，调用详见：web-view"}]},{title:"创建插件",url:"/plugin/dev/create.html",hash:"",data:[{url:"/plugin/dev/create.html",hash:"创建插件",title:"创建插件",content:"在项目根目录下运行以下命令创建插件： 例如： 运行看到相关提示表示创建成功。 创建成功后插件对应目录结构为： 重启IDE以后可以看到如下图开发目录： Android 端会看到一个如图名为unameExample的插件  iOS 端会看到一个如图名为unameExample的插件"}]},{title:"iOS插件",url:"/plugin/dev/ios.html",hash:"",data:[{url:"/plugin/dev/ios.html",hash:"ios插件",title:"iOS插件",content:"iOS插件主要文件说明"},{url:"/plugin/dev/ios.html",hash:"unameexampleentry-m",title:"unameExampleEntry.m",content:"iOSAppDelegate方法拓展，如：didFinishLaunchingWithOptions、openURL等。"},{url:"/plugin/dev/ios.html",hash:"unameexampleappmodule-m",title:"unameExampleAppModule.m",content:"App可以用接口方法，详细可以查看文件内演示的方法。"},{url:"/plugin/dev/ios.html",hash:"unameexamplewebmodule-m",title:"unameExampleWebModule.m",content:"web-view组件可以可通过requireModuleJs调用里面的静态方法，调用详见：web-view"}]},{title:"发布插件",url:"/plugin/dev/publish.html",hash:"",data:[{url:"/plugin/dev/publish.html",hash:"发布插件",title:"发布插件",content:"完成开发插件后可通过发布插件共享给其他开发者或自己其他项目使用。"},{url:"/plugin/dev/publish.html",hash:"发布至eeui控制台",title:"发布至EEUI控制台",content:"在项目根目录下运行以下命令发布插件： 首次发布插件系统会要求登录身份，请按提示登录后既可完成发布。 发布成功后可使用命令 eeui plugin install uname/example 安装。 如未注册请登录EEUI.APP控制台 注册账号。 发布成功后可以登录EEUI.APP控制台 管理查看你的插件使用等情况。"},{url:"/plugin/dev/publish.html",hash:"发布至github",title:"发布至GitHub",content:"可直接将插件目录 项目根目录/plugins/uname/example 推送到GitHub后， 可使用命令 eeui plugin install Git仓库路径 安装。 例如： 插件推送到 https://github.com/anonymity/project ， 可使用命令 eeui plugin install anonymity/project 或 eeui plugin install https://github.com/anonymity/project 安装。"}]},{title:"releases",url:"/releases/index.html",hash:"",data:[{url:"/releases/index.html",hash:"releases",title:"releases",content:""}]},{title:"热更新",url:"/update/index.html",hash:"",data:[{url:"/update/index.html",hash:"热更新",title:"热更新",content:""},{url:"/update/index.html",hash:"功能介绍",title:"功能介绍",content:"热更新（修复）可以实现快速版本迭代，快速修复bug。不用发布新的apk或者ipa版本（只要把您改动的页面、config配置、图片上传）既可对你的app进行更新。 TIP 已支持在自己的服务器搭建服务端 （热更新、动态设置启动图等），详阅eeui.config.js配置文件。"},{url:"/update/index.html",hash:"方法一：一键自动更新",title:"方法一：一键自动更新",content:"注：只需要在项目根目录下执行eeui repair命令即可一键自动生成热更新包并上传至控制台。"},{url:"/update/index.html",hash:"方法二：手动添加更新",title:"方法二：手动添加更新",content:""},{url:"/update/index.html",hash:"_1、登录注册",title:"1、登录注册",content:"点击链接进入 EEUI.APP控制台  即可一键注册登录。"},{url:"/update/index.html",hash:"_2、添加应用",title:"2、添加应用",content:"注册登录后进入面板，依次点击左侧APP管理>>APP列表>>添加应用。如下图："},{url:"/update/index.html",hash:"_3、新增热更新",title:"3、新增热更新",content:"点击左侧APP热更新>>添加更新，按需填写上传zip更新包即可。如下图："},{url:"/update/index.html",hash:"_4、zip更新包说明",title:"4、zip更新包说明",content:"TIP 将common/dist/目录下文件按原结构打包成zip压缩包即可。 目录结构示例： zip更新包\n├── components \n├── ......\n└── pages                 \n    ├── ......\n    └── index.js\n目录结构图示："}]},{title:"WXSDKInstace",url:"/weex/api/android-apis.html",hash:"",data:[{url:"/weex/api/android-apis.html",hash:"wxsdkinstace",title:"WXSDKInstace",content:"Weex Native 和 JavaScript 交互通信."},{url:"/weex/api/android-apis.html",hash:"自定义发送事件",title:"自定义发送事件",content:'向JS环境发送一些事件，比如click事件 void fireEvent(elementRef,type)\nvoid fireEvent(elementRef,type, data)\nvoid fireEvent(elementRef,type,data,domChanges)\nelementRef(String)：产生事件的组件id type(String): 事件名称，weex默认事件名称格式为"onXXX",比如OnPullDown data(Map<String, Object>): 需要发送的一些额外数据，比如click时，view大小，点击坐标等等。 domChanges(Map<String, Object>): 目标组件的属性和样式发生的修改内容'},{url:"/weex/api/android-apis.html",hash:"结果回调",title:"结果回调",content:'JS调用时，有的场景需要返回一些数，比如以下例子，返回x、y坐标 public class WXLocation extends WXModule {\n\n      @JSMethod\n      public void getLocation(JSCallback callback){\n      //Get the code for the location information .....\n      Map<String,String> data=new HashMap<>();\n      data.put("x","x");\n      data.put("y","y");\n      //notify once\n      callback.invoke(data);\n      //Continuous connection\n      callback.invokeAndKeepAlive(data);\n      //Invoke method and invokeAndKeepAlive two methods of choice  }\n}'},{url:"/weex/api/android-apis.html",hash:"onwxscrolllistener",title:"OnWXScrollListener",content:"如果想要拿到instance滚动的信息，需要在WXSDKInstance上注册registerOnWXScrollListener ，详细参数见OnWXScrollListener"},{url:"/weex/api/android-apis.html",hash:"其它的一些接口介绍",title:"其它的一些接口介绍",content:""},{url:"/weex/api/android-apis.html",hash:"设置instance显示的大小",title:"设置instance显示的大小",content:"使用mWXSDKInstance.setSize()来改变instance容器显示的大小"},{url:"/weex/api/android-apis.html",hash:"降级",title:"降级",content:'Weex在开发过程中，会不断增加新的feature，但是这些feature可能在老版本上不兼容。这种情况下，native可以在IWXRenderListener的onException中进行判断，如果错误信息是 "|"格式. 并且分割后，"|"前第一个字符串等于1，这时候native可以直接降级到h5页面或者提示用户当前版本不支持。'}]},{title:"API",url:"/weex/api/broadcast-channel.html",hash:"",data:[{url:"/weex/api/broadcast-channel.html",hash:"api",title:"API",content:"BroadcastChannel 是 W3C 规范 中的一部分，其中依赖的 MessageEvent  对象也是。 BroadcastChannel 的构造函数只接受一个参数，那就是“频道名称”（channel name）。 BroadcastChannel 接口的定义如下： name: 监听的频道名称，用来区分不同的频道（跨频道不可通信）。 postMessage: 用于在当前频道中广播消息。 onmessage: 消息事件的处理函数。在频道中接收到广播消息之后，会给所有订阅者派发消息事件。 close: 关闭当前频道。 消息对象（MessageEvent）的类型定义如下："},{url:"/weex/api/broadcast-channel.html",hash:"通信过程",title:"通信过程",content:"就像使用无线电一样，每个页面通过创建一个具有相同频道名称的 BroadcastChannel 对象来加入特定频道。 然后实现 onmessage 接口来监听消息事件。通过调用 BroadcastChannel 对象上的 postMessage() 方法可以在频道中广播一条消息给所有订阅者。 事实上，这是在特定频道的所有用户之间的全双工（双向）通信，每个订阅者都可以在频道中彼此收发任何消息，即使消息的发送者也能收到自己发出的消息事件。不同频道之间的通信过程是不会互相影响的。 调用 BroadcastChannel 对象的 close() 方法可以离开一个频道，这个方法只关闭自己，并不影响其他订阅者。当某个 Weex 页面被销毁时，其中的所有订阅者将在 destroyInstance 中强制关闭。如果某个频道的所有用户都关闭了，这个频道对象将会被销毁，所占内存页能被回收。"},{url:"/weex/api/broadcast-channel.html",hash:"使用范例",title:"使用范例",content:"在页面 A 中： 在页面 B 中： 在页面 C 中： 页面 A 、B 、C 都创建一个监听了 'Avengers' 频道的 BroadcastChannel 对象，它们可以用这个对象实现互相通信。 当 Steve 发布了 'Assemble!' 消息时，Stark 将收到一个消息事件，其 data 字段等于 'Assemble!'，然后也向频道中回复一条消息。但是 Hulk 并不会收到这些消息，因为他没有实现onmessage 方法，相当于没有接收频道中的消息，所以他实际上不是一个订阅者。 注释: Hulk 不会收到他自己发送的消息"},{url:"/weex/api/broadcast-channel.html",hash:"注意事项",title:"注意事项",content:"消息事件中的对象并没有深度复制。（这个特性可能会修改） 在页面 A 中： 在页面 B 中： 在这个例子中，页面 B 中的 event.data.list 实际上是页面 A 中 list 对象的引用。在页面 B 中给列表添加一项 'C'，也将影响到页面 A 中的 list 对象。 相比于深度复制，这个行为可以减少页面中的内存消耗。开发者在使用时不应该存储或修改 event 对象。"}]},{title:"iOS APIs",url:"/weex/api/ios-apis.html",hash:"",data:[{url:"/weex/api/ios-apis.html",hash:"ios-apis",title:"iOS APIs",content:""},{url:"/weex/api/ios-apis.html",hash:"native-对外接口",title:"Native 对外接口",content:"注册 SDK 默认的 Module、Handler 和 Component 注册自定义 module、Handler 和 Component 重置 JSFramework"},{url:"/weex/api/ios-apis.html",hash:"handler-对应于-android-的-adapter-介绍",title:"Handler (对应于 Android 的 Adapter) 介绍",content:"WXImgLoaderDefaultImpl 图片下载 handler。Weex 会把需要设置图片的 View 和 URL 透露出来，Native 端需要实现这个接口进行图片下载。WeexSDK kernel 本身没有提供图片下载的默认实现。 接口定义如下：   @protocol WXImgLoaderProtocol <WXModuleProtocol>\n/**\n  * @abstract Creates a image download handler with a given URL\n  *\n  * @param imageUrl The URL of the image to download\n  *\n  * @param imageFrame  The frame of the image you want to set\n  *\n  * @param options : The options to be used for this download\n  *\n  * @param completedBlock : A block called once the download is completed.\n  *                 image : the image which has been download to local.\n  *                 error : the error which has happened in download.\n  *              finished : a Boolean value indicating whether download action has finished.\n  */\n- (id<WXImageOperationProtocol>)downloadImageWithURL:(NSString *)url imageFrame:(CGRect)imageFrame userInfo:(NSDictionary *)options completed:(void(^)(UIImage *image,  NSError *error, BOOL finished))completedBlock;\n@end"},{url:"/weex/api/ios-apis.html",hash:"native-和-js-通信",title:"Native 和 JS 通信",content:"自定义通知事件 用于 native 自定义部分和 js 进行实践通知，比如传递下拉事件到 js，这个是在 component 基类的方法，可以直接使用 /**\n  * @abstract Fire an event to the component and tell Javascript which value has been changed.\n  * @param eventName 事件名称，可以在weex文件某个标签组件监听，命名规范为 onXXX\n  * @param params 数据\n  * @param domChanges 发生改变的数据\n  **/\n- (void)fireEvent:(NSString *)eventName params:(NSDictionary *)params domChanges:(NSDictionary *)domChanges\n 事件回调 多用于 Module 回调结果给 js，回调类型分为下面两种： WXModuleCallback 为了性能考虑，该回调只能回调通知js一次，之后会被释放，多用于一次结果 WXModuleKeepAliveCallback 该回调可以设置是否为多次回调类型，多次回调的场景如持续监听位置的变化，并返回给 js。 @implementation WXEchoModule\n@synthesize weexInstance; // 让该module 获得当前instance\nWX_EXPORT_METHOD(@selector(echo:))\n- (void)echo:(NSString *)param callback:(WXModuleKeepAliveCallback)callback\n{\n  callback(param,ture);// 此处设置true，该回调function 可以多次回调执行，可以写循环测试.\n}"},{url:"/weex/api/ios-apis.html",hash:"动态适配容器",title:"动态适配容器",content:"WeexSDK 在 WXSDKInstance 类中提供了方法 setFrame(CGRect) 来改变容器的大小。 如：在导航栏从有到无过程，需要 weexView 的变化， 可以在此时 native 调用该方法设置"},{url:"/weex/api/ios-apis.html",hash:"降级使用",title:"降级使用",content:"Weex 处于发展阶段会增加一些新的特性和功能，但是这些新的特性和功能都必须升级 SDK 才能实现，对于没有升级的应用应该怎么处理呢？可以使用降级功能。 所谓降级功能就是 Weex 无法运行的版本或者手机，可以用 Weex h5 来代替。 Native 端可以通过接口 WXSDKInstance 中的 onFailed 回调进行处理，如果是主动降级则返回的错误 domain 为 TemplateErrorType，Native 端可以跳转到对应的 H5 页面，或者用其他的方式提示用户当前环境不支持 Weex。"}]},{title:"概述",url:"/weex/api/js-service.html",hash:"",data:[{url:"/weex/api/js-service.html",hash:"概述",title:"概述",content:"v0.9.5+ JSService 和 Weex 实例在 JS Runtime 中并行运行。Weex 实例的生命周期可调用 JSService 生命周期。目前提供创建、刷新、销毁生命周期。 重要提醒: JSService 使用不当会导致内存增高或全局污染！"},{url:"/weex/api/js-service.html",hash:"注册",title:"注册",content:""},{url:"/weex/api/js-service.html",hash:"ios",title:"iOS",content:'[WXSDKEngine registerService:@"SERVICE_NAME" withScript: @"SERVICE_JS_CODE" withOptions: @{}];\n// or\n[WXSDKEngine registerService:@"SERVICE_NAME" serviceScriptUrl: @"SERVICE_JS_URL" withOptions: @{}];'},{url:"/weex/api/js-service.html",hash:"android",title:"Android",content:"params of options Could have { create, refresh, destroy } lifecycle methods. In create method it should  return an object of what variables or classes would be injected into the Weex instance."},{url:"/weex/api/js-service.html",hash:"web",title:"Web",content:""},{url:"/weex/api/js-service.html",hash:"样例",title:"样例",content:"Use JSService"}]},{title:"属性和方法",url:"/weex/api/weex-variable.html",hash:"",data:[{url:"/weex/api/weex-variable.html",hash:"属性和方法",title:"属性和方法",content:"Weex 实例变量的类型定义如下："},{url:"/weex/api/weex-variable.html",hash:"config",title:"config",content:'该变量包含了当前 Weex 页面的所有环境信息。 bundleUrl: 当前页面 js bundle 的 URL 地址。 bundleType: v0.17+ 页面 js bundle 的类型，它表示的是当前页面是用那种框架开发的，可以是 "Vue" 或者 "Rax"。 env: Weex 环境变量。'},{url:"/weex/api/weex-variable.html",hash:"weex-环境变量",title:"Weex 环境变量",content:'有时候为了兼容性或者为了增强某个端上的能力，需要编写平台特异的代码。 Weex 提供了 weex.config.env 和全局的 WXEnvironment 变量（它们是等价的）来获取当前执行环境的信息。 Weex 环境变量中的字段: 字段名 类型 描述 platform String Current running platform, could be "Android", "iOS" or "Web". weexVersion String The version of Weex SDK. appName String Mobile app name or browser name. appVersion String The version of current app. osName String The OS name, could be "Android" or "iOS". osVersion String The version of current OS. deviceModel String Mobile phone device model. (native only) deviceWidth Number Screen resolution width. deviceHeight Number Screen resolution height. 这个例子  打印出了 Weex 环境对象中的所有值。'},{url:"/weex/api/weex-variable.html",hash:"document",title:"document",content:"weex.document 是当前页面的文档模型对象，可以用来创建和操作 DOM 树中元素。它是 Weex DOM API 规范的一部分，但是它和 W3C 的 DOM 规范 中的 document 对象是不同的。 而且，在使用了现代化的前端框架（如 Vue 和 Rax）的情况下，直接操作 DOM 并不是最佳实践。更何况在 Weex 平台里并不一定有真实的 DOM，在 Android 和 iOS 端上都是模拟出来的。 这个接口主要是用在 Vue 和 Rax 框架内部，用于将 virtual-dom 转换成渲染执行，并且发送给 Weex 客户端的渲染引擎。不建议在开发页面时使用。"},{url:"/weex/api/weex-variable.html",hash:"requiremodule",title:"requireModule",content:"对于那些不依赖 UI 交互的原生功能，Weex 将其封装成模块，这是一种通过 javascript 调用原生能力的方法。除了内置模块以外，将已有的原生模块移植到 Weex 平台也很方便。你可以使用 app.requireModule 接口引用自定义的或者内置的模块。 参数： 大小写敏感的模块名。 返回值： 如果模块已经注册了，返回一个 Proxy 对象（如果环境不支持 Proxy 则返回一个普通对象），可以使用这个对象调用客户端注册的方法。 如果模块未注册，返回 undefined。"},{url:"/weex/api/weex-variable.html",hash:"使用原生模块",title:"使用原生模块",content:"你可以像使用不同 javascript 函数一样使用原生注册的接口。这里是一个简单的使用 modal 模块的例子 ："},{url:"/weex/api/weex-variable.html",hash:"supports",title:"supports",content:'这个接口只在 v0.15+ 或以上的版本可用。 你应该了解 Weex 的组件和模块都是可以注册和配置的，这样导致了在不同环境中组件和模块的支持情况不一样。你可以使用 weex.supports 接口在运行期检测某个功能在当前环境中是否可用。 参数： 特定格式的字符串：@{type}/{name}。 type 必须是 "component" 和 "module" 之一。name 可以是标签名、模块名，也可以指定模块中的某个方法名（和模块名用 . 隔开）。 返回值： 支持该特性，则返回 true。 不支持该特性，则返回 false。 参数格式错误或无法确定是否支持，则返回 null。'},{url:"/weex/api/weex-variable.html",hash:"使用范例",title:"使用范例",content:"检测某个组件是否可用： 检测某个模块是否可用： 检测某个模块是否包含某个方法： 无效的输入："},{url:"/weex/api/weex-variable.html",hash:"isregisteredmodule",title:"isRegisteredModule",content:"检测某个特定的模块或者接口是否可用。 这个接口只能用于检测特定模块和方法的兼容性，不支持检测组件。"},{url:"/weex/api/weex-variable.html",hash:"isregisteredcomponent",title:"isRegisteredComponent",content:"检测某个特定的组件是否可用。 这个接口只能用于检测组件的兼容性，不支持检测模块。"}]},{title:"<a>",url:"/weex/components/a.html",hash:"",data:[{url:"/weex/components/a.html",hash:"a",title:"<a>",content:""},{url:"/weex/components/a.html",hash:"简介",title:"简介",content:'<a> 组件用于实现页面间的跳转。 TIP 不可以在标签内部直接添加文本，需要使用 <text> 标签来显示文本。 <a href="http://dotwe.org/raw/dist/a5e3760925ac3b9d68a3aa0cc0298857.bundle.wx">\n  <text>Jump</text>\n</a>'},{url:"/weex/components/a.html",hash:"属性",title:"属性",content:"href string. 待跳转的页面 URL，待跳转页面需要是一个 App 页面，否则会是一个未定义行为。"},{url:"/weex/components/a.html",hash:"样式",title:"样式",content:"通用样式. 参见通用样式"},{url:"/weex/components/a.html",hash:"事件",title:"事件",content:"通用事件. 参见通用事件 TIP click 事件的回调函数和 href 跳转的执行顺序未被定义，不要使用 click 来进行 href 跳转前的逻辑处理。"},{url:"/weex/components/a.html",hash:"示例",title:"示例",content:'<a href="http://emas-ha-remote-log-poc.oss-cn-beijing.aliyuncs.com/eweex/app/biz-docs-com-mod/upload/271ccdca-db41-423d-981c-c7c6751ba479/show_1.js">\n  <text>主会场</text>\n</a> \n示例'}]},{title:"<cell>",url:"/weex/components/cell.html",hash:"",data:[{url:"/weex/components/cell.html",hash:"cell",title:"<cell>",content:""},{url:"/weex/components/cell.html",hash:"简介",title:"简介",content:"Cell 必须以一级子组件的形式存在于 list recycler waterfall 中。"},{url:"/weex/components/cell.html",hash:"子组件",title:"子组件",content:"Cell 支持添加任意类型的组件作为自己的子组件，但是请不要再内部添加滚动容器了。"},{url:"/weex/components/cell.html",hash:"属性",title:"属性",content:"keep-scroll-position boolean. 控制当 Cell 被添加到列表中时，列表的滚动位置是否要保持不变。 insert-animation string, cell 的插入动画。当前只支持 none 和 default。 delete-animation string, cell 的删除动画。当前只支持 none 和 default。 recycle boolean,  默认值 true。这个属性控制这个 Cell 的 view 和子 views 是否在列表滚动时进行回收，在 iOS 上通常必须指定为 true （因为默认为 true，所以一般不需要写这个属性），如果设置为 false，列表滚动时，页面会占用非常高的内存。Android上默认是true，设置为false可以防止Image和Text上数据重新绑定。"},{url:"/weex/components/cell.html",hash:"样式",title:"样式",content:"通用样式. 参见通用样式 TIP 不要指定 <cell> 的 flex 值。Cell 的宽度是由它的父容器决定的，你也不需要指定它的高度。 Cell 的排版的位置是由父容器控制的，所以一般不要为其指定 margin 样式。"},{url:"/weex/components/cell.html",hash:"事件",title:"事件",content:"通用事件. 参见通用事件"},{url:"/weex/components/cell.html",hash:"示例",title:"示例",content:"Cell 的例子请参考 list waterfall"}]},{title:"<div>",url:"/weex/components/div.html",hash:"",data:[{url:"/weex/components/div.html",hash:"div",title:"<div>",content:""},{url:"/weex/components/div.html",hash:"简介",title:"简介",content:"<div> 是通用容器。 TIP 不要在 <div> 中直接添加文本，而要使用 <text> 组件。 在 Weex 中，<div> 不可滚动。 要控制 <div> 的层级，建议不要超过14层，否则会很影响页面性能。"},{url:"/weex/components/div.html",hash:"子组件",title:"子组件",content:"<div> 支持各种类型的子元素，包括 <div> 自己。"},{url:"/weex/components/div.html",hash:"样式",title:"样式",content:"通用样式 支持所有通用样式。"},{url:"/weex/components/div.html",hash:"事件",title:"事件",content:"通用事件 支持所有通用事件。"}]},{title:"<image>",url:"/weex/components/image.html",hash:"",data:[{url:"/weex/components/image.html",hash:"image",title:"<image>",content:""},{url:"/weex/components/image.html",hash:"简介",title:"简介",content:"<image> 用于在界面中显示单个图片。 TIP 在代码中请使用 <image> 标签, <img> 的存在只是因为兼容性原因，在将来的版本中可能删除。 Weex 没有内置的图片库，因为一些开源项目如 SDWebImage  和Picasso 已经能很好的解决这个问题， 所以在使用 <image> 之前，请在 native 侧先接入相应的 adapter 或者 handler。参见: Android adapter 和 iOS handler。 <image> 必须指定样式中的宽度和高度。 <image> 不支持内嵌子组件。"},{url:"/weex/components/image.html",hash:"基本用法",title:"基本用法",content:"参见示例 。"},{url:"/weex/components/image.html",hash:"子组件",title:"子组件",content:"<image>不支持子组件。"},{url:"/weex/components/image.html",hash:"样式",title:"样式",content:"支持**通用样式**。 WARNING width, height 和 src必须被提供，否则图片无法渲染。"},{url:"/weex/components/image.html",hash:"属性",title:"属性",content:"属性名 类型 值 默认值 placeholder String {URL / Base64} - resize String cover / contain / stretch stretch src String {URL / Base64 } - quality String original/normal/low/high/auto - autoBitmapRecycle Android Boolean {true / false } true TIP 您可以指定一个相对 bundle URL 的相对路径【可使用 root:// 表示 src 目录，如：src 目录下的 images 文件夹: root://images/tupian.jpg】，相对路径将被重写为绝对资源路径(本地或远程)。 quality 属性被 WeexSDK 解析但不处理，该参数会直接传给接入的图片下载库，由图片库决定下载什么图片。 当接入的外置图片库支持 quality 属性时，resize 有可能不能按照预期工作，这是因为图片被下载库剪裁了。可以通过指定 \"quality='original'\" 解决问题。"},{url:"/weex/components/image.html",hash:"placeholder",title:"placeholder",content:"占位图的 URL，在图片下载过程中将展示占位图，\b图片下载完成后将显示src中指定的图片。 (示例 )"},{url:"/weex/components/image.html",hash:"resize",title:"resize",content:"contain：缩放图片以完全装入<image>区域，可能背景区部分空白。 (示例 ) cover：缩放图片以完全覆盖<image>区域，可能图片部分看不见。 (示例 ) stretch：默认值. 按照<image>区域的宽高比例缩放图片。(示例 ) resize属性和background-size 的理念很相似。"},{url:"/weex/components/image.html",hash:"src",title:"src",content:"要显示图片的 URL，该属性是 <image> 组件的强制属性。"},{url:"/weex/components/image.html",hash:"支持的图片格式",title:"支持的图片格式",content:"Weex没有提供必须支持的图片格式列表，主要依赖于你正在使用的图片 adapter 或者 handler。例如，如果你使用 SDWebImage  作为iOS上的图片 handler，你可以使用像 JPEG、PNG、GIF、WebP 等图片格式。 DANGER Android 默认的Image Adapter不支持 gif。"},{url:"/weex/components/image.html",hash:"autobitmaprecycle",title:"autoBitmapRecycle",content:"一个布尔标志位控制当图片滚出屏幕时是否回收相关内存。 true 当图片不可见时回收图片内存 false 当图片不可见时不回收图片内存，这样做会占用更高的内存，但是会提供更好的用户体验。 默认值是true"},{url:"/weex/components/image.html",hash:"组件方法",title:"组件方法",content:""},{url:"/weex/components/image.html",hash:"save-v0-16-0",title:"save v0.16.0+",content:"保存图片内容到本地文件或相册，此操作可能需要设备相关权限。 参数: callback：{Function} 在图片被写入到本地文件或相册后的回调，回调参数：\nresult：{Object} 回调结果对象，属性列表：\nsuccess：{Boolean} 标记图片是否已写入完成。 errorDesc：{String} 如果图像没有成功写入，该字符串包含了详细的错误描述。 返回值: null WARNING 你必须加入NSPhotoLibraryAddUsageDescription 和 NSPhotoLibraryAddUsageDescription (iOS 11) 以获得访问 iOS 系统相册权限. 参见: Cocoa Keys"},{url:"/weex/components/image.html",hash:"使用-save-方法",title:"使用 save 方法",content:"在 <image>标签上增加 ref 属性 (Vue.js Child Component Refs ) ： 获取组件引用并使用 save 方法: 参见 完整例子 ."},{url:"/weex/components/image.html",hash:"事件",title:"事件",content:"通用事件. 参见通用事件"},{url:"/weex/components/image.html",hash:"load",title:"load",content:"当加载完成 src 指定的图片时，load事件将被触发。 事件对象: success: {Boolean} 标记图片是否成功加载。 size: {Object} 加载的图片大小对象，属性列表： naturalWidth: {Number} 图片宽度，如果图片加载失败则为0。 naturalHeight: {Number} 图片高度，如果图片加载失败则为0。"},{url:"/weex/components/image.html",hash:"处理-load-事件",title:"处理 load 事件",content:"在 <image> 标签上绑定 load 事件： 增加事件处理函数： 参见完整示例 。"},{url:"/weex/components/image.html",hash:"示例",title:"示例",content:"Base64 示例  Lazy load image 示例"}]},{title:"<indicator>",url:"/weex/components/indicator.html",hash:"",data:[{url:"/weex/components/indicator.html",hash:"indicator",title:"<indicator>",content:""},{url:"/weex/components/indicator.html",hash:"简介",title:"简介",content:"indicator 只能在 slider 中使用。"},{url:"/weex/components/indicator.html",hash:"子组件",title:"子组件",content:"不可添加任何子元素。"},{url:"/weex/components/indicator.html",hash:"属性",title:"属性",content:"无扩展属性"},{url:"/weex/components/indicator.html",hash:"样式",title:"样式",content:"item-color, color. 指示点默认颜色（未选中态）。 item-selected-color, color. 指示点选中颜色。 item-size, number. 指示点半径。"},{url:"/weex/components/indicator.html",hash:"事件",title:"事件",content:"无事件"},{url:"/weex/components/indicator.html",hash:"示例",title:"示例",content:"请参考 slider"}]},{title:"<input>",url:"/weex/components/input.html",hash:"",data:[{url:"/weex/components/input.html",hash:"input",title:"<input>",content:""},{url:"/weex/components/input.html",hash:"简介",title:"简介",content:"Weex 内置的 <input> 组件用来创建接收用户输入字符的输入组件。 <input> 组件的工作方式因 type 属性的值而异，比如 text， password，url，email，tel 等。 注意 此组件不支持 click 事件。请监听 input 或 change 来代替 click 事件。"},{url:"/weex/components/input.html",hash:"子组件",title:"子组件",content:"<input> 不支持子组件。"},{url:"/weex/components/input.html",hash:"属性",title:"属性",content:"key 类型 描述 默认值 备注 type string 控件的类型 text type 值可以是 text，date，datetime，email， password，tel，time，url，number 。每个 type 值都符合 W3C 标准。 其中，date 和 time 会使用系统默认组件（Android + IOS）查看示例  value string 组件的默认内容   placeholder string 提示用户可以输入什么。 提示文本不能有回车或换行   autofocus boolean 布尔类型的数据，表示是否在页面加载时控件自动获得输入焦点   maxlength nubmer 一个数值类型的值，表示输入的最大长度   return-key-type string 键盘返回键的类型（即手机输入法右下角回车按钮的地方）  支持 defalut;go;next;search;send,done  查看示例  singleline boolean 控制内容是否只允许单行 true  max-length number 控制输入内容的最大长度  字符串长度，即中英文字符长度都为 1 max string 控制当 type 属性为 date 时选择日期的最大时间，格式为 yyyy-MM-dd   min string 控制当 type 属性为 date 时选择日期的最小时间，格式为 yyyy-MM-dd   upriseOffset v0.21+ & iOS number 当键盘弹起可能盖住输入框时，页面整体会上移。这个属性指定键盘上边缘与输入框下边缘的间隙。使用 iOS 系统坐标，默认是 20。 20  hideDoneButton iOS number 隐藏键盘上面的完成栏 false"},{url:"/weex/components/input.html",hash:"样式",title:"样式",content:""},{url:"/weex/components/input.html",hash:"placeholder-color-color",title:"placeholder-color {color}",content:"placeholder 字符颜色。默认值是 #999999"},{url:"/weex/components/input.html",hash:"伪类",title:"伪类",content:"支持： :active :focus :disabled :enabled"},{url:"/weex/components/input.html",hash:"通用样式",title:"通用样式",content:"支持所有通用样式 盒模型 flexbox 布局 position opacity background-color 查看 组件通用样式"},{url:"/weex/components/input.html",hash:"事件",title:"事件",content:'通用事件 支持所有通用事件。 input. 当输入状态时，会不断触发。\n@param value: 当前文本。 change. 当用户完成了输入时触发。\n@param value: 当前文本。 focus. 当输入框获得焦点时触发。 blur. 当输入框失去焦点时触发。 return. 当用户点击了“回车”按钮时触发，会返回此时“回车”按钮的动作类型。\n@param value: 当前文本。 @param returnKeyType, "default" | "go" | "next" | "search" | "send" | "done". keyboard. 当键盘弹起或收起时触发。\n@param isShow: boolean, 显示或隐藏键盘。 @param keyboardSize: 键盘的尺寸，以前端使用的样式单位返回。'},{url:"/weex/components/input.html",hash:"组件方法",title:"组件方法",content:""},{url:"/weex/components/input.html",hash:"focus",title:"focus() 0.8+",content:"将 input 组件聚焦。"},{url:"/weex/components/input.html",hash:"blur",title:"blur() 0.9+",content:"从 input 组件中移除焦点并关闭软键盘（如果它具有焦点）。"},{url:"/weex/components/input.html",hash:"setselectionrange-selectionstart-selectionend",title:"setSelectionRange(selectionStart, selectionEnd) 0.11+only support android & ios",content:"设置文本选区 key 类型 描述 selectionStart number 设置文本选区的起始点 selectionEnd number 设置文本选区的起终点"},{url:"/weex/components/input.html",hash:"getselectionrange-function-params",title:"getSelectionRange(function(params){}) 0.11+only support android & ios",content:"获取文本选区 key 类型 描述 params.selectionStart number 文本选区的起始点 params.selectionEnd number 文本选区的起终点"},{url:"/weex/components/input.html",hash:"settextformatter-params",title:"setTextFormatter(params) 0.18+only support android & ios",content:"这是一个非常有用的特性，可以对 input 设置一组对输入的内容进行实时格式化的规则 key 类型 描述 params.formatRule regexp 格式化匹配的正则表达式 params.formatReplace regexp 格式化匹配后用于替换的内容 params.recoverRule regexp 从格式化后的内容还原原始内容的正则表达式 params.recoverReplace regexp 还原原始内容时用于替换的内容 详细用法参照 示例(手机扫码查看)  约束 目前不支持 this.$el(id).value = '' 这种方式改写 input value。只支持在 <input> 组件的 input、change 事件中改写。"},{url:"/weex/components/input.html",hash:"示例",title:"示例",content:"date + time 示例(手机扫码查看)  return-key-type 示例(手机扫码查看)  setTextFormatter 示例(手机扫码查看)  其他示例集合"}]},{title:"<list>",url:"/weex/components/list.html",hash:"",data:[{url:"/weex/components/list.html",hash:"list",title:"<list>",content:""},{url:"/weex/components/list.html",hash:"简介",title:"简介",content:"<list> 组件是提供垂直列表功能的核心组件，拥有平滑的滚动和高效的内存管理，非常适合用于长列表的展示。最简单的使用方法是在 <list> 标签内使用一组由简单数组循环生成的 <cell> 标签填充。  <template>\n  <list>\n    <cell v-for=\"num in lists\">\n      <text>{{num}}</text>\n    </cell>\n  </list>\n</template>\n\n<script>\n  export default {\n    data () {\n      return {\n        lists: ['A', 'B', 'C', 'D', 'E']\n      }\n    }\n  }\n<\/script>\n注意 不允许相同方向的 <list> 或者 <scroller> 互相嵌套，换句话说就是嵌套的 <list> / <scroller> 必须是不同的方向。 <list> 需要显式的设置其宽高，可使用 position: absolute; 定位或 width、height 设置其宽高值。"},{url:"/weex/components/list.html",hash:"子组件",title:"子组件",content:"<list> 的子组件只能包括以下四种组件或是 fix 定位的组件，其他形式的组件将不能被正确渲染。 <cell>\n用于定义列表中的子列表项，类似于 HTML 中的 ul 之于 li。Weex 会对 <cell> 进行高效的内存回收以达到更好的性能。 <header>\n当 <header> 到达屏幕顶部时，吸附在屏幕顶部。 <refresh>\n用于给列表添加下拉刷新的功能。 <loading> <loading> 用法与特性和 <refresh> 类似，用于给列表添加上拉加载更多的功能。"},{url:"/weex/components/list.html",hash:"属性",title:"属性",content:"属性名 说明 类型 默认值 show-scrollbar 控制是否出现滚动条 boolean true loadmoreoffset 触发 loadmore 事件所需要的垂直偏移距离（设备屏幕底部与 list 底部之间的距离），建议手动设置此值，设置大于0的值即可 number 0 offset-accuracy 控制 onscroll 事件触发的频率：表示两次onscroll事件之间列表至少滚动了10px。注意，将该值设置为较小的数值会提高滚动事件采样的精度，但同时也会降低页面的性能 number 10 pagingEnabled 是否按分页模式线上List，默认值falsev0.20+ boolean true/false scrollable 是否运行List关系 boolean true/false loadmoreoffset 示意图："},{url:"/weex/components/list.html",hash:"事件",title:"事件",content:"loadmore 事件\n如果列表滚动到底部将会立即触发这个事件，你可以在这个事件的处理函数中加载下一页的列表项。 如果未触发，请检查是否设置了loadmoreoffset的值，建议此值设置大于0 scroll 事件\n列表发生滚动时将会触发该事件，事件的默认抽样率为 10px，即列表每滚动 10px 触发一次，可通过属性 offset-accuracy 设置抽样率。 事件中的 event 对象属性： contentSize {Object}：列表的内容尺寸\nwidth {number}：列表内容宽度 height {number}：列表内容高度 contentOffset {Object}：列表的偏移尺寸\nx {number}：x轴上的偏移量 y {number}：y轴上的偏移量"},{url:"/weex/components/list.html",hash:"扩展",title:"扩展",content:""},{url:"/weex/components/list.html",hash:"scrolltoelement-node-options",title:"scrollToElement(node, options)",content:"滚动到列表某个指定项是常见需求，<list> 拓展了该功能，可通过 dom.scrollToElement() 滚动到指定 <cell>。更多信息可参考 dom module。\n相应的 demo 可参考 <scroller> 示例 中的实现。"},{url:"/weex/components/list.html",hash:"示例",title:"示例",content:"简单示例  滑动加载  头部示例  cell appear事件"}]},{title:"<loading>",url:"/weex/components/loading.html",hash:"",data:[{url:"/weex/components/loading.html",hash:"loading",title:"<loading>",content:""},{url:"/weex/components/loading.html",hash:"简介",title:"简介",content:'<loading> 为容器提供上拉加载功能。 注意 <loading> 是 <scroller>、<list>、<waterfall> 的子组件，只能在被它们包含时才能被正确渲染。  <scroller>\n  <div v-for="num in lists">\n    <text>{{num}}</text>\n  </div>\n  <loading>\n    <text>Loading</text>\n  </loading>\n</scroller>'},{url:"/weex/components/loading.html",hash:"子组件",title:"子组件",content:"诸如 <text>、<image> 之类的任何组件，都可以放到 <loading> 进行渲染。 特殊子组件 <loading-indicator>: 只能作为 <refresh> 和 <loading> 的子组件使用，拥有默认的动画效果实现。 <loading>\n  <text>Loading</text>\n  <loading-indicator></loading-indicator>\n</loading>"},{url:"/weex/components/loading.html",hash:"属性",title:"属性",content:'display\n控制 <loading> 组件显示、隐藏。display 的设置必须成对出现，即设置 display="show",必须有对应的 display="hide"。可选值为 show / hide，默认值为 show。'},{url:"/weex/components/loading.html",hash:"事件",title:"事件",content:"loading 事件：当 <scroller>、<list>、<waterfall> 被上拉完成时触发。"},{url:"/weex/components/loading.html",hash:"示例",title:"示例",content:"基本用法"}]},{title:"<recycle-list> v0.18+",url:"/weex/components/recycle-list.html",hash:"",data:[{url:"/weex/components/recycle-list.html",hash:"recycle-list",title:"<recycle-list> v0.18+",content:""},{url:"/weex/components/recycle-list.html",hash:"简介",title:"简介",content:"<recycle-list> 是一个新的列表容器，具有回收和复用的能力，可以大幅优化内存占用和渲染性能。 设计思路请参考 Design.md ，具体的实现细节请参考 Implementation.md  该功能部分依赖于编译工具，请确保 weex-loader 的版本升级到最新（v0.7.2+） 使用最新版的 playground app（SDK 版本 0.18.0 及以上）才可以扫码查看原生效果，也可以直接使用dotwe查看Web预览效果"},{url:"/weex/components/recycle-list.html",hash:"子组件",title:"子组件",content:"<recycle-list> 只能使用 <cell-slot> 作为其直接子节点，使用其他节点无效。"},{url:"/weex/components/recycle-list.html",hash:"cell-slot",title:"<cell-slot>",content:"<cell-slot> 代表的是列表每一项的模板，它只用来描述模板的结构，并不对应实际的节点。<cell-slot> 的个数只表示模板的种类数，真实列表项的个数是由数据决定的。 属性说明 case声明了当前模板的类型，只有和数据中的类型与当前类型匹配时才会渲染，语义和编程语言里的 case 一致。所有模板中最多只会匹配到一项，按照模板的顺序从上到下匹配，一旦匹配成功就不在继续匹配下一个。 default表示当前模板为默认模板类型，不需要指定值。如果数据项没有匹配到任何 case 类型，则渲染带有 default 模板。如果存在多个 default，则只会使用第一个默认模板。 key可选属性，用于指定列表数据中可以作为唯一标识的键值，可以优化渲染性能。\n- warning 属性的省略\n  - 如果没写 `switch`，无论有没有写 `case` 或 `default`，都只使用第一个模板\n  - 在写了 `switch` 的情况下，`case` 和 `default` 必须写一个，否则该模板将会被忽略"},{url:"/weex/components/recycle-list.html",hash:"属性",title:"属性",content:"for\n在 <recycle-list> 添加 for 属性即可描述如何循环展开列表的数据，语法和 Vue 的 v-for 指令类似，但是它循环的是自己内部的子节点，并不是当前节点。写法：\nalias in expression (alias, index) in expression switch\n在 <recycle-list> 添加 switch 属性可以用来指定数据中用于区分子模板类型的字段名，语义和编程语言里的 switch 一致，配合 <cell-slot> 中的 case 和 default 属性一起使用。如果省略了 switch 属性，则只会将第一个 <cell-slot> 视为模板，多余的模板将会被忽略。"},{url:"/weex/components/recycle-list.html",hash:"可复用的组件",title:"可复用的组件",content:"在 <recycle-list> 中使用的子组件也将被视为模板，在开发组件时给 <template> 标签添加 recyclable 属性，才可以用在 <recycle-list> 中。  <template recyclable>\n  <div>\n    <text>...</text>\n  </div>\n</template>\n<script>\n  // ...\n<\/script>\n添加了 recyclable 属性并不会影响组件本身的功能，它仍然可以用在其他正常的组件里。"},{url:"/weex/components/recycle-list.html",hash:"注意事项",title:"注意事项",content:""},{url:"/weex/components/recycle-list.html",hash:"属性和文本的绑定",title:"属性和文本的绑定",content:"绑定属性或者文本时，仅支持表达式，不支持函数调用，也不支持使用 filter，可以参考 Implementation.md#支持的表达式 。 例如，下列写法不可用： 针对这种场景，推荐使用 computed  属性来实现。\n因为模板的取值是由客户端实现的，而函数的定义在前端（filter 可以认为是在模板里调用函数的语法糖），如果每次取值都走一次通信的话，会大幅降低渲染性能。"},{url:"/weex/components/recycle-list.html",hash:"slot-不可用",title:"<slot>不可用",content:"<cell-slot> 的功能和 <slot> 有部分重叠，而且更为激进，在概念上有冲突，存在很多边界情况无法完全支持。不要在 <cell-slot> 及其子组件里使用 <slot>。"},{url:"/weex/components/recycle-list.html",hash:"v-once-不会优化渲染性能",title:"v-once 不会优化渲染性能",content:"和前端框架中的理解不同，客户端里要实现复用的逻辑，会标记模板节点的状态，添加了 v-once 能保证节点只渲染一次，但是并不一定能优化渲染性能，反而可能会拖慢客户端复用节点时的比对效率。"},{url:"/weex/components/recycle-list.html",hash:"样式功能的限制",title:"样式功能的限制",content:"计划支持。目前版本里还不支持绑定样式类名（v-bind:class），原因和进展可以参考 #14 。"},{url:"/weex/components/recycle-list.html",hash:"双向绑定",title:"双向绑定",content:"计划支持。v-model 还未调通，暂时不要使用。"},{url:"/weex/components/recycle-list.html",hash:"子组件的限制",title:"子组件的限制",content:"没有 Virtual DOM！\n使用在 <recycle-list> 中的组件没有 Virtual DOM！与 Virtual DOM 相关的功能也不支持。在开发过程中尽量只处理数据，不要操作生成后的节点。 下列这些属性都不再有意义，请不要使用： vm.$el vm.$refs.xxx vm.$vnode vm.#slots vm.#scopedSlots vm.$refs 里的值可能是数组、子组件的实例、DOM 元素，在前端里比较常用，如果不支持，对 Weex 里的 dom 模块和 animation 模块的功能也有影响。 目前正在讨论技术方案，部分接口可能会重新设计，或者是在 vm 上透出专为 <recycle-list> 设计的接口。 组件的属性\n目前子组件的属性不支持函数。（正在讨论实现方案） 因为子组件的属性值需要在前端和客户端之间传递，所以仅支持可序列化的值。item.xxx 的类型可以是对象、数组、字符串、数字、布尔值等，不支持函数。 生命周期的行为差异\n由于列表的渲染存在回收机制，节点渲染与否也与用户的滚动行为有关，组件的生命周期行为会有一些不一致。 可回收长列表不会立即渲染所有节点，只有即将滚动到可视区域（以及可滚动的安全区域）内时才开始渲染，组件生命周期的语义没变，但是会延迟触发。 假设有 100 条数据，一条数据了对应一个组件。渲染首屏时只能展示 8 条数据的节点，那就只有前 8 个组件被创建了，也只有前 8 个组件的生命周期被触发。 组件的 beforeCreate 和 created 也只有在组件即将创建和创建完成时才会触发 同理，组件的 beforeMount 和 mounted 也只有页面真正渲染到了该组件，在即将挂载和已经挂载时才会触发 组件的自定义事件 计划支持。vm.$on, vm.$once, vm.$emit, vm.$off 等功能还未完全调通，接口可用，但是行为可能有些差异（参数丢失），暂时不要使用。"},{url:"/weex/components/recycle-list.html",hash:"示例",title:"示例",content:"如果有如下数据： 则会生成如下等价节点： 如果将模板合并成一个，也可以省略 switch 和 case，将例子进一步简化： 更多示例： 模板语法 绑定文本 （普通list ） 绑定属性 v-bind （普通list ） 循环 v-for （普通list ） 多层循环 （普通list ） 条件渲染 v-if/v-else/v-else-if （普通list ） 绑定事件 v-on （普通list ） 一次性渲染 v-once （普通list ） 绑定样式 （普通list ） loadmore （普通list ） 复杂压测例子 （普通list ） 无限列表 （普通list ） 使用子组件 纯静态子组件 （普通list ） 无状态，有 props （普通list ） props 更新 （普通list ） 有内部状态 （普通list ） computed & watch （普通list ） 移除组件 （普通list ）"}]},{title:"<refresh>",url:"/weex/components/refresh.html",hash:"",data:[{url:"/weex/components/refresh.html",hash:"refresh",title:"<refresh>",content:""},{url:"/weex/components/refresh.html",hash:"简介",title:"简介",content:'<refresh> 为容器提供下拉刷新功能。 注意 <refresh> 是 <scroller>、<list>、<waterfall> 的子组件，只能在被它们包含时才能被正确渲染。  <scroller>\n  <refresh>\n    <text>Refreshing...</text>\n  </refresh>\n  <div v-for="num in lists">\n    <text>{{num}}</text>\n  </div>\n</scroller>'},{url:"/weex/components/refresh.html",hash:"子组件",title:"子组件",content:"诸如 <text>、<image> 之类的任何组件，都可以放到 <loading> 进行渲染。 特殊子组件 <loading-indicator>: 只能作为 <refresh> 和 <loading> 的子组件使用，拥有默认的动画效果实现。  <refresh>\n  <text>Refreshing</text>\n  <loading-indicator></loading-indicator>\n</refresh>"},{url:"/weex/components/refresh.html",hash:"属性",title:"属性",content:'display\n控制 <refresh> 组件显示、隐藏。display 的设置必须成对出现，即设置 display="show",必须有对应的 display="hide"。可选值为 show / hide，默认值为 show。'},{url:"/weex/components/refresh.html",hash:"事件",title:"事件",content:"refresh 事件：当 <scroller>、<list>、<waterfall> 被下拉完成时触发。 pullingdown 事件：当 <scroller>、<list>、<waterfall> 被下拉时触发。\n可以从 event 参数对象中获取以下数据：\ndy: 前后两次回调滑动距离的差值 pullingDistance: 下拉的距离 viewHeight: refresh 组件高度 type: “pullingdown” 常数字符串"},{url:"/weex/components/refresh.html",hash:"示例",title:"示例",content:"基本用法"}]},{title:"<richtext> v0.20+",url:"/weex/components/richtext.html",hash:"",data:[{url:"/weex/components/richtext.html",hash:"richtext",title:"<richtext> v0.20+",content:""},{url:"/weex/components/richtext.html",hash:"简介",title:"简介",content:"富文本组件可以内嵌 <span> <a> <image>。同时它也支持 <span> <a> <image> 的嵌套。 只有 <span>, <a> and <image> 可以包含在 <richtext> 标签里。<span> and <a> 会被显示为 display:inline，而 <image> 会被显示为 display:inline-block。 <richtext> 的子节点分两种类型。 <span> and <a> 可以再包含孩子节点。 <image> 不能再包含孩子节点。 富文本组件内部树形结构不能超过255层，超过的层会被忽略。 注意事项 <a> 标签在 iOS 上恒定为 color:blue 蓝色样式，它孩子节点也会被应用为该样式，见下面样例。Android 上无此限制。 <image> 标签必须指定 width 和 height. 在图片下载完成前，<image> 会保持空白状态，目前不支持显示占位图。 富文本组件自身不能嵌套。"},{url:"/weex/components/richtext.html",hash:"属性",title:"属性",content:"富文本组件的子节点支持的属性如下。"},{url:"/weex/components/richtext.html",hash:"image",title:"image",content:"src. 图片链接。 pseudo-ref. 开发者指定的索引，会被传给回调方法 itemclick。"},{url:"/weex/components/richtext.html",hash:"a",title:"a",content:"herf. Herf。"},{url:"/weex/components/richtext.html",hash:"span",title:"span",content:"<span> 不支持任何属性，文本需要包在 <span> 里面，例如 <span>Hello World</span>。"},{url:"/weex/components/richtext.html",hash:"样式",title:"样式",content:"富文本和它下面的 <span>, <a>, <image> 只支持有限的样式。 <span>, <a> 和 <richtext> 可以被继承\ncolor font-family font-size font-style font-weight line-height 不可被继承\nbackground-color <span> 可以被继承\ntext-decoration: none | underline | line-through, 默认值是 none <richtext> 不可被继承\nlines: 最大行数，必须为正数。 <image> 不可被继承\nwidth height"},{url:"/weex/components/richtext.html",hash:"事件",title:"事件",content:"通用事件 支持所有通用事件。 itemclick. 触发时机\nimg 被点击 没有任何父节点是 a 如果第二个条件不满足，Weex 会尝试打开 a 标签指定的链接。 img 的 pseudo-ref 会作为参数传回来。"},{url:"/weex/components/richtext.html",hash:"示例",title:"示例",content:"示例"}]},{title:"<scroller>",url:"/weex/components/scroller.html",hash:"",data:[{url:"/weex/components/scroller.html",hash:"scroller",title:"<scroller>",content:""},{url:"/weex/components/scroller.html",hash:"简介",title:"简介",content:"<scroller> 是一个容纳子组件进行横向或竖向滚动的容器组件。如果你的组件需要进行滚动，可以将 <scroller> 当作根元素或者父元素使用，否则页面无法滚动（ <list> 组件除外， <list> 默认可以滚动）。 WARNING 不允许相同方向的 <list> 或者 <scroller> 互相嵌套，换句话说就是嵌套的 <list> / <scroller> 必须是不同的方向。 <scroller> 需要显式的设置其宽高，可使用 position: absolute; 定位或 width、height 设置其宽高值。"},{url:"/weex/components/scroller.html",hash:"子组件",title:"子组件",content:"<scroller> 支持任意类型的 Weex 组件作为其子组件。 其中，还支持以下两个特殊组件作为子组件： <refresh>: 用于添加下拉刷新的功能。详情请查看<refersh>。 <loading>: 用于添加上拉加载更多的功能。详情请查看<loading>。"},{url:"/weex/components/scroller.html",hash:"属性",title:"属性",content:'参数 说明 类型 默认值 show-scrollbar 控制是否出现滚动条 boolean true scroll-direction 控制滚动的方向 string（horizontal 或者 vertical） vertical loadmoreoffset 触发 loadmore 事件所需要的垂直偏移距离（设备屏幕底部与页面底部之间的距离）。当页面的滚动条滚动到足够接近页面底部时将会触发 loadmore 这个事件 number 0 offset-accuracy 控制 scroll 事件触发的频率，默认值为 10，表示两次 scroll 事件之间列表至少滚动了 10px。注意，将该值设置为较小的数值会提高滚动事件采样的精度，但同时也会降低页面的性能 number 10 scrollToBegin 控制 scroll 内容（layout）改变后，是否自动滚到初时位置。默认是true string true WARNING scroll-direction 定义了 scroller 的滚动方向，样式表属性 flex-direction 定义了 scroller 的布局方向，两个方向必须一致。例如： scroll-direction 的默认值是 vertical，flex-direction 的默认值是 row； 当需要一个水平方向的 scroller 时，使用 scroll-direction="horizontal" 和 flex-direction: row; 当需要一个竖直方向的 scroller 时，使用 scroll-direction="vertical" 和 flex-direction: column，由于这两个值均是默认值，当需要一个竖直方向的 scroller 时，这两个值可以不设置。 loadmoreoffset 如图所示:'},{url:"/weex/components/scroller.html",hash:"事件",title:"事件",content:"loadmore 如果滚动到底部将会立即触发这个事件，你可以在这个事件的处理函数中加载下一页的列表项，可通过 loadmoreoffset 属性设置触发偏移距离。 scroll 列表发生滚动时将会触发该事件，事件的默认触发频率为 10px，即列表每滚动 10px 触发一次，可通过属性 offset-accuracy 设置抽样率。事件中 Event 对象有以下属性: 属性 说明 类型 contentSize 列表的内容尺寸 Object width 列表内容宽度 number height 列表内容高度 number contentOffset 列表的偏移尺寸 Object x x 轴上的偏移量 number y y 轴上的偏移量 number scrollstart 0.17.0+ H5 暂不支持该事件，当列表开始滚动时触发，当前的内容高度和列表偏移会在 callback 中返回，示例参见 Demo。 scrollend 0.17.0+ H5 暂不支持该事件，与 scrollstar 类似，当列表结束滚动时触发，当前的内容高度和列表偏移会在 callback 中返回，示例参见 Demo。"},{url:"/weex/components/scroller.html",hash:"扩展",title:"扩展",content:""},{url:"/weex/components/scroller.html",hash:"scrolltoelement-node-options",title:"scrollToElement(node, options)",content:"与 <list> 类似，<scroller> 支持滚动到某个指定的元素，可通过 dom.scrollToElement() 滚动到指定元素位置。更多信息可参考dom module。"},{url:"/weex/components/scroller.html",hash:"参数",title:"参数",content:"{node}：指定目标节点 options {Object}：可选项，属性为：\noffset {number}：一个到其可见位置的偏移距离，默认是 0"},{url:"/weex/components/scroller.html",hash:"示例",title:"示例",content:"scrollerstart 事件  设置 scroller 事件触发频率  热门动画列表 ，使用 <scroller> 进行长列表渲染，支持 loadmore 自动加载数据及右下角回到顶部功能。   简易电梯导航 ，顶部为横向 <scroller> 作为楼层导航，点击可定位到对应楼层，常见于各类活动会场页面。   聊天窗口 ，页面局部可滚动，底部输入框不可滚动。"}]},{title:"<slider>",url:"/weex/components/slider.html",hash:"",data:[{url:"/weex/components/slider.html",hash:"slider",title:"<slider>",content:""},{url:"/weex/components/slider.html",hash:"简介",title:"简介",content:"Slider 组件用于在一个页面中展示多个图片，在前端这种效果被称为轮播图。默认的轮播间隔为3秒。"},{url:"/weex/components/slider.html",hash:"子组件",title:"子组件",content:"支持任意类型的 Weex 组件作为其子组件。你也可以放置一个 indicator 组件用于显示轮播指示器。indicator 也只能作为 Slider 的子组件使用。indicator 不能再包含其它子组件了。"},{url:"/weex/components/slider.html",hash:"属性",title:"属性",content:"auto-play, boolean. 组件渲染完成时，是否自动开始播放，默认为 false. interval, number（ms）. 轮播间隔，默认为 3000ms。 index, number. 设置显示slider的第几个页面。 offset-x-accuracy, number. 控制 onscroll 事件触发的频率，默认值为10，表示两次 onscroll 事件之间滚动容器至少滚动了10px。将该值设置为较小的数值会提高滚动事件采样的精度，但同时也会降低页面的性能。 show-indicators, boolean. 是否显示指示器。 infinite, boolean. 设置是否可以无限轮播，默认为 true。 scrollable, boolean. 设置是否可以通过滑动手势来切换页面，默认为 true。 keep-index, boolean, Android. 设置轮播器中的数据发生变化后是否保持变化前的页面序号。 forbid-slide-animation, boolean, v0.20+ & iOS. iOS 平台默认支持动画，使用该属性可以强制关闭切换时的动画。"},{url:"/weex/components/slider.html",hash:"样式",title:"样式",content:"通用样式 支持所有通用样式。"},{url:"/weex/components/slider.html",hash:"事件",title:"事件",content:"通用事件 支持所有通用事件。 change 当轮播索引改变时，触发该事件。该事件给前端的参数中含有 index表示当前切换到的序号。 scroll 列表发生滚动时将会触发该事件。在参数中有 offsetXRatio，它表示当前图片偏移的比率，取值范围是 [-1, 1]。负值表示当前图片向左滑，正值表示向右划。比如 -0.2 表示当前图片向左滑，并且有 20% 的区域超出了容器边缘。"},{url:"/weex/components/slider.html",hash:"示例",title:"示例",content:"示例  滚动事件示例  自动播放和indicator示例  Ocean示例"}]},{title:"<text>",url:"/weex/components/text.html",hash:"",data:[{url:"/weex/components/text.html",hash:"text",title:"<text>",content:""},{url:"/weex/components/text.html",hash:"简介",title:"简介",content:"<text> 是 Weex 内置的组件，用来将文本按照指定的样式渲染出来. 注意： <text> 里直接写文本头尾空白会被过滤，如果需要保留头尾空白字符，暂时只能通过数据绑定的方式，见下面动态文本。 注意： <text> 不支持子组件。"},{url:"/weex/components/text.html",hash:"样式",title:"样式",content:"支持 通用样式。 支持 文本样式。"},{url:"/weex/components/text.html",hash:"属性",title:"属性",content:"除了动态文本，text组件不支持其他属性。"},{url:"/weex/components/text.html",hash:"动态文本",title:"动态文本",content:"下列代码片段可以实现文字内容和JS变量的绑定。"},{url:"/weex/components/text.html",hash:"事件",title:"事件",content:"支持 通用事件。"},{url:"/weex/components/text.html",hash:"其他",title:"其他",content:""},{url:"/weex/components/text.html",hash:"文字高度",title:"文字高度",content:"文字高度的计算规则比较复杂，但大致上遵循以下优先级进行计算，排在前面的优先级最高。 文字节点的max-height/min-height样式。 文字节点的flex属性且文字的父节点上有flex-direction:column\b样式。 文字节点的height样式。 文字节点的align-items:stretch如果文字父节点\b有 flex-direction:row样式。 文字内容和文字本身的样式。 其他相关CSS属性。"},{url:"/weex/components/text.html",hash:"自定义字体",title:"自定义字体 v0.12+",content:"文本组件支持 ttf 和 woff 字体格式的自定义字体。 使用唯一的 font-family 名字创建字体文件。 使用 Dom 模块的 addRule 方法注册字体。 在文本中使用 font-family:YourFontFamilyName 样式指定字体。 注意 addRule 方法里的 fontFamily 可以随意取，这个名字是 Weex 本地索引用的，并不是字体真正的名字。字体真正的名字（font-family），也就是注册到系统字库中的名字是保存在字体二进制文件中的。你需要确保你使用的字体的真正名字（font-family）足够特殊，否则在向系统注册时可能发生冲突，导致注册失败，你的字符被显示为‘?’。要获取字体名字，可以在字体文件上单击右键，显示文件信息。以下图片显示了一个不好的做法，记住，永远不要使用 iconfont 作为你字体的名字。  注意 如果你使用 Alibaba Iconfont  来构建你的 iconfont。确保在项目设置中，设置一个特殊的 font-family 名字。默认是 “iconfont”，但极大可能发生冲突。"},{url:"/weex/components/text.html",hash:"示例",title:"示例",content:"<text>的基本用法"}]},{title:"<textarea>",url:"/weex/components/textarea.html",hash:"",data:[{url:"/weex/components/textarea.html",hash:"textarea",title:"<textarea>",content:""},{url:"/weex/components/textarea.html",hash:"简介",title:"简介",content:"<textarea> 与 <input> 组件类似，可用于接受用户输入数据。<textarea> 支持多行文本输入。 <textarea> 支持 <input> 支持的所有的属性、样式和事件。"},{url:"/weex/components/textarea.html",hash:"子组件",title:"子组件",content:"<textarea> 不支持子组件。"},{url:"/weex/components/textarea.html",hash:"属性",title:"属性",content:"除了支持 input 支持的所有属性外，textarea 还支持 row 属性，用于指定输入的行数。 row, number, 默认值为2。"},{url:"/weex/components/textarea.html",hash:"样式",title:"样式",content:""},{url:"/weex/components/textarea.html",hash:"通用样式",title:"通用样式",content:"支持所有通用样式。"},{url:"/weex/components/textarea.html",hash:"伪类样式",title:"伪类样式",content:"active disabled enbaled focus active 和 focus 的区别在于，当光标位于输入框里时，它就是 focus 状态，而只有触摸输入框时它才是 active 的状态。"},{url:"/weex/components/textarea.html",hash:"文本样式",title:"文本样式",content:"请参考文本样式"},{url:"/weex/components/textarea.html",hash:"事件",title:"事件",content:'通用事件 支持所有通用事件。 input. 当输入状态时，会不断触发。\n@param value: 当前文本。 change. 当用户完成了输入时触发。\n@param value: 当前文本。 focus. 当输入框获得焦点时触发。 blur. 当输入框失去焦点时触发。 return. 当用户点击了“回车”按钮时触发，会返回此时“回车”按钮的动作类型。\n@param value: 当前文本。 @param returnKeyType, "default" | "go" | "next" | "search" | "send" | "done". keyboard. 当键盘弹起或收起时触发。\n@param isShow: boolean, 显示或隐藏键盘。 @param keyboardSize: 键盘的高度，以前端使用的样式单位返回。'},{url:"/weex/components/textarea.html",hash:"示例",title:"示例",content:"示例  事件示例  绑定示例"}]},{title:"<video>",url:"/weex/components/video.html",hash:"",data:[{url:"/weex/components/video.html",hash:"video",title:"<video>",content:""},{url:"/weex/components/video.html",hash:"简介",title:"简介",content:"Video 组件用于在页面中嵌入视频内容。"},{url:"/weex/components/video.html",hash:"子组件",title:"子组件",content:"text 是唯一合法的子组件。"},{url:"/weex/components/video.html",hash:"属性",title:"属性",content:"src, string. 内嵌的视频指向的URL。 play-status, string. 可选值为 play | pause，用来控制视频的播放状态，play 或者 pause，默认值是 pause。 auto-play, boolean. 当页面加载初始化完成后，用来控制视频是否立即播放，默认值是 false。 poster, string, v0.18+ & iOS. 指定视频首图的图片链接。 controls, string, v0.19+. 可选值为  controls | nocontrols，控制视频播放组件是否显示回放控制面板，默认会显示，当指定为 nocontrols 时不显示回放控制面板。"},{url:"/weex/components/video.html",hash:"样式",title:"样式",content:"通用样式 支持所有通用样式。"},{url:"/weex/components/video.html",hash:"事件",title:"事件",content:"start 当 playback 的状态是 Playing 时触发。 pause 当 playback 的状态是 Paused 时触发。 finish 当 playback 的状态是 Finished 时触发。 fail 当 playback 状态是 Failed 时触发。"},{url:"/weex/components/video.html",hash:"示例",title:"示例",content:"示例  自动播放示例  手动控制示例"}]},{title:"<waterfall>",url:"/weex/components/waterfall.html",hash:"",data:[{url:"/weex/components/waterfall.html",hash:"waterfall",title:"<waterfall>",content:""},{url:"/weex/components/waterfall.html",hash:"简介",title:"简介",content:"<waterfall> 组件是提供瀑布流布局的核心组件。瀑布流，又称瀑布流式布局是比较流行的一种页面布局，视觉表现为参差不齐的多栏布局。随着页面滚动条向下滚动，这种布局还可以不断加载数据块并附加至当前尾部。"},{url:"/weex/components/waterfall.html",hash:"子组件",title:"子组件",content:"和 <list>组件一样, <waterfall> 组件的子组件只能包括以下四种组件或是 fix 定位的组件，其他形式的组件将不能被正确渲染。 <cell>：用于定义列表中的子列表项，类似于 HTML 中的 ul 之于 li。Weex 会对 <cell> 进行高效的内存回收以达到更好的性能。 <header>：当 <header> 到达屏幕顶部时，吸附在屏幕顶部。 <refresh>：用于给列表添加下拉刷新的功能。 <loading>：<loading> 用法与特性和 <refresh> 类似，用于给列表添加上拉加载更多的功能。"},{url:"/weex/components/waterfall.html",hash:"属性",title:"属性",content:"show-scrollbar : [可选] 可选值为 true/ false，默认值为 true。控制是否出现滚动条。  [H5无效] column-count: [可选]描述瀑布流的列数\nauto: 意味着列数是被其他属性所决定的(比如 column-width) <integer>: 最佳列数，column-width 和 column-count 都指定非0值， 则 column-count 代表最大列数。 column-width : [可选]描述瀑布流每一列的列宽\nauto: 意味着列宽是被其他属性所决定的(比如 column-count) <length>: 最佳列宽，实际的列宽可能会更宽(需要填充剩余的空间)， 或者更窄(如果剩余空间比列宽还要小)。 该值必须大于0 column-gap: [可选]列与列的间隙. 如果指定了 normal ，则对应 32. left-gap: [可选]左边cell和列表的间隙. 如果未指定 ，则对应 0 需要 weex v0.19+. right-gap: [可选]右边cell和列表的间隙. 如果未指定，则对应 0 需要 weex v0.19+.  其他支持的属性参见 List 组件属性部分"},{url:"/weex/components/waterfall.html",hash:"事件",title:"事件",content:"支持所有通用事件： click：用于监听点击事件。（例如：一般绑定于子组件之上触发跳转）。 longpress：用于监听长按事件（一般绑定于子组件之上例如：手机淘宝猜你喜欢瀑布流，长按可删除您不感兴趣的商品）。 appear：用于监听子组件出现事件（一般绑定于子组件之上例如：监听最后一个元素出现，加载新的数据） disappear：用于监听子组件滑出屏幕事件（一般绑定于子组件之上）"},{url:"/weex/components/waterfall.html",hash:"示例",title:"示例",content:"体验示例  上述示例使用了4种子组件，同时点击不同的单元格，可体验 <waterfall> 不同属性间的区别。 无限加载瀑布流  无限加载瀑布流，当瀑布流滑动到底部时请求新的瀑布流数据形成可无限滑动的瀑布流。可利用最后一个子组件 appear 时触发请求（例如上述示例代码），也可通过 loadmore 事件触发。"}]},{title:"<web>",url:"/weex/components/web.html",hash:"",data:[{url:"/weex/components/web.html",hash:"web",title:"<web>",content:""},{url:"/weex/components/web.html",hash:"简介",title:"简介",content:"<web> 用于在 WEEX 页面中显示由 src 属性指定的网页内容。  <web> 可以使 H5 与 Native 元素相结合。 如图1：您可以整个页面铺满 Web 页面（快速兼容您之前的 H5 页面） 如图2：可以使用 Web 和其他 Weex 组件合成复杂页面 如图3：使用 Web 组合出多种效果（设置透明背景的 H5 页面，灵活配置各类 H5 活动资讯） 注意 <web> 不支持任何嵌套的子组件。 <web> 必须指定 width 和 height 的样式属性，否则将不起作用。 您可以使用 webview module来控制 <web>。"},{url:"/weex/components/web.html",hash:"属性",title:"属性",content:"src [必选] 要加载的网页内容的 URL。建议指定线上真实存在的 URL 地址。"},{url:"/weex/components/web.html",hash:"事件",title:"事件",content:"支持 appear 和 disappear 事件同时支持： pagestart 会在 Web 页面开始加载时调用。 事件对象： url: {String} 当前 Web 页面的 URL。 pagefinish 会在 Web 页面完成加载时调用。 事件对象： url: {String} 当前 Web 页面的 URL。 canGoBack: {Boolean} 当前 Web 页面是否可以回退。 canGoForward: {Boolean} 当前 Web 页面是否可以前进。 title: {String} 当前 Web 页面的标题（仅限 iOS 平台）。 error 会在 Web 页面加载失败时调用。 receivedtitle 会在 Web 页面的标题发生改变时调用（仅限 Android 平台）。"},{url:"/weex/components/web.html",hash:"示例",title:"示例",content:"体验示例  上述示例监听了 pagestart、pagefinish 及 error 事件，同时使用了  webview module 提供的 API。"}]},{title:"通用事件",url:"/weex/events/common-events.html",hash:"",data:[{url:"/weex/events/common-events.html",hash:"通用事件",title:"通用事件",content:"eeui 提供了通过事件触发动作的能力，例如在用户点击组件时执行 JavaScript。下面列出了可被添加到 eeui 组件上以定义事件动作的属性："},{url:"/weex/events/common-events.html",hash:"click",title:"click",content:"当组件上发生点击手势时被触发。 注意 <input> 和 <switch> 组件目前不支持 click 事件，请使用 change 或 input 事件来代替。"},{url:"/weex/events/common-events.html",hash:"事件对象",title:"事件对象",content:"key value 备注 type click  target  触发点击事件的目标组件 timestamp  触发点击事件时的时间戳(不支持 H5) 示例"},{url:"/weex/events/common-events.html",hash:"longpress",title:"longpress",content:"如果一个组件被绑定了 longpress 事件，那么当用户长按这个组件时，该事件将会被触发。"},{url:"/weex/events/common-events.html",hash:"事件对象-2",title:"事件对象",content:"key value 备注 type longpress  target  触发长按事件的目标组件 timestamp  长按事件触发时的时间戳(不支持 H5) 示例"},{url:"/weex/events/common-events.html",hash:"appear",title:"Appear",content:"如果一个位于某个可滚动区域内的组件被绑定了 appear 事件，那么当这个组件的状态变为在屏幕上可见时，该事件将被触发。"},{url:"/weex/events/common-events.html",hash:"事件对象-3",title:"事件对象",content:"key value 备注 type appear  target  触发 Appear 事件的组件对象 timestamp  事件被触发时的时间戳(不支持 H5) direction up或down 触发事件时屏幕的滚动方向 示例"},{url:"/weex/events/common-events.html",hash:"disappear",title:"Disappear",content:"如果一个位于某个可滚动区域内的组件被绑定了 disappear 事件，那么当这个组件被滑出屏幕变为不可见状态时，该事件将被触发。"},{url:"/weex/events/common-events.html",hash:"事件对象-4",title:"事件对象",content:"key value 备注 type disappear  target  触发 Disappear 事件的组件对象 timestamp  事件被触发时的时间戳(不支持 H5) direction up或down 触发事件时屏幕的滚动方向 示例"},{url:"/weex/events/common-events.html",hash:"stoppropagation",title:"stopPropagation",content:"用于内嵌处理Native滑动冲突的情况，阻止Native事件进行冒泡传递。可结合shouldStopPropagationInterval和shouldStopPropagationInitResult属性来控制。 shouldStopPropagationInitResult  默认初始化false/true的结果。\nshouldStopPropagationInterval  默认数字类型，控制touch频率，减少JS和Native通信次数，提升流畅性。可参考[Scroller内嵌List示例]"},{url:"/weex/events/common-events.html",hash:"事件对象无",title:"事件对象无",content:"Scroller内嵌List示例"},{url:"/weex/events/common-events.html",hash:"page",title:"Page",content:"注意 支持 iOS 和 Android，H5 暂不支持。 eeui 通过 viewappear 和 viewdisappear 事件提供了简单的页面状态管理能力。 viewappear 事件会在页面就要显示或配置的任何页面动画被执行前触发，例如，当调用 navigator 模块的 push 方法时，该事件将会在打开新页面时被触发。viewdisappear 事件会在页面就要关闭时被触发。 与组件的 appear 和 disappear 事件不同的是，viewappear 和 viewdisappear 事件关注的是整个页面的状态，所以它们必须绑定到页面的根元素上。 特殊情况下，这两个事件也能被绑定到非根元素的body组件上，例如wxc-navpage组件。"},{url:"/weex/events/common-events.html",hash:"事件对象-5",title:"事件对象",content:"key value 备注 type viewappear 或 viewdisappear  target  触发事件的组件对象 timestamp  事件被触发时的时间戳"},{url:"/weex/events/common-events.html",hash:"demo",title:"Demo",content:"综合示例"}]},{title:"事件冒泡 v0.13+",url:"/weex/events/event-bubbling.html",hash:"",data:[{url:"/weex/events/event-bubbling.html",hash:"事件冒泡",title:"事件冒泡 v0.13+",content:"注意 目前仅 eeui Native（Android 和 iOS）支持，web 端 暂时不支持此项特性. 如果你是个 web 开发者，你大概对浏览器事件冒泡机制已经很熟悉了，而且可能认为 eeui 默认会支持事件冒泡。然而，eeui 在 0.13 之前是不支持这一特性的，在 0.13 版本，eeui 提供了这项支持。"},{url:"/weex/events/event-bubbling.html",hash:"概念",title:"概念",content:"以点击事件为例，比如一个点击事件发生在某个 <video> 元素上，这个元素有一个父元素（比如是个 div 元素），浏览器会执行两个处理阶段 - 捕获（capturing）阶段和冒泡（bubbling）阶段。在 web 开发中冒泡阶段会用的比较多，而捕获处理用的比较少。 在捕获阶段，浏览器检查当前元素的最外层父节点（在 web 上，比如，<html> 元素），如果它上面绑定了一个 click 事件处理器，那么先执行这个处理器。然后检查下一个元素，<html> 的子元素里是 <video> 祖先元素的那个元素，做同样的检测。一步步直到遇到当前点击的这个元素本身。 接下来是冒泡阶段，方向和捕获阶段相反：浏览器先检测当前被点击的元素上是否注册了点击事件处理器，如果有则执行它。接下来检测它的父元素，一步步向上，直到最外层 <html> 元素。  我们一般使用默认的事件注册机制，将事件处理注册在冒泡阶段，所以处理冒泡阶段的情况比较多。当我们想要停止事件冒泡，只需要调用事件对象的 stopPropagation 方法。标准事件对象包含 stopPropagation 方法，当执行事件处理器时调用该方法，会立即停止事件冒泡，这样事件冒泡处理链上的后续处理器就不会再执行下去。 eeui 在 0.13 版本 SDK 里实现了事件冒泡机制。注意事件冒泡默认是不开启的，你需要在模板根元素上加上属性 bubble=true 才能开启冒泡。"},{url:"/weex/events/event-bubbling.html",hash:"使用",title:"使用",content:"事件冒泡默认不开启，需要手动添加 bubble=true 属性到根元素上。"},{url:"/weex/events/event-bubbling.html",hash:"阻止冒泡",title:"阻止冒泡",content:'在事件处理函数里，可以通过调用 event.stopPropagation 方法阻止事件冒泡。这个方法和 DOM 标准  里的方法一致。注意 event.stopPropagation 和 bubble=true 的影响范围不同，前者仅针对当前冒泡到的元素以及其祖先层级有效，而对子元素无效。而后者相当于一个全局开关，开启以后对该根元素内部所有子元素都开启了事件冒泡效果。两者可以同时存在。 注意 需要注意的是: 为了兼容之前的版本，eeui 默认不会开启事件冒泡机制。需要在根元素的属性上，添加 bubble="true" 来开启冒泡机制。否则，将不会向上传播事件，保持与之前版本的效果相同。'},{url:"/weex/events/event-bubbling.html",hash:"demo",title:"Demo",content:"开启事件冒泡 \n使用 eeui playground App 扫描页面里的二维码，然后在打开页面中点击包含 ‘click me’ 文字的方框，会看到事件冒泡效果，即外层的组件依次显示事件成功冒泡到当前组件的提示。 阻止冒泡 \n使用 eeui playground App 扫描页面里的二维码，然后在打开页面中点击包含 ‘click me’ 文字的方框，可以看到事件冒泡被父组件中断了，不再冒泡到最外层组件。"}]},{title:"手势 该功能属于实验性功能",url:"/weex/events/gesture.html",hash:"",data:[{url:"/weex/events/gesture.html",hash:"手势",title:"手势 该功能属于实验性功能",content:"eeui 封装了原生的触摸事件以提供手势系统。使用手势类似于在 eeui 中使用事件，只需在节点上监听手势即可。"},{url:"/weex/events/gesture.html",hash:"手势类型",title:"手势类型",content:"目前，仅支持以下四种手势类型： touch: 当触摸到一个点，移动或从触摸面移开时触发 touch 手势。触摸手势很精准，它会返回所有详细的事件信息。所以，监听 touch 手势可能很慢，即使只移动一丁点也需要处理大量事件。有三种类型的 touch 手势： type 描述 touchstart 将在触摸到触摸面上时触发 touchmove 将在触摸点在触摸面移动时被触发 touchend 将在从触摸面离开时被触发 stopPropagation v0.18+ 每个 touch 事件都会被传递过来, 可控制 touch 事件是否冒泡（返回 true）或者停止（返回 false）；用于解决事件冲突或者自定义手势  试一下  Pan：pan 手势也会返回触摸点在触摸面的移动信息，有点类似于 touch 手势。但是 pan 手势只会采样收集部分事件信息因此比 touch 事件要快得多，当然精准性差于 touch。pan 也有三种类型的手势，这些手势的意义与 touchs 完全一样： type 描述 panstart pan 开始 panmove pan 移动事件 panend pan 结束事件 horizontalpan v0.10+ 手势的 start/move/end 状态保存在 state 特性中。目前该手势在 Android 下会与 click 事件冲突 verticalpan v0.10+ 手势的 start/move/end 状态保存在 state 特性中。目前该手势在 Android 下会与 click 事件冲突 Swipe: swipe 将会在用户在屏幕上滑动时触发，一次连续的滑动只会触发一次 swipe 手势。 试一下  LongPress: LongPress将会在触摸点连续保持 500 ms 以上时触发 试一下  touch 和 pan 非常接近，它们的特点可以总结成这样： type 描述 Touch 完整信息，精准、很慢 Pan 抽样信息，很快，不够精准 开发者可以根据自己的情况选择合适的手势。"},{url:"/weex/events/gesture.html",hash:"属性",title:"属性",content:"以下属性可以在手势的回调中使用： direction: 仅在 swipe 手势中存在，返回滑动方向，返回值可能为 up, left, bottom, right changedTouches: 一个数组，包含了当前手势的触摸点的运动轨迹"},{url:"/weex/events/gesture.html",hash:"changedtouches",title:"changedTouches",content:"changedTouches 是一个数组，其子元素中包含以下属性： key 描述 identifier 触摸点的唯一标识符 pageX 触摸点相对于文档左侧边缘的 X 轴坐标 pageY 触摸点相对于文档顶部边缘的 Y 轴坐标 screenX 触摸点相对于屏幕左侧边缘的 X 轴坐标 screenY 触摸点相对于屏幕顶部边缘的 Y 轴坐标 force 屏幕收到的按压力度，值的范围为 0~1 注意 force 属性目前在支持 forceTouch iOS 设备才支持, iPhone 6s 及更新的 iOS 设备"},{url:"/weex/events/gesture.html",hash:"约束",title:"约束",content:"目前，由于会触发大量事件冲突，eeui Android 还不支持在滚动类型的元素上监听手势，例如 scroller, list 和 webview 这三个组件。"},{url:"/weex/events/gesture.html",hash:"demo",title:"Demo",content:"Touch  Swipe  LongPress"}]},{title:"animation",url:"/weex/modules/animation.html",hash:"",data:[{url:"/weex/modules/animation.html",hash:"animation",title:"animation",content:"animation 模块可以用来在组件上执行动画。JS-Animation可以对组件执行一系列简单的变换 (位置、大小、旋转角度、背景颜色和不透明度)。 举个例子，如果有一个 <image> 组件，通过动画你可以对其进行移动、旋转、拉伸或收缩等动作。 TIP 如果需要使用CSS动画，参考 transition 或 transform。 示例"},{url:"/weex/modules/animation.html",hash:"文档",title:"文档",content:""},{url:"/weex/modules/animation.html",hash:"transition",title:"transition",content:""},{url:"/weex/modules/animation.html",hash:"transition-ref-options-callback",title:"transition(ref, options, callback)",content:"@ref，将要执行动画的元素。例如指定动画的元素 ref 属性为 test，可以通过调用 this.$refs.test 来获取元素的引用。 @options，动画参数\nstyles，设置不同样式过渡效果的键值对，下表列出了所有合法的参数：\nwidth height backgroundColor opacity transformOrigin transform\ntranslate/translateX/translateY rotate/rotateX/rotateY perspective scale/scaleX/scaleY duration，duration(number)：指定动画的持续时间 (单位是毫秒)，默认值是 0，表示瞬间达到动画结束状态。 delay，delay (number)：指定请求动画操作到执行动画之间的时间间隔 (单位是毫秒)，默认值是 0，表示没有延迟，在请求后立即执行动画。 needLayout，needLayout (boolean)：动画执行是否影响布局，默认值是false。 timingFunction，timingFunction (string)：描述动画执行的速度曲线，用于描述\b动画\b已消耗时间和动画完成进度间的映射关系。默认值是 linear，表示动画从开始到结束都拥有同样的速度。下表列出了所有合法的属性：\nlinear:动画从头到尾的速度是相同的 ease-in:动画速度由慢到快 ease-out:动画速度由快到慢 ease-in-out:动画先加速到达中间点后减速到达终点 cubic-bezier(x1, y1, x2, y2):在三次贝塞尔函数中定义变化过程，函数的参数值必须处于 0 到 1 之间。更多关于三次贝塞尔的信息请参阅 cubic-bezier  和 Bézier curve 。 @callback，callback是动画执行完毕之后的回调函数。在iOS平台上，你可以获取动画执行是否成功的信息。 @style 中可以做动画的属性 width，width表示动画执行后应用到组件上的宽度值。如果你需要影响布局，设置needLayout为true。默认值为computed width。 height，height表示动画执行后应用到组件上的高度值。如果你需要影响布局\b，设置设置为 needLayout为true。默认值为computed width。 backgroundColor，backgroundColor动画执行后应用到组件上的背景颜色，默认值为computed backgroundColor。 opacity，opacity表示动画执行后应用到组件上的不透明度值，默认值为computed opacity。 transformOrigin，transformOrigin定义变化过程的中心点，如transformOrigin: x-axis y-axis 参数 x-axis 可能的值为 left、center、right、长度值或百分比值，参数 y-axis 可能的值为 top、center、bottom、长度值或百分比。默认值为center center。 transform，transform变换类型，可能包含rotate，translate，scale`及其他属性。默认值为空。\ntranslate/translateX/translateY指定元素要移动到的位置。单位是长度或百分比，默认值是0. rotate/rotateX/rotateYv0.16+ 指定元素将被旋转的角度。单位是度 角度度，默认值是0 scale/scaleX/scaleY按比例放大或缩小元素。单位是数字，默认值是1 perspectivev0.16+ 观察者距离z=0平面的距离，在Android 4.1及以上有效。单位值数字，默认值为正无穷。 TIP iOS上可以获取 animation 是否执行成功的信息，callback中的result参数会有两种，分别是是Success与Fail。 Android 的callback 函数不支持result参数。"}]},{title:"clipboard",url:"/weex/modules/clipboard.html",hash:"",data:[{url:"/weex/modules/clipboard.html",hash:"clipboard",title:"clipboard",content:"该模块提供的接口可以用于获取、设置剪切板内容，目前只支持字符串类型。 TIP 只支持字符串类型。 只能在 iOS 和 Android 平台上生效。"},{url:"/weex/modules/clipboard.html",hash:"api",title:"API",content:""},{url:"/weex/modules/clipboard.html",hash:"getstring",title:"getString",content:"从系统剪贴板获取内容"},{url:"/weex/modules/clipboard.html",hash:"getstring-callback",title:"getString(callback)",content:"@callback，回调函数会返回 data，即字符串内容。"},{url:"/weex/modules/clipboard.html",hash:"setstring",title:"setString",content:"向系统剪贴板设置内容"},{url:"/weex/modules/clipboard.html",hash:"setstring-text",title:"setString(text)",content:"@text，要设置的文本。 Demo"}]},{title:"dom",url:"/weex/modules/dom.html",hash:"",data:[{url:"/weex/modules/dom.html",hash:"dom",title:"dom",content:"dom 模块用于对 weex 页面里的组件节点进行一部分特定操作。 scrollToElement\n将 list 的某个子节点滚动到当前视口 getComponentRect\n获取某个组件的 bounding rect 布局信息 addRule\n添加 font-face rule getLayoutDirection0.20.0+\n获取某个组件的布局方向（rtl、lrt、inherit）"},{url:"/weex/modules/dom.html",hash:"api",title:"API",content:""},{url:"/weex/modules/dom.html",hash:"scrolltoelement",title:"scrollToElement",content:"让页面滚动到 ref 对应的组件，这个 API 只能用于可滚动组件的子节点，例如 <scroller>，<list>, <waterfall> 等可滚动组件中。"},{url:"/weex/modules/dom.html",hash:"scrolltoelement-ref-options",title:"scrollToElement(ref, options)",content:"@ref，要滚动到的那个节点。 @options offset，一个到其可见位置的偏移距离，默认是 0。 animated，是否需要附带滚动动画，默认是 true。 示例"},{url:"/weex/modules/dom.html",hash:"getcomponentrect",title:"getComponentRect",content:"获取某个元素 View 的外框。"},{url:"/weex/modules/dom.html",hash:"getcomponentrect-ref-callback",title:"getComponentRect(ref, callback)",content:"@ref，要滚动到的那个节点。 @callback，异步方法，通过回调返回信息。 回调方法中的数据样例： TIP 如果要获取 viewport 的包围框，第一个参数  ref 可以指定为 'viewport'。 Demo  TIP 此方法需要在节点渲染后调用才能获取正确的信息，可在 mounted 或 更新数据后 updated 中调用 如果想要获取到 Weex 视口容器的布局信息，可以指定 ref 为字符串 'viewport'，即 getComponentRect('viewport', callback)."},{url:"/weex/modules/dom.html",hash:"getlayoutdirection",title:"getLayoutDirection 0.20.0+",content:"获取当前的布局方向，是 Left to Right，还是 Right to Left。"},{url:"/weex/modules/dom.html",hash:"getlayoutdirection-ref-callback",title:"getLayoutDirection(ref, callback)",content:"@ref，要操作的节点。 @callback，回调方法中返回排版方向信息。 callback方法返回数据样例： 示例"},{url:"/weex/modules/dom.html",hash:"addrule",title:"addRule 0.12.0+",content:"Weex 提供 DOM.addRule 以加载自定义字体。开发者可以通过指定 font-family加载 iconfont 和 custom font。 开发者可以使用下面的代码加载自定义字体："},{url:"/weex/modules/dom.html",hash:"addrule-type-contentobject",title:"addRule(type, contentObject)",content:"@fontFace 协议名称，不可修改。 @fontFamily font-family的名称。 @src 字体地址，url('') 是保留字段，其参数如下:\nhttp. 从HTTP请求加载, e.g. url('http://at.alicdn.com/t/font_1469606063_76593.ttf') https. 从HTTPS请求加载, e.g. url('https://at.alicdn.com/t/font_1469606063_76593.ttf') local, Android ONLY. 从assets目录读取, e.g. url('local://foo.ttf'),  foo.ttf 是文件名在你的assets目录中. file. 从本地文件读取, e.g. url('file://storage/emulated/0/Android/data/com.alibaba.weex/cache/http:__at.alicdn.com_t_font_1469606063_76593.ttf') data. 从base64读取, e.g. url('data:font/truetype;charset=utf-8;base64,AAEAAAALAIAAAwAwR1NVQrD+....'), 上述data字段不全。 注意 addRule 方法里的 fontFamily 可以随意取。这个名字不是字体真正的名字。字体真正的名字（font-family），也就是注册到系统中的名字是保存在字体二进制文件中的。你需要确保你使用的字体的真正名字（font-family）足够特殊，否则在向系统注册时可能发生冲突，导致注册失败，你的字符被显示为‘?’。 如果你使用 http://www.iconfont.cn/ 来构建你的 iconfont。确保在项目设置中，设置一个特殊的 font-family 名字。默认是 “iconfont”，但极大可能发生冲突。 调用addRule 在 beforeCreate 中是被推荐的。 示例 ."}]},{title:"globalEvent 0.14",url:"/weex/modules/globalEvent.html",hash:"",data:[{url:"/weex/modules/globalEvent.html",hash:"globalevent",title:"globalEvent 0.14",content:"globalEvent 用于监听持久性事件，例如定位信息，陀螺仪等的变化。全局事件是需要额外 APIs 处理的次要 API。"},{url:"/weex/modules/globalEvent.html",hash:"内置的全局事件",title:"内置的全局事件",content:"WeexSDK 对获取应用前后台事件做了支持，开发者可以在页面内监听对应的事件，获得应用被前后后这后台，以方便暂停音乐，视频等，只需要指定需要监听的事件名称和回调函数就可以，例如： WXApplicationDidBecomeActiveEvent，应用被前台的时候触发 WXApplicationWillResignActiveEvent，应用即将被后台时候触发 示例  注意 目前只有 platform 为 iOS 和 Android 才能支持。获取当前 platform"},{url:"/weex/modules/globalEvent.html",hash:"触发全局事件",title:"触发全局事件",content:'Android iOS [weexInstance fireGlobalEvent:@"geolocation" params:@{@"key":@"value"}];'},{url:"/weex/modules/globalEvent.html",hash:"api",title:"API",content:""},{url:"/weex/modules/globalEvent.html",hash:"addeventlistener",title:"addEventListener",content:"注册对一个全局事件的监听。"},{url:"/weex/modules/globalEvent.html",hash:"addeventlistener-eventname-callback",title:"addEventListener(eventName, callback)",content:"@eventName，string，事件名称。 @callback，function，回调方法。"},{url:"/weex/modules/globalEvent.html",hash:"removeeventlistener",title:"removeEventListener",content:"取消对一个全局事件的监听。"},{url:"/weex/modules/globalEvent.html",hash:"removeeventlistener-eventname",title:"removeEventListener(eventName)",content:"@eventName，string，事件名称。"}]},{title:"meta",url:"/weex/modules/meta.html",hash:"",data:[{url:"/weex/modules/meta.html",hash:"meta",title:"meta",content:"meta 模块可用于声明单个页面的元信息，通常是一些页面级别的配置，如容器的显示宽度 (viewport) 等。默认情况下，应用无需修改此配置。"},{url:"/weex/modules/meta.html",hash:"api",title:"API",content:""},{url:"/weex/modules/meta.html",hash:"setviewport",title:"setViewport",content:"Weex 容器默认的宽度 (viewport) 是 750px，通过 setViewport 方法可以改变页面的显示宽度，仅对当前页面生效。"},{url:"/weex/modules/meta.html",hash:"setviewport-options",title:"setViewport(options)",content:'@options width，number，具体数值或 "device-width" 和 "device-height" 宏。 height，number，具体数据或 "device-width" 和 "device-height" 宏。 roundOffDeviation 0.20.0+ & Android Only，表示layout引擎在布局时会忽略小数点导致的误差；若发现组件拼接处有缝隙，可以将 roundOffDeviation 设置为false，此时layout引擎将自动填补小数点误差，默认值为 true。 注意 需要注意的是：只有在页面渲染开始之前设置 viewport 才会生效。 也就是说，setViewport 方法只能在入口文件中使用，而且要在 new Vue(...) 之前调用；如果是在组件中使用，就只有在渲染到该组件的时候才会执行相应的代码，此时页面已经处于渲染过程中，设置 viewport 将不会再生效。 宽度和高度的单位默认是 px，暂不支持其他单位。'},{url:"/weex/modules/meta.html",hash:"示例",title:"示例",content:"入口文件： 在入口文件中配置了 viewport 的宽度为 640 之后，当前页面中的所有组件都会以 640px 作为满屏宽度。 组件文件： 示例 。（由于 http://dotwe.org  目前还不支持配置入口文件，例子中的效果暂时无法在线查看。）\n本地开发环境的搭建可以参考：《搭建开发环境》 。"}]},{title:"modal",url:"/weex/modules/modal.html",hash:"",data:[{url:"/weex/modules/modal.html",hash:"modal",title:"modal",content:"modal 模块提供了以下展示消息框的 API：toast、alert、confirm 和 prompt。"},{url:"/weex/modules/modal.html",hash:"api",title:"API",content:""},{url:"/weex/modules/modal.html",hash:"toast",title:"toast",content:"toast() 会在一个小浮层里展示关于某个操作的简单反馈。例如，在邮件发送前离开邮件编辑界面，可以触发一个“草稿已保存”的 toast，告知用户以后可以继续编辑。toast 会在显示一段时间之后自动消失。"},{url:"/weex/modules/modal.html",hash:"toast-options",title:"toast(options)",content:"@options message, string, 展示的内容. duration, number, 持续时间（以秒为单位） TIP Android: 如果时间长度大于3s，将使用一个被称为LONG的系统变量，否则使用SHORT这个系统变量 iOS: 持续的时间与duration相同"},{url:"/weex/modules/modal.html",hash:"alert",title:"alert",content:"警告框经常用于确保用户可以得到某些信息。当警告框出现后，用户需要点击确定按钮才能继续进行操作。"},{url:"/weex/modules/modal.html",hash:"alert-options-callback",title:"alert(options, callback)",content:"@options message, string，警告框内显示的文字信息 okTitle, string，确认按钮上显示的文字信息 @callback, function，用户操作完成后的回调"},{url:"/weex/modules/modal.html",hash:"confirm",title:"confirm",content:"确认框用于使用户可以验证或者接受某些信息。当确认框出现后，用户需要点击确定或者取消按钮才能继续进行操作。"},{url:"/weex/modules/modal.html",hash:"confirm-options-callback",title:"confirm(options, callback)",content:"@options message, string，警告框内显示的文字信息 okTitle, string，确认按钮上显示的文字信息 cancelTitle, string，取消按钮上显示的文字信息 @callback, function，用户操作完成后的回调，参数是按下按钮上的文字信息\nresult, string, 用户按下的按钮文字信息"},{url:"/weex/modules/modal.html",hash:"prompt",title:"prompt",content:"提示框经常用于提示用户在进入页面前输入某个值。当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操作。"},{url:"/weex/modules/modal.html",hash:"prompt-options-callback",title:"prompt(options, callback)",content:"@options message, string，警告框内显示的文字信息 okTitle, string，确认按钮上显示的文字信息 cancelTitle, string，取消按钮上显示的文字信息 @callback, function，用户操作完成后的回调res.result：用户按下的按钮上的文字信息res.data：用户输入的文字信息 示例"}]},{title:"navigator",url:"/weex/modules/navigator.html",hash:"",data:[{url:"/weex/modules/navigator.html",hash:"navigator",title:"navigator",content:"众所周知，在浏览器里，我们可以通过前进或者回退按钮来切换页面，iOS/Android 的 navigator 模块就是用来实现类似的效果的。除了前进、回退功能，该模块还允许我们指定在切换页面的时候是否应用动画效果。"},{url:"/weex/modules/navigator.html",hash:"api",title:"API",content:""},{url:"/weex/modules/navigator.html",hash:"push",title:"push",content:"把一个weex页面URL压入导航堆栈中，可指定在页面跳转时是否需要动画，以及操作完成后需要执行的回调函数"},{url:"/weex/modules/navigator.html",hash:"push-options-callback",title:"push(options, callback)",content:"@options url, string，要压入的 Weex 页面的 URL animated boolean，页面压入时是否需要动画效果，默认是 “true”。 @callback, 执行完该操作后的回调函数。"},{url:"/weex/modules/navigator.html",hash:"pop",title:"pop",content:"把一个 Weex 页面 URL 弹出导航堆栈中，可指定在页面弹出时是否需要动画，以及操作完成后需要执行的回调函数。"},{url:"/weex/modules/navigator.html",hash:"pop-options-callback",title:"pop(options, callback)",content:'@options animated, boolean，弹出页面时是否需要动画效果，默认是 “true”。 @callback, 执行完该操作后的回调函数。 注意 animated 二级参数目前仅支持字符串的 "true" 和 "false"，传入布尔值类型会导致程序崩溃，未来版本会修复这个问题 示例'}]},{title:"picker",url:"/weex/modules/picker.html",hash:"",data:[{url:"/weex/modules/picker.html",hash:"picker",title:"picker",content:"以下为 picker 相关的 API，用于数据选择，日期选择，时间选择。（ H5模块如需使用，请手动引入 weex-picker组件 ）。"},{url:"/weex/modules/picker.html",hash:"api",title:"API",content:""},{url:"/weex/modules/picker.html",hash:"pick",title:"pick",content:""},{url:"/weex/modules/picker.html",hash:"pick-options-callback-options",title:"pick(options, callback[options])",content:"@options index {number}: 默认选中的选项 items {array}: picker 数据源 textColor {color}: picker中文字的颜色 selectionColor {color}: picker中选中item的背景色 confirmTitle {string}: 确认按钮的文案 cancelTitle {string}: 取消按钮的文案 confirmTitleColor {color}: 确认按钮的文字颜色 cancelTitleColor {color}: 取消按钮的文字颜色 title {string}: 对话框的标题 titleColor {color}: 对话框标题的文字颜色 titleBackgroundColor {color}: 对话框标题的背景色 @callback，执行完读取操作后的回调函数 ret {Object} 为 callback '函数的参数，有两个属性 result {string}: 结果三种类型 success, cancel, error data {number}: 选择的选项,仅成功确认时候存在"},{url:"/weex/modules/picker.html",hash:"pickdate",title:"pickDate",content:""},{url:"/weex/modules/picker.html",hash:"pickdate-options-callback-options",title:"pickDate(options, callback[options])",content:"@options value {string}: 必选，date picker 选中的值，date 的字符串格式为 yyyy-MM-dd max {string}: 可选，date 的最大值 min {string}: 可选，date 的最小值 @callback，执行完读取操作后的回调函数。ret {Object} 为 callback 函数的参数，有两个属性:\nresult {string}: 结果三种类型 success, cancel, error data {string}: 选择的值 date 的字符，格式为 yyyy-MM-dd, 仅成功确认的时候存在"},{url:"/weex/modules/picker.html",hash:"picktime",title:"pickTime",content:""},{url:"/weex/modules/picker.html",hash:"picktime-options-callback-options",title:"pickTime(options, callback[options])",content:"@options value {string}:必选，time 格式为 HH:mm @callback，执行完读取操作后的回调函数。ret {Object} 为 callback 函数的参数，有两个属性\nresult {string}: 结果三种类型 success, cancel, error data {string}:time 格式为 HH:mm, 仅成功确认的时候存在 Demo"}]},{title:"storage",url:"/weex/modules/storage.html",hash:"",data:[{url:"/weex/modules/storage.html",hash:"storage",title:"storage",content:"storage 是一个在前端比较常用的模块，可以对本地数据进行存储、修改、删除，并且该数据是永久保存的，除非手动清除或者代码清除。但是，storage 模块有一个限制就是浏览器端（H5）只能存储小于5M的数据，因为在 H5/Web 端的实现是采用 HTML5 LocalStorage API。而 Android 和 iOS 这块是没什么限制的。\nstorage 常用在一些被用户经常查询，但是又不频繁更新的数据，比如搜索历史、用户的订单列表等。搜索历史一般情况都是作为本地数据存储的，因此使用 storage 比较合适。而用户订单列表是需要本地存储和服务端器检索配合的场景。当一个用户下单后，会经常查阅个人的订单列表。但是，订单的列表数据不是频繁更新的，往往只有在收到货品时，才更新“已签收”，其余平时的状态是“已发货”。因此，可以使用 storage 存储订单列表，可以减少服务器的压力，例如减少 SQL 查询或者缓存的压力。当用户查看订单详情的时候，再更新数据状态。"},{url:"/weex/modules/storage.html",hash:"api",title:"API",content:""},{url:"/weex/modules/storage.html",hash:"setitem",title:"setItem",content:"该方法可以通过键值对的形式将数据存储到本地。同时可以通过该方法，更新已有的数据。"},{url:"/weex/modules/storage.html",hash:"setitem-key-value-callback",title:"setItem(key, value, callback)",content:'参数 说明 类型 key 要存储的键，不允许是 "" 或 null string value 要存储的值，不允许是 "" 或 null string callback 执行操作成功后的回调e.result：表示设置是否成功，如果成功返回 "success"e.data：undefined 表示设置成功，invalid_param 表示 key/value 为 "" 或者 null function(e)'},{url:"/weex/modules/storage.html",hash:"getitem",title:"getItem",content:"传入键名返回对应的键值。"},{url:"/weex/modules/storage.html",hash:"getitem-key-callback",title:"getItem(key, callback)",content:'参数 说明 类型 key 要获取的值的名称，不允许是 "" 或 null string callback 执行操作成功后的回调e.result：表示操作是否成功，如果成功返回 "success"e.data：获取对应的键值字符串，如果没有找到则返回 undefined function(e)'},{url:"/weex/modules/storage.html",hash:"removeitem",title:"removeItem",content:"传入一个键名将会删除本地存储中对应的键值。"},{url:"/weex/modules/storage.html",hash:"removeitem-key-callback",title:"removeItem(key, callback)",content:'参数 说明 类型 key 要删除的值的名称，不允许是 "" 或 null string callback 执行操作成功后的回调e.result：表示删除是否成功，如果成功返回 "success"e.data：undefined 表示删除成功 function(e)'},{url:"/weex/modules/storage.html",hash:"length",title:"length",content:"返回本地存储的数据中所有存储项数量的整数。"},{url:"/weex/modules/storage.html",hash:"length-callback",title:"length(callback)",content:'参数 说明 类型 callback 执行操作成功后的回调e.result：表示操作是否成功，如果成功返回 "success"e.data：当前已存储项的数量 function(e)'},{url:"/weex/modules/storage.html",hash:"getallkeys",title:"getAllKeys",content:"返回一个包含全部已存储项键名的数组。"},{url:"/weex/modules/storage.html",hash:"getallkeys-callback",title:"getAllKeys(callback)",content:'参数 说明 类型 callback 执行操作成功后的回调e.result：表示操作是否成功，如果成功返回 "success"e.data：所有键名组成的数组 function(e) 示例'}]},{title:"stream",url:"/weex/modules/stream.html",hash:"",data:[{url:"/weex/modules/stream.html",hash:"stream",title:"stream",content:"stream 模块提供了基本的网络请求能力，例如 GET 请求、POST 请求等，用于在组件的生命周期内与服务端进行交互。"},{url:"/weex/modules/stream.html",hash:"api",title:"API",content:""},{url:"/weex/modules/stream.html",hash:"fetch",title:"fetch",content:"发起一个请求。"},{url:"/weex/modules/stream.html",hash:"fetch-options-callback-progresscallback",title:"fetch(options, callback, progressCallback)",content:"@options, 请求的配置选项，支持以下配置\nmethod, string, HTTP 请求方法，值为 GET/POST/PUT/DELETE/PATCH/HEAD url, string, 请求的 URL | string headers, string, HTTP 请求头 type, string, 响应类型：json，text 或是 jsonp(在 native 原生实现中其实与 json 相同) body, string, HTTP 请求体 注意 body 参数仅支持 string 类型的参数，请勿直接传递 JSON，必须先将其转为字符串。 GET 请求不支持 body 方式传递参数，请使用 URL 传参。 默认 Content-Type 是 application/x-www-form-urlencoded。 如果你需要通过 POST 发送 json 数据， 需要将 Content-Type 设为 application/json。 @callback, 响应结果回调，回调函数将收到如下的 response 对象： status, number, 返回的状态码 ok, boolean, 如果状态码在 200-299 之间就为 true statusText, string, 状态描述文本 data, string, 返回的数据，如果请求类型是 json 和 jsonp，则它就是一个 object ，否则是一个 string。 headers, object, rHTTP 响应头 @progressCallback, function, a progress callback. This callback will be invoked before request finished. readyState, number, 当前状态，1: 请求连接中；2: 返回响应头中；3: 正在加载返回数据 status, number, 返回的状态码 length number, 已经接受到的数据长度. 你可以从响应头中获取总长度 statusText, string, 状态描述文本 headers. object, HTTP 响应头 TIP 默认的 Content-Type 为 'application/x-www-form-urlencoded'. fetch 方法中设置的 type 是响应类型。 如果要发送 JSON 数据，需要设置 Content-Type 为 'application/json'。 示例 HTTP method 示例  Post 示例 ，常见应用场景，发送 POST 请求。 Get 示例 ，常见应用场景，通过 GET 请求获取数据。"}]},{title:"webSocket",url:"/weex/modules/websockets.html",hash:"",data:[{url:"/weex/modules/websockets.html",hash:"websocket",title:"webSocket",content:"webSockets 是一种创建持久性的连接，并进行双向数据传输的 HTTP 通信协议。Weex 提供了 webSockets 模块方便用户在 H5/iOS/Android 环境下与服务端创建 webSockets 链接进行通信。 注意 h5 提供 WebSockets 的 protocol 默认实现，iOS 和 Android 需要自定义实现，Android 可参考: DefaultWebSocketAdapter.java  DefaultWebSocketAdapterFactory.java  集成例子参考 weex playground"},{url:"/weex/modules/websockets.html",hash:"api",title:"API",content:""},{url:"/weex/modules/websockets.html",hash:"websocket-2",title:"WebSocket",content:"创建 WebSockets，并连接服务器。"},{url:"/weex/modules/websockets.html",hash:"websocket-url-protocol",title:"WebSocket(url, protocol)",content:"@url, string, 表示要连接的 URL @protocol, string, WebSockets 协议名字字符串"},{url:"/weex/modules/websockets.html",hash:"send",title:"send",content:"通过 WebSockets 连接向服务器发送数据。"},{url:"/weex/modules/websockets.html",hash:"send-data",title:"send(data)",content:"@data, string, 要发送到服务器的数据"},{url:"/weex/modules/websockets.html",hash:"close",title:"close",content:"关闭 WebSockets 的链接。"},{url:"/weex/modules/websockets.html",hash:"close-code-reason",title:"close(code, reason)",content:"@code, number, 关闭连接的状态号 @reason, string, 关闭的原因"},{url:"/weex/modules/websockets.html",hash:"onopen",title:"onopen",content:'一个用于连接打开事件的事件监听器，该事件表明这个连接已经准备好接受和发送数据。onopen 接受一个函数作为 EventListener，这个监听器会接受一个 type 为 "open" 的事件对象。'},{url:"/weex/modules/websockets.html",hash:"onopen-options",title:"onopen(options)",content:"标准 event 对象，无特殊属性。"},{url:"/weex/modules/websockets.html",hash:"onmessage",title:"onmessage",content:'一个用于消息事件的事件监听器，当有消息到达的时触发。onmessage 接受一个函数作为 EventListener，这个监听器会接受一个 type 为 "message" 的事件对象。'},{url:"/weex/modules/websockets.html",hash:"onmessage-options",title:"onmessage(options)",content:"@options, object.\ndata, string, 监听器接收的到的消息"},{url:"/weex/modules/websockets.html",hash:"onclose",title:"onclose",content:'一个用于连接关闭事件的事件监听器，当连接关闭时触发。onclose 接受一个函数作为 EventListener，这个监听器会接受一个 type 为 "close" 的事件对象。'},{url:"/weex/modules/websockets.html",hash:"onclose-options",title:"onclose(options)",content:"@options, object\ncode, number, 服务器返回关闭的状态码 reason, string, 服务器返回的关闭原因 wasClean, boolen, 是否完全关闭"},{url:"/weex/modules/websockets.html",hash:"onerror",title:"onerror",content:'一个用于 error 事件的事件监听器，当错误发生时触发。onerror 接受一个函数作为 EventListener，这个监听器会接受一个 type 为 "error" 的事件对象。'},{url:"/weex/modules/websockets.html",hash:"onerror-options",title:"onerror(options)",content:"@options, object\ndata, string, 监听器接收的到的消息 Demos 事件示例  聊天窗口 ，webSockets 常用于在线聊天等实时通信场景。"}]},{title:"webview",url:"/weex/modules/webview.html",hash:"",data:[{url:"/weex/modules/webview.html",hash:"webview",title:"webview",content:"webview 模块提供了一系列的 <web> 组件操作接口，例如 goBack、goForward 和 reload，一般与 <web> 组件一起使用，在 Weex 页面内渲染 web 页面。"},{url:"/weex/modules/webview.html",hash:"api",title:"API",content:""},{url:"/weex/modules/webview.html",hash:"goback",title:"goBack",content:"返回。"},{url:"/weex/modules/webview.html",hash:"goback-webelement",title:"goBack(webElement)",content:"@webElement, <web> 组件元素，可通过 ref 获取"},{url:"/weex/modules/webview.html",hash:"goforward",title:"goForward",content:"前进"},{url:"/weex/modules/webview.html",hash:"goforward-webelement",title:"goForward(webElement)",content:"@webElement, <web> 组件元素，可通过 ref 获取"},{url:"/weex/modules/webview.html",hash:"reload",title:"reload",content:"刷新"},{url:"/weex/modules/webview.html",hash:"reload-webelement",title:"reload(webElement)",content:"@webElement, <web> 组件元素，可通过 ref 获取 示例 API 示例  仿浏览器"}]},{title:"支持的颜色名称列表",url:"/weex/styles/color-name.html",hash:"",data:[{url:"/weex/styles/color-name.html",hash:"支持的颜色名称列表",title:"支持的颜色名称列表",content:""},{url:"/weex/styles/color-name.html",hash:"基础颜色关键词",title:"基础颜色关键词:",content:"颜色名 十六进制RGB值 black(黑) #000000 silver(银) #C0C0C0 gray(灰) #808080 white(白) #FFFFFF maroon(褐紫红) #800000 red(红) #FF0000 purple(紫) #800080 fuchsia(晚樱) #FF00FF green(绿) #008000 lime(石灰) #00FF00 olive(橄榄) #808000 yellow(黄) #FFFF00 navy(海军蓝) #000080 blue(蓝) #0000FF teal(水鸭) #008080 aqua(水蓝) #00FFFF"},{url:"/weex/styles/color-name.html",hash:"扩展颜色关键词",title:"扩展颜色关键词:",content:"颜色名 十六进制RGB值 aliceblue #F0F8FF antiquewhite #FAEBD7 aqua #00FFFF aquamarine #7FFFD4 azure #F0FFFF beige #F5F5DC bisque #FFE4C4 black #000000 blanchedalmond #FFEBCD blue #0000FF blueviolet #8A2BE2 brown #A52A2A burlywood #DEB887 cadetblue #5F9EA0 chartreuse #7FFF00 chocolate #D2691E coral #FF7F50 cornflowerblue #6495ED cornsilk #FFF8DC crimson #DC143C cyan #00FFFF darkblue #00008B darkcyan #008B8B darkgoldenrod #B8860B darkgray #A9A9A9 darkgreen #006400 darkgrey #A9A9A9 darkkhaki #BDB76B darkmagenta #8B008B darkolivegreen #556B2F darkorange #FF8C00 darkorchid #9932CC darkred #8B0000 darksalmon #E9967A darkseagreen #8FBC8F darkslateblue #483D8B darkslategray #2F4F4F darkslategrey #2F4F4F darkturquoise #00CED1 darkviolet #9400D3 deeppink #FF1493 deepskyblue #00BFFF dimgray #696969 dimgrey #696969 dodgerblue #1E90FF firebrick #B22222 floralwhite #FFFAF0 forestgreen #228B22 fuchsia #FF00FF gainsboro #DCDCDC ghostwhite #F8F8FF gold #FFD700 goldenrod #DAA520 gray #808080 green #008000 greenyellow #ADFF2F grey #808080 honeydew #F0FFF0 hotpink #FF69B4 indianred #CD5C5C indigo #4B0082 ivory #FFFFF0 khaki #F0E68C lavender #E6E6FA lavenderblush #FFF0F5 lawngreen #7CFC00 lemonchiffon #FFFACD lightblue #ADD8E6 lightcoral #F08080 lightcyan #E0FFFF lightgoldenrodyellow #FAFAD2 lightgray #D3D3D3 lightgreen #90EE90 lightgrey #D3D3D3 lightpink #FFB6C1 lightsalmon #FFA07A lightseagreen #20B2AA lightskyblue #87CEFA lightslategray #778899 lightslategrey #778899 lightsteelblue #B0C4DE lightyellow #FFFFE0 lime #00FF00 limegreen #32CD32 linen #FAF0E6 magenta #FF00FF maroon #800000 mediumaquamarine #66CDAA mediumblue #0000CD mediumorchid #BA55D3 mediumpurple #9370DB mediumseagreen #3CB371 mediumslateblue #7B68EE mediumspringgreen #00FA9A mediumturquoise #48D1CC mediumvioletred #C71585 midnightblue #191970 mintcream #F5FFFA mistyrose #FFE4E1 moccasin #FFE4B5 navajowhite #FFDEAD navy #000080 oldlace #FDF5E6 olive #808000 olivedrab #6B8E23 orange #FFA500 orangered #FF4500 orchid #DA70D6 palegoldenrod #EEE8AA palegreen #98FB98 paleturquoise #AFEEEE palevioletred #DB7093 papayawhip #FFEFD5 peachpuff #FFDAB9 peru #CD853F pink #FFC0CB plum #DDA0DD powderblue #B0E0E6 purple #800080 red #FF0000 rosybrown #BC8F8F royalblue #4169E1 saddlebrown #8B4513 salmon #FA8072 sandybrown #F4A460 seagreen #2E8B57 seashell #FFF5EE sienna #A0522D silver #C0C0C0 skyblue #87CEEB slateblue #6A5ACD slategray #708090 slategrey #708090 snow #FFFAFA springgreen #00FF7F steelblue #4682B4 tan #D2B48C teal #008080 thistle #D8BFD8 tomato #FF6347 turquoise #40E0D0 violet #EE82EE wheat #F5DEB3 white #FFFFFF whitesmoke #F5F5F5 yellow #FFFF00 yellowgreen #9ACD32"}]},{title:"通用样式",url:"/weex/styles/common-styles.html",hash:"",data:[{url:"/weex/styles/common-styles.html",hash:"通用样式",title:"通用样式",content:"所有 eeui 自带组件都支持以下通用样式规则（除特殊声明外）。 DANGER eeui所支持的通用样式已在本文档中全部列出，一些组件可能有自定义样式，请参考组件文档。除此之外的属性，均不被支持。 WARNING eeui 对于长度值目前只支持像素值，不支持相对单位（em、rem）。"},{url:"/weex/styles/common-styles.html",hash:"盒模型",title:"盒模型",content:"eeui 盒模型基于 CSS 盒模型 ，每个 eeui 元素都可视作一个盒子。我们一般在讨论设计或布局时，会提到「盒模型」这个概念。  盒模型描述了一个元素所占用的空间。每一个盒子有四条边界：外边距边界 margin edge, 边框边界 border edge, 内边距边界 padding edge 与内容边界 content edge。这四层边界，形成一层层的盒子包裹起来，这就是盒模型大体上的含义。 WARNING eeui 盒模型的 box-sizing 默认为 border-box，即盒子的宽高包含内容、内边距和边框的宽度，不包含外边距的宽度。 WARNING eeui 只支持 overflow:hidden. 下面的例子显示了盒模型的基本用法"},{url:"/weex/styles/common-styles.html",hash:"宽度",title:"宽度",content:"width {length}：默认值 0"},{url:"/weex/styles/common-styles.html",hash:"高度",title:"高度",content:"height {length}：默认值 0"},{url:"/weex/styles/common-styles.html",hash:"内边距",title:"内边距",content:"padding {length}：内边距，内容和边框之间的距离，默认值 0。与标准 CSS 类似，padding 支持简写，也可分解为以下四个： padding {length}: 上、下、左、右四边内边距，默认值 0 padding-left {length}：左内边距，默认值 0 padding-right {length}：右内边距，默认值 0 padding-top {length}：上内边距，默认值 0 padding-bottom {length}：下内边距，默认值 0"},{url:"/weex/styles/common-styles.html",hash:"边框",title:"边框",content:""},{url:"/weex/styles/common-styles.html",hash:"border-style",title:"border-style",content:"border-width设定边框样式，如果四个方向的边框样式不同，可分别设置： border-style {string} border-left-style {string}：可选值为 solid | dashed | dotted，默认值 solid border-top-style {string}：可选值为 solid | dashed | dotted，默认值 solid border-right-style {string}：可选值为 solid | dashed | dotted，默认值 solid border-bottom-style {string}：可选值为 solid | dashed | dotted，默认值 solid 支持的值如下： solid：实线边框，默认值 solid dashed：方形虚线边框 dotted：圆点虚线边框"},{url:"/weex/styles/common-styles.html",hash:"border-width",title:"border-width",content:"border-width：设定边框宽度，非负值, 默认值 0，如果四个方向的边框宽度不同，可分别设置： border-left-width {length}：非负值, 默认值 0 border-left-width {length}：非负值, 默认值 0 border-top-width {length}：非负值, 默认值 0 border-right-width {length}：非负值, 默认值 0 border-bottom-width {length}：非负值, 默认值 0"},{url:"/weex/styles/common-styles.html",hash:"border-color",title:"border-color",content:"border-color：设定边框颜色，默认值 #000000，如果四个方向的边框颜色不同，可分别设置： border-color {color}：默认值 #000000 border-left-color {color}：默认值 #000000 border-top-color {color}：默认值 #000000 border-right-color {color}：默认值 #000000 border-bottom-color {color}：默认值 #000000"},{url:"/weex/styles/common-styles.html",hash:"border-radius",title:"border-radius",content:"border-radius：设置边框的圆角，默认值 0，如果四个方向的圆角弧度不同，可分别设置： border-radius {length}: 非负值, 默认值 0 border-bottom-left-radius {length}：非负值, 默认值 0 border-bottom-right-radius {length}：非负值, 默认值 0 border-top-left-radius {length}：非负值, 默认值 0 border-top-right-radius {length}：非负值, 默认值 0 DANGER border-radius和border-width定义了圆心角为90度的椭圆弧的长轴和半长轴的大小。如果邻接两边border-radius(或border-width不一致，eeui绘制的边框曲线可能不够平滑。 Android 兼容性 尽管 overflow: hidden 在 Android 上是默认行为，但只有下列条件都满足时，一个父 view 才会去剪切它的子 view。 父view是 div, a, cell, refresh 或 loading。 系统版本是 Android 4.3 或更高。 系统版本不是 Andorid 7.0。 父 view 没有 background-image 属性或系统版本是 Android 5.0 或更高。"},{url:"/weex/styles/common-styles.html",hash:"外边距",title:"外边距",content:"margin {length}：外边距，元素和元素之间的空白距离，默认值 0。与标准 CSS 类似，margin 支持简写，也可分解为四边： margin {length}: 上、下、左、右四边外边距，默认值 0 margin-left {length}：左外边距，默认值 0 margin-right {length}：右外边距，默认值 0 margin-top {length}：上外边距，默认值 0 margin-bottom {length}：下外边距，默认值 0"},{url:"/weex/styles/common-styles.html",hash:"flexbox",title:"Flexbox",content:"eeui 布局模型基于 CSS Flexbox ，以便所有页面元素的排版能够一致可预测，同时页面布局能适应各种设备或者屏幕尺寸。Flexbox 包含 flex 容器和 flex 成员项。如果一个 eeui 元素可以容纳其他元素，那么它就成为 flex 容器。 WARNING 文档中未说明的 flexbox 属性均不支持：如 order、flex-flow 等。"},{url:"/weex/styles/common-styles.html",hash:"flex-容器",title:"Flex 容器",content:"在 eeui 中，Flexbox 是默认且唯一的布局模型，所以你不需要手动为元素添加 display: flex; 属性。"},{url:"/weex/styles/common-styles.html",hash:"direction",title:"direction",content:"direction决定了文字方向和Flex容器的基线方向。默认值为ltr。 ltr: 文字和其他元素从左到右排布 rtl: 文字和其他元素从右到左排布。 TIP 尽管 direction 不是 Flexbox模型的一部分，但却对 Flexbox 模型有着影响。"},{url:"/weex/styles/common-styles.html",hash:"flex-direction",title:"flex-direction",content:"flex-direction定义了 flex 容器中 flex 成员项的排列方向，默认值为 column column：从上到下排列。 column-reverse: 从下到上排布 row：如果存在direction:ltr，则从左到右排布；如果存在direction:rtl，则从右到左排布。 row-reverse: 排布方向与flex-direction:row相反"},{url:"/weex/styles/common-styles.html",hash:"flex-wrap",title:"flex-wrap",content:"flex-wrap属性决定了Flex成员项在一行还是多行分布，默认值为nowrap nowrap: Flex成员项在一行排布，排布的开始位置由direction指定。 wrap：Flex成员项在多行排布，排布的开始位置由direction指定 wrap-reverse: 行为类似于wrap，排布方向与其相反。"},{url:"/weex/styles/common-styles.html",hash:"justify-content",title:"justify-content",content:"定义了 flex 容器中 flex 成员项在主轴方向上如何排列以处理空白部分。可选值为 flex-start | flex-end | center | space-between，默认值为 flex-start。 flex-start：是默认值，所有的 flex 成员项都排列在容器的前部； flex-end：则意味着成员项排列在容器的后部； center：即中间对齐，成员项排列在容器中间、两边留白； space-between：表示两端对齐，空白均匀地填充到 flex 成员项之间。"},{url:"/weex/styles/common-styles.html",hash:"align-items",title:"align-items",content:"定义了 flex 容器中 flex 成员项在纵轴方向上如何排列以处理空白部分。可选值为 stretch | flex-start | center | flex-end，默认值为 stretch。 stretch 是默认值，即拉伸高度至 flex 容器的大小； flex-start 则是上对齐，所有的成员项排列在容器顶部； flex-end 是下对齐，所有的成员项排列在容器底部； center 是中间对齐，所有成员项都垂直地居中显示。"},{url:"/weex/styles/common-styles.html",hash:"flex-成员项",title:"Flex 成员项",content:""},{url:"/weex/styles/common-styles.html",hash:"flex",title:"flex",content:"flex 属性定义了 flex 成员项可以占用容器中剩余空间的大小。如果所有的成员项设置相同的值 flex: 1，它们将平均分配剩余空间。如果一个成员项设置的值为 flex: 2，其它的成员项设置的值为 flex: 1，那么这个成员项所占用的剩余空间是其它成员项的 2 倍。Flex 成员项暂不支持 flex-shrink 和 flex-basis 属性。 flex {number}：值为 number 类型。该属性不支持 flex: <flex-grow> | <flex-shrink> | <'flex-basis> 的简写。 示例，使用 flexbox 实现水平居中与垂直居中："},{url:"/weex/styles/common-styles.html",hash:"examples",title:"Examples",content:"水平和竖直居中  Grid布局  等高模块"},{url:"/weex/styles/common-styles.html",hash:"定位",title:"定位",content:"eeui 支持 position 定位，用法与 CSS position 类似。为元素设置 position 后，可通过 top、right、bottom、left 四个属性设置元素坐标。 position {string}： 设置定位类型。可选值为 relative | absolute | fixed | sticky，默认值为 relative。 relative 是默认值，指的是相对定位； absolute 是绝对定位，以元素的容器作为参考系； fixed 保证元素在页面窗口中的对应位置显示； sticky 指的是仅当元素滚动到页面之外时，元素会固定在页面窗口的顶部。 top {number}：距离上方的偏移量，默认为 0。 bottom {number}：距离下方的偏移量，默认为 0。 left {number}：距离左方的偏移量，默认为 0。 right {number}：距离右方的偏移量，默认为 0。 注意： eeui 目前不支持 z-index 设置元素层级关系，但靠后的元素层级更高，因此，对于层级高的元素，可将其排列在后面。 如果定位元素超过容器边界，在 Android 下，超出部分将不可见，原因在于 Android 端元素 overflow 默认值为 hidden，但目前 Android 暂不支持设置 overflow: visible。 示例"},{url:"/weex/styles/common-styles.html",hash:"transition",title:"Transition 0.16+",content:"现在您可以在 CSS 中使用 transition 属性来提升您应用的交互性与视觉感受，transition 中包括布局动画，即 LayoutAnimation，现在布局产生变化的同时也能使用 transition 带来的流畅动画。transition允许 CSS 的属性值在一定的时间区间内平滑地过渡。"},{url:"/weex/styles/common-styles.html",hash:"参数",title:"参数",content:"transition-property：设置过渡动画的属性名，设置不同样式 transition 效果的键值对，默认值为空，表示不执行任何过渡效果，下表列出了所有合法的参数属性： 参数名 描述 width 设置组件的宽度参与过渡动画 height 设置组件的高度参与过渡动画 top 设置组件的顶部距离参与过渡动画 bottom 设置组件的底部距离参与过渡动画 left 设置组件的左侧距离参与过渡动画 right 设置组件的右侧距离参与过渡动画 background-color 设置组件的背景颜色参与过渡动画 opacity 设置组件的不透明度参与过渡动画 transform 设置组件的变换类型参与过渡动画 transition-duration：指定过渡的持续时间 (单位是毫秒)，默认值是 0，表示没有动画效果。 transition-delay：指定请求过渡操作到执行过渡之间的时间间隔 (单位是毫秒或者秒)，默认值是 0，表示没有延迟，在请求后立即执行过渡。 transition-timing-function：描述过渡执行的速度曲线，用于使过渡更为平滑。默认值是 ease。下表列出了所有合法的属性： 属性名 描述 ease transition 过渡逐渐变慢的过渡效果 ease-in transition 过渡慢速开始，然后变快的过渡效果 ease-out transition 过渡快速开始，然后变慢的过渡效果 ease-in-out transition 过渡慢速开始，然后变快，然后慢速结束的过渡效果 linear transition 过渡以匀速变化 cubic-bezier(x1, y1, x2, y2) 使用三阶贝塞尔函数中自定义 transition 变化过程，函数的参数值必须处于 0 到 1 之间。更多关于三次贝塞尔的信息请参阅 cubic-bezier  和 Bézier curve ."},{url:"/weex/styles/common-styles.html",hash:"示例",title:"示例",content:""},{url:"/weex/styles/common-styles.html",hash:"transform",title:"Transform",content:"TIP 除了perspective和transform-origin，transition支持了transform的全部能力。 目前支持的 transform 声明格式: translateX({<length/percentage>})：X 轴方向平移，支持长度单位或百分比。 translateY({<length/percentage>})：Y 轴方向平移，支持长度单位或百分比。 translate({<length/percentage>} {<length/percentage>})：X 轴和 Y 轴方向同时平移，translateX + translateY 简写。 scaleX(<number>)：X 轴方向缩放，值为数值，表示缩放比例，不支持百分比。 scaleY(<number>)：Y 轴方向缩放，值为数值，表示缩放比例，不支持百分比。 scale(<number>)：X 轴和 Y 轴方向同时缩放，scaleX + scaleY 简写。 rotate(<angle/degree>)：将元素围绕一个定点（由 transform-origin 属性指定）旋转而不变形的转换。指定的角度定义了旋转的量度。若角度为正，则顺时针方向旋转，否则逆时针方向旋转。 rotateX(<angle/degree>)0.14+：X 轴方向的旋转。 rotateY(<angle/degree>)0.14+：Y 轴方向的旋转。 perspective(<length>)0.16+：指定了观察者与 z=0 平面的距离，使具有三维位置变换的元素产生透视效果。z>0 的三维元素比正常大，而 z<0 时则比正常小，大小程度由该属性的值决定。Android 4.1及以上版本支持。详情可参考 MDN 介绍 。 transform-origin {length/percentage/关键字(top/left/right/bottom)}:：设置一个元素变形的原点，仅支持 2D 坐标。"},{url:"/weex/styles/common-styles.html",hash:"示例-2",title:"示例",content:'<template>\n  <div class="wrapper">\n    <div class="transform">\n     <text class="title">Transformed element</text>\n    </div>\n  </div>\n</template>\n\n<style>\n  .transform {\n    align-items: center;\n    transform: translate(150px, 200px) rotate(20deg);\n    transform-origin: 0 -250px;\n    border-color:red;\n    border-width:2px;\n  }\n  .title {font-size: 48px;}\n</style>\nWARNING 在 native 端，给组件设置 transform 变换后，如果需要恢复原效果，不能直接删除对应的 transform 属性，而需要重新设置一个 transform 将元素变换恢复。可对比以下两个示例： 手动恢复  直接删除 transform'},{url:"/weex/styles/common-styles.html",hash:"伪类",title:"伪类 0.9.5",content:"eeui 支持四种伪类：active, focus, disabled, enabled 所有组件都支持 active, 但只有 input 组件和 textarea 组件支持 focus, enabled, disabled。"},{url:"/weex/styles/common-styles.html",hash:"规则",title:"规则",content:"同时生效的时候，优先级高覆盖优先级低 例如：input:active:enabled 和 input:active 同时生效，前者覆盖后者 互联规则如下所示  示例"},{url:"/weex/styles/common-styles.html",hash:"线性渐变",title:"线性渐变 0.10+",content:"eeui 支持线性渐变背景，具体介绍可参考 CSS 渐变介绍 。 所有组件均支持线性渐变。"},{url:"/weex/styles/common-styles.html",hash:"使用",title:"使用",content:"你可以通过 background-image 属性创建线性渐变。 目前暂不支持 radial-gradient（径向渐变）。 eeui 目前只支持两种颜色的渐变，渐变方向如下： to right：从左向右渐变 to left：从右向左渐变 to bottom：从上到下渐变 to top：从下到上渐变 to bottom right：从左上角到右下角 to top left：从右下角到左上角 WARNING background-image 优先级高于 background-color，这意味着同时设置 background-image 和 background-color，background-color 被覆盖。 background 不支持简写。 示例"},{url:"/weex/styles/common-styles.html",hash:"阴影-box-shadow",title:"阴影(box-shadow) 0.11+",content:"eeui 支持 box-shadow 属性用于设置元素阴影。"},{url:"/weex/styles/common-styles.html",hash:"注意",title:"注意",content:"WARNING 目前仅 iOS 支持 box-shadow 属性，Android 暂不支持，可以使用图片代替。 每个元素只支持设置一个阴影效果，不支持多个阴影同时作用于一个元素。"},{url:"/weex/styles/common-styles.html",hash:"参数-2",title:"参数",content:"inset（可选） 默认阴影在边框外。使用 inset 后，阴影在边框内（即使是透明边框），背景之上内容之下。 <offset-x> px 单位长度值，用来设置阴影偏移量。<offset-x> 设置水平偏移量，如果是负值则阴影位于元素左边。 <offset-y> 设置垂直偏移量，如果是负值则阴影位于元素上面。如果两者都是 0，那么阴影位于元素后面。这时如果设置了 <blur-radius> 或 <spread-radius> 则有模糊效果。 <offset-y> px 单位长度值，用来设置阴影偏移量。<offset-x> 设置水平偏移量，如果是负值则阴影位于元素左边。 <offset-y> 设置垂直偏移量，如果是负值则阴影位于元素上面。如果两者都是 0，那么阴影位于元素后面。这时如果设置了 <blur-radius> 或 <spread-radius> 则有模糊效果。 <blur-radius> 设置模糊半径，px 单位长度值，值越大，模糊面积越大，阴影就越大越淡。不能为负值。默认为0，此时阴影边缘锐利。 <color> 设置阴影颜色，可参考 CSS 颜色单位。 示例"},{url:"/weex/styles/common-styles.html",hash:"其他基本样式",title:"其他基本样式",content:"opacity {number}：取值范围为 [0, 1] 区间。默认值是 1，即完全不透明；0 是完全透明；0.5 是 50% 的透明度。 background-color {color}：设定元素的背景色，可选值为色值，支持RGB（ rgb(255, 0, 0) ）；RGBA（ rgba(255, 0, 0, 0.5) ）；十六进制（ #ff0000 ）；精简写法的十六进制（ #f00 ）；色值关键字（red），默认值是 transparent 。 注意： 色值的关键字列表。"},{url:"/weex/styles/common-styles.html",hash:"上手样式",title:"上手样式",content:"如果对于样式写法需要更多上手参考，可参考每个组件的文档中，都有常见的例子可供参考。 你可以按照以下步骤来规划 eeui 页面的样式。 全局样式规划：将整个页面分割成合适的模块。 flex 布局：排列和对齐页面模块。 定位盒子：定位并设置偏移量。 细节样式处理：增加特定的具体样式。"}]},{title:"CSS 单位",url:"/weex/styles/css-units.html",hash:"",data:[{url:"/weex/styles/css-units.html",hash:"css-单位",title:"CSS 单位",content:""},{url:"/weex/styles/css-units.html",hash:"css-长度单位",title:"CSS 长度单位",content:"在 eeui 中，我们只支持 px 长度单位。 注意 eeui 不支持类似 em、rem、pt,% 这样的 CSS 标准中的其他长度单位； 单位 px 不可省略；"},{url:"/weex/styles/css-units.html",hash:"css-数值单位",title:"CSS 数值单位",content:"在 eeui 中，除了长度单位外，还有数值单位，仅仅一个数值，后面没有 px 等单位。用于 opacity，lines，flex 等属性指定一个纯数值。 TIP 有时值必须是整数，例如：lines"},{url:"/weex/styles/css-units.html",hash:"css-颜色单位",title:"CSS 颜色单位",content:"eeui 支持多种颜色单位： 精简写法的十六进制，如#f00 十六进制，如 #ff0000 RGB， 如 rgb(255, 0, 0) RGBA，如 rgba(255, 0, 0, 0.5) 色值关键字，如 red 注意 只有上面列出的颜色格式被支持，其他颜色格式均不被支持。 6-chars hex 16进制颜色值 是\b性能最好的颜色使用方式。除非有特殊原因，请使用6-chars hex\b格式。"},{url:"/weex/styles/css-units.html",hash:"颜色关键字列表",title:"颜色关键字列表",content:"颜色名 十六进制RGB值 black #000000 silver #C0C0C0 gray #808080 white #FFFFFF maroon #800000 red #FF0000 purple #800080 fuchsia #FF00FF green #008000 lime #00FF00 olive #808000 yellow #FFFF00 navy #000080 blue #0000FF teal #008080 aqua #00FFFF aliceblue #F0F8FF antiquewhite #FAEBD7 aqua #00FFFF aquamarine #7FFFD4 azure #F0FFFF beige #F5F5DC bisque #FFE4C4 black #000000 blanchedalmond #FFEBCD blue #0000FF blueviolet #8A2BE2 brown #A52A2A burlywood #DEB887 cadetblue #5F9EA0 chartreuse #7FFF00 chocolate #D2691E coral #FF7F50 cornflowerblue #6495ED cornsilk #FFF8DC crimson #DC143C cyan #00FFFF darkblue #00008B darkcyan #008B8B darkgoldenrod #B8860B darkgray #A9A9A9 darkgreen #006400 darkgrey #A9A9A9 darkkhaki #BDB76B darkmagenta #8B008B darkolivegreen #556B2F darkorange #FF8C00 darkorchid #9932CC darkred #8B0000 darksalmon #E9967A darkseagreen #8FBC8F darkslateblue #483D8B darkslategray #2F4F4F darkslategrey #2F4F4F darkturquoise #00CED1 darkviolet #9400D3 deeppink #FF1493 deepskyblue #00BFFF dimgray #696969 dimgrey #696969 dodgerblue #1E90FF firebrick #B22222 floralwhite #FFFAF0 forestgreen #228B22 fuchsia #FF00FF gainsboro #DCDCDC ghostwhite #F8F8FF gold #FFD700 goldenrod #DAA520 gray #808080 green #008000 greenyellow #ADFF2F grey #808080 honeydew #F0FFF0 hotpink #FF69B4 indianred #CD5C5C indigo #4B0082 ivory #FFFFF0 khaki #F0E68C lavender #E6E6FA lavenderblush #FFF0F5 lawngreen #7CFC00 lemonchiffon #FFFACD lightblue #ADD8E6 lightcoral #F08080 lightcyan #E0FFFF lightgoldenrodyellow #FAFAD2 lightgray #D3D3D3 lightgreen #90EE90 lightgrey #D3D3D3 lightpink #FFB6C1 lightsalmon #FFA07A lightseagreen #20B2AA lightskyblue #87CEFA lightslategray #778899 lightslategrey #778899 lightsteelblue #B0C4DE lightyellow #FFFFE0 lime #00FF00 limegreen #32CD32 linen #FAF0E6 magenta #FF00FF maroon #800000 mediumaquamarine #66CDAA mediumblue #0000CD mediumorchid #BA55D3 mediumpurple #9370DB mediumseagreen #3CB371 mediumslateblue #7B68EE mediumspringgreen #00FA9A mediumturquoise #48D1CC mediumvioletred #C71585 midnightblue #191970 mintcream #F5FFFA mistyrose #FFE4E1 moccasin #FFE4B5 navajowhite #FFDEAD navy #000080 oldlace #FDF5E6 olive #808000 olivedrab #6B8E23 orange #FFA500 orangered #FF4500 orchid #DA70D6 palegoldenrod #EEE8AA palegreen #98FB98 paleturquoise #AFEEEE palevioletred #DB7093 papayawhip #FFEFD5 peachpuff #FFDAB9 peru #CD853F pink #FFC0CB plum #DDA0DD powderblue #B0E0E6 purple #800080 red #FF0000 rosybrown #BC8F8F royalblue #4169E1 saddlebrown #8B4513 salmon #FA8072 sandybrown #F4A460 seagreen #2E8B57 seashell #FFF5EE sienna #A0522D silver #C0C0C0 skyblue #87CEEB slateblue #6A5ACD slategray #708090 slategrey #708090 snow #FFFAFA springgreen #00FF7F steelblue #4682B4 tan #D2B48C teal #008080 thistle #D8BFD8 tomato #FF6347 turquoise #40E0D0 violet #EE82EE wheat #F5DEB3 white #FFFFFF whitesmoke #F5F5F5 yellow #FFFF00 yellowgreen #9ACD32"}]},{title:"文本样式",url:"/weex/styles/text-styles.html",hash:"",data:[{url:"/weex/styles/text-styles.html",hash:"文本样式",title:"文本样式",content:"文本类组件共享一些通用样式, 这类组件目前包括 <text>、<input>和<richtext>"},{url:"/weex/styles/text-styles.html",hash:"属性",title:"属性",content:""},{url:"/weex/styles/text-styles.html",hash:"color",title:"color",content:"color {color}：文字颜色，支持如下字段：\n* RGB（ rgb(255, 0, 0) ）\n* RGBA（ rgba(255, 0, 0, 0.5) ）\n* 十六进制（ #ff0000 ）；精简写法的十六进制（ #f00 ）\n* 色值关键字（red）"},{url:"/weex/styles/text-styles.html",hash:"font-size",title:"font-size",content:"font-size {number}：文字大小。"},{url:"/weex/styles/text-styles.html",hash:"font-style",title:"font-style",content:"font-style {string}：字体类别。可选值 normal | italic，默认为 normal。"},{url:"/weex/styles/text-styles.html",hash:"font-weight",title:"font-weight",content:"font-weight {string}：字体粗细程度 可选值: normal, bold, 100, 200, 300, 400, 500, 600, 700, 800, 900 normal 等同于 400, bold 等同于 700； 默认值: normal； iOS 支持 9 种 font-weight值；Android 仅支持 400 和 700, 其他值会设为 400 或 700 类似 lighter, bolder 这样的值暂时不支持"},{url:"/weex/styles/text-styles.html",hash:"text-decoration",title:"text-decoration",content:"text-decoration {string}：字体装饰，可选值 none | underline | line-through，默认值为 none。 WARNING 只支持 <text> 和 <ricthext>"},{url:"/weex/styles/text-styles.html",hash:"text-algin",title:"text-algin",content:"text-align {string}：对齐方式。可选值 left | center | right，默认值为 left。"},{url:"/weex/styles/text-styles.html",hash:"font-family",title:"font-family",content:"font-family {string}：设置字体。这个设置 不保证 在不同平台，设备间的一致性。如所选设置在平台上不可用，将会降级到平台默认字体。如果需要加载自定义字体，请参考相关dom.addRule。"},{url:"/weex/styles/text-styles.html",hash:"text-overflow",title:"text-overflow",content:"text-overflow {string}：设置内容超长时的省略样式。可选值 clip | ellipsis WARNING 只支持 <text> 和 <ricthext>"},{url:"/weex/styles/text-styles.html",hash:"lines",title:"lines",content:"lines {number}: 正整数，指定\b最大文本行数，默认\b值为0，表示不限制最大行数\b\b。如果文本不够长，实际展示行数会小于指定行数。"},{url:"/weex/styles/text-styles.html",hash:"line-height",title:"line-height",content:"line-height {length}\b：正整数，每行文字高度。line-height是 top 至 bottom 的距离。line-height与font-size没有关系，因为line-height被 top 和 bottom 所限制，font-size 被 glyph 所解析。line-height和font-size\b相等一般\b会导致文字被截断。"}]}]}}]);